<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林水溶的博客</title>
  
  <subtitle>以前我没得选，现在我只想做个坏人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-05-17T13:49:14.276Z</updated>
  <id>/</id>
  
  <author>
    <name>shuiRongLin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github：最后的言论自由之地</title>
    <link href="/2019/05/10/Github%EF%BC%9A%E6%9C%80%E5%90%8E%E7%9A%84%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1%E4%B9%8B%E5%9C%B0/"/>
    <id>/2019/05/10/Github：最后的言论自由之地/</id>
    <published>2019-05-10T10:21:02.000Z</published>
    <updated>2019-05-17T13:49:14.276Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=780146&auto=0&height=66"></iframe><blockquote><p>奇葩的制度产生奇葩的社会现象</p></blockquote><p>有一个争论已经持续了很多年，而且在可见的未来它还将持续下去…</p><h4 id="自由之地"><a href="#自由之地" class="headerlink" title="自由之地"></a>自由之地</h4><hr><p><a href="http://github.com/" target="_blank" rel="noopener">Github</a>在天朝是一个很“神奇”的存在。神奇之处在于：</p><ol><li>它不受天朝政府监管：只要没有违反Github的<a href="https://help.github.com/en/articles/github-terms-of-service" target="_blank" rel="noopener">服务条款</a>，Github欢迎<a href="https://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/" target="_blank" rel="noopener">任何内容</a></li><li>它没有被GFW屏蔽：用户可以直连</li></ol><p>的确，Github曾被至少两次<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9GitHub%E7%9A%84%E5%AE%A1%E6%9F%A5%E5%92%8C%E5%B0%81%E9%94%81" target="_blank" rel="noopener">短暂屏蔽</a>过。但是，由于屏蔽引发了用户和科技公司的强烈反应「1」，政府最终解除了对GitHub的屏蔽。</p><blockquote><p>「1」：李开复在新浪微博抗议，迅速引起网民的关注，该消息更在三小时内被转发逾3万2千次。2013年1月23日，GitHub被解封，事件平息。</p></blockquote><p>因此当社会性事件发生，但国内的社交网络（微博、知乎、论坛…）、即时通讯应用（微信、QQ）在大规模审查、删帖时，就有人想到了Github。于是人们把那些图片、文章、视频上传到Github来逃脱被删除的命运。</p><p>开头提到的争论也因此产生。（由<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384553049" target="_blank" rel="noopener">@wql7013 总结</a>）</p><p><strong>一些人觉得这些内容可以上传至GitHub：</strong></p><ol><li>不违反GitHub条款；不违反GitHub文化；由于国内媒体被限制，致使GitHub传播效率相对更优；在GitHub上此项目并非唯一的非技术项目，也并非唯一的政治敏感项目。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384175435" target="_blank" rel="noopener">详细参看@karkenhavedream</a></li><li>即使GitHub被墙，翻墙就行了，翻墙是程序员必备技能。</li><li>曾经有人总结了GitHub的非程序员用法：<a href="https://www.itworld.com/article/2822952/open-source-tools/142227-Gitty-up-12-things-other-than-programming-code-that-are-managed-on-GitHub.html" target="_blank" rel="noopener">12种非编程的GitHub用法</a>，<a href="https://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/" target="_blank" rel="noopener">7种非写代码的GitHub用法</a>。</li><li>自由、开方、平等、互助、反对强权是互联网精神，也是GitHub文化；GitHub不只是用来拷贝代码的。</li><li>程序员不应该只关心编程，应该有社会责任。</li><li>Facebook、Twitter国内不能访问，对国内起不到传播作用；Facebook、Twitter、论坛、贴吧也有人在讨论。</li><li>GitHub被墙不是项目发起者的错，是封锁GitHub的人的错，应该抱怨的是网络审查。</li><li>GitHub官方曾表示，很高兴GitHub能用于政府协同治理；官方博客提到，GitHub上有不少政府项目，包括代码、数据、政策、行业规范、法律法规、活动反馈等，方便民主监督（<a href="https://blog.github.com/2014-08-14-government-opens-up-10k-active-government-users-on-github/" target="_blank" rel="noopener">GitHub官方博客</a>）。</li><li>Git仓库很适合用于多人协作管理文档版本，协作收集整理资料，此项目的主要作用是整理记录事件；Twitter等网站没有此功能。</li><li>更多此类repo是社会的进步，但是GitHub应该优化排行榜（Trending），分类技术和非技术类项目。</li></ol><p><strong>另一些人觉得不可以：</strong></p><ol><li>只希望GitHub是用来写代码的，不希望GitHub受影响，从而影响国内互联网行业。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/534#issue-317498800" target="_blank" rel="noopener">引自@Hujunjob</a></li><li>可以在Twitter、Facebook、wikipedia或者自建站点讨论此事。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/619#issue-317884530" target="_blank" rel="noopener">引自@xianghongai</a></li><li>GitHub对大陆程序员很重要，不能为了自由而导致它被封。</li><li>翻墙速度慢，影响效率。</li><li>程序员本职是写程序，不必要会翻墙，翻墙只是加分项。</li><li>非技术项目占用排行榜（Trending），影响优秀开源项目的获得和传播。</li><li>此项目下有很多鼓动搞乱国内局势的人, <a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384311213" target="_blank" rel="noopener">源自@zibengou</a>。</li><li>在GitHub发没多大意义，很少人能看到，传播效果不好。</li><li>可以到被封带来的影响更小的仓库记录此事 ( 暂未有人推荐类似功能的仓库 )。</li><li>在规范issues前，issues曾成互相谩骂和攻击的舆论场，不希望带起更多同类的repo，使GitHub变为过分热烈的舆论平台。</li></ol><p>这两拨人谁都没办法说服对方，包括我。</p><p>我曾花时间、精力去思考、翻阅相关资料（道德、正义、道德悖论、电车难题、科尔伯格道德发展阶段、普世价值）。但还是不知道该如何说服一个网友：“这些东西我都不关心，我就是想不翻墙就能访问Github。“</p><p>尽管争论不休，<strong>但在某种意义上，Github已经成了天朝局域网上最后的自由之地！</strong>另外，客观地说：<strong>将国内敏感的内容上传至Github的行为永远不会停止，直到Github也被屏蔽或者GFW倒塌。</strong></p><h4 id="“你为什么不？”"><a href="#“你为什么不？”" class="headerlink" title="“你为什么不？”"></a>“你为什么不？”</h4><hr><blockquote><p>有个奇葩且可恶的观点，我忍不住要批驳一下</p></blockquote><p>小明：“Twitter、Facebook也可以（放那些敏感政治信息）啊，为什么要用Github。如果仅仅因为Github没有被封的话，那Gitbook也没被封啊。为什么不去Gitbook，非得在Github上？”</p><p>这种观点既奇葩又可恨。可恨之处在于，他们的<strong>观点背后的逻辑是：“不想让你说话”。</strong></p><p>我来给大家解释：</p><p>假如你认为小明说的有道理，然后将内容转移到了Gitbook上。那么一定有小明2在等着你，告诉你：“AAA、BBB、CCC也可以啊，为什么非要用Gitbook？”</p><p>接着，你又转移到了AAA上，然后有个小明3对你说：“DDD、EEE、FFF也可以啊，为什么非要用AAA？”</p><p>…</p><p>在转移了100个阵地后，你会发现他喵的有个叫“小明101”的人在等着你…</p><p><strong>明白了吗？</strong></p><p>我又联想到之前Python 之父 Guido van Rossum 为中国的程序员发声：<a href="https://discuss.python.org/t/can-we-do-something-for-996-programmers-in-china/1119" target="_blank" rel="noopener">我们能为中国的“996”程序员做什么？ </a>时，在论坛里看到有人持有这样的言论，且还被很多人赞同：”不关心乌干达贫穷的孩子，反而关心中国‘贫穷’的程序员”</p><p>这样嘲讽的语气（背后的逻辑），让我很不舒服。</p><p>他的逻辑和前面“小明”的逻辑其实是一样的。如果你去关心“乌干达贫穷的孩子”，小明2就会说：“不关心XXX战乱地区濒临死亡的人，反而关心尽管贫穷但还能基本活下去的乌干达的孩子。”</p><p>…</p><p>同理，<strong>如果你认同这样的观点，那么到最后会发现我们什么都没有做，就一直在忙着比较哪个群体“更弱势”了…</strong></p><p>谨防这样的观点的渗透。<strong>善心不分多寡，嘉行不分高下。做，就对了！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="言论自由" scheme="/tags/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/"/>
    
      <category term="Github" scheme="/tags/Github/"/>
    
      <category term="逻辑" scheme="/tags/%E9%80%BB%E8%BE%91/"/>
    
      <category term="GFW" scheme="/tags/GFW/"/>
    
  </entry>
  
  <entry>
    <title>对抗假消息：虚假截图制作工具</title>
    <link href="/2019/03/24/%E5%AF%B9%E6%8A%97%E5%81%87%E6%B6%88%E6%81%AF%EF%BC%9A%E8%99%9A%E5%81%87%E6%88%AA%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7/"/>
    <id>/2019/03/24/对抗假消息：虚假截图制作工具/</id>
    <published>2019-03-24T07:46:14.000Z</published>
    <updated>2019-05-09T15:16:19.648Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5045810&auto=0&height=66"></iframe><blockquote><p>这是一个可以<strong>“伪造”微博、知乎、豆瓣、简书等网站界面截图</strong>的网站。但本网站是为了告诉（不懂编程的）普通人：<strong>不要轻易相信网上看到的“截图”！</strong></p><p>项目地址：<a href="https://github.com/thegreatjavascript/FakeScreenshot" target="_blank" rel="noopener">https://github.com/thegreatjavascript/FakeScreenshot</a></p><p>在线预览：<a href="https://fakes.netlify.com" target="_blank" rel="noopener">https://fakes.netlify.com</a></p></blockquote><p><img src="https://i.loli.net/2019/05/09/5cd4441d841d2.png" alt="截图预览"></p><p><strong>当你在互联网上看到一张截图时，你第一反应是什么？</strong></p><p>我曾在技术交流群里发了下面这么一张图，想看看人们的第一反应是什么。</p><p><img src="https://i.loli.net/2019/05/09/5cd4436bea0a1.jpg" alt="vue3.0"></p><p>“卧槽，这么快？”</p><p>“正好这段时间没事做，学一下”</p><p>“和2.0有什么区别啊？”</p><p>“求你们别更了，我学不动了.jpg”</p><p>“支持TS吗？”</p><p>……</p><p><strong>你看，没有人怀疑这个截图的真实性（当然，也可能有人怀疑但没发声）</strong></p><p>我们都曾看到过各种截屏：包括不限于<code>知乎</code>、<code>微博</code>、<code>豆瓣</code>、<code>NGA</code>、<code>V2EX</code>、<code>QQ</code>、<code>微信</code> 、<code>各种新闻站</code>…</p><p>如果那些截屏内容只涉及到段子还好，但多数情况不是。它们往往和某事/某人有关，这（假截图）就<strong>极有可能</strong>导致人们对该事/人产生错误的看法（之所以说错误，是因为我认为<strong>大多数</strong>虚假截图的制作者都怀有不良动机。）</p><p>再加上<strong>多数人并不会去主动验证该截图描述事情的真伪</strong>，这是“虚假截图”泛滥的重要原因之一。</p><blockquote><p>为什么人们普遍不会去验证截图内容的真伪？</p><p>答案很简单：难。（人们每天接受的信息量太多，但验证某条信息的真伪很难。）</p></blockquote><p>所以我就想，作为一个程序员，我能为此做些什么？</p><p>然后联想到了之前的<strong>一些事儿：</strong></p><p><strong>1</strong></p><p>之前还常玩知乎的时候，凑过不少“热闹”。</p><p>我发现了一个现象：<strong>如果某答主在发表对某事的看法时，附带了截图的话，那么往往就能吸引不少“赞同”。</strong> 因为人们下意识地认为“既然都有截图，那么情况十有八九就是这样吧”。</p><p>好（wu）玩（yu）的是，有两次我还专门撰写了答案，用我伪造的一些荒唐的截图（让人一看就觉得是假的）来提醒其他用户：不要轻易相信高赞答主提供的“所谓截图证据”。</p><p>但是…</p><p>我的回答迅速淹没在洪流中，沉了…</p><p>当时，<strong>我的心情是复杂的…</strong></p><p><strong>2</strong></p><p>我基本每天都会上网，也有在不同渠道看新闻的习惯。当我看到一些明显真实性存疑的东西被广泛传播时，我就很烦，想骂人，想质问他们转发前为什么不先自己去证实下真伪？</p><p>但理智地讲，我也非常清楚：<strong>“现实就是这样。因为现在人们每天接受的信息太多，且求证的难度也太高，所以就极少会有人去求证”。</strong> 这个事实很让人沮丧。</p><p>我最先想到的其实并不是<a href="https://github.com/thegreatjavascript/FakeScreenshot" target="_blank" rel="noopener">「虚假截图制作工具/FakeScreenshot」</a>项目。</p><p>而是运营一个专门替别人“求证”某事真实性的微博账户。当然，也不是所有的事情我都可以“搞定”，毕竟我只是一个没有什么社会能量的普通程序员，但仍旧有一些事情我可以求证出来。不过因为近期时间已经被其他事情占用了，因此这个想法一直没有去实施。</p><p>后面我才想到了这个“灵感”（貌似是和别人斗图的时候？:p ）：何不做一个“伪造截图”的网站，<strong>这样任何知道此网站存在的人，心里都会明白这么一件事：“哦，原来各大网站截图都是可以轻易伪造的啊”。这样当他再次看到其他截图的时候，会想起来此网站的存在，然后就会下意识地怀疑截图的真实性了。</strong></p><blockquote><p>有朋友说这是：用“造假”来对抗造假。</p><p>是的，它是！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="大前端" scheme="/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目" scheme="/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="截图制作" scheme="/tags/%E6%88%AA%E5%9B%BE%E5%88%B6%E4%BD%9C/"/>
    
      <category term="虚假截图" scheme="/tags/%E8%99%9A%E5%81%87%E6%88%AA%E5%9B%BE/"/>
    
      <category term="开源" scheme="/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative实战之社交网络客户端（一：基础篇）</title>
    <link href="/2019/02/22/ReactNative%E5%AE%9E%E6%88%98%E4%B9%8B%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <id>/2019/02/22/ReactNative实战之社交网络客户端（一：基础篇）/</id>
    <published>2019-02-22T09:42:12.000Z</published>
    <updated>2019-02-22T09:56:28.729Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5350947&auto=0&height=66"></iframe><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr><p>完整项目地址：<a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">https://github.com/shuiRong/Gakki</a> 🌟🌟🌟</p><p>系列文章：</p><ul><li><a href="">ReactNative实战之社交网络客户端（二：进阶篇）</a>（正在写）</li><li><a href="">ReactNative实战之社交网络客户端（三：优化篇）</a>（正在写）</li><li><a href="">ReactNative实战之社交网络客户端（四：踩坑篇）</a>（正在写）</li></ul><p>对了，<a href="https://linshuirong.cn/2019/02/17/Mastodon%EF%BC%9A%E5%B1%9E%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">这里</a>有一篇介绍Mastodon (长毛象)的文章，毕竟我是在为它开发客户端🤣</p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── App.js// 项目路由配置，因为我这个项目需要登陆，所以我就根据登陆/未登陆，定义了两个路由入口</span><br><span class="line">├── LICENSE// 证书</span><br><span class="line">├── README.md// 介绍文档</span><br><span class="line">├── android// 原生Android工程</span><br><span class="line">├── app.json // 用来配置原生App需要的基本信息</span><br><span class="line">├── index.js // 入口文件</span><br><span class="line">├── ios // 原生iOS工程</span><br><span class="line">├── node_modules // 依赖项目的源代码</span><br><span class="line">├── package.json // 定义项目所需要的各种依赖/模块，以及项目的配置信息</span><br><span class="line">├── preview // App预览图</span><br><span class="line">├── rn-cli.config.js // 顾名思义，是命令行工具：react-native的配置信息</span><br><span class="line">├── src // 项目源代码。你写的业务代码基本都在这里</span><br><span class="line">    ├── Main.js // 配置了“登陆”状态下各页面的路由信息</span><br><span class="line">    ├── SignedOutNavigator.js // 配置了“未登陆”状态下各页面的路由信息</span><br><span class="line">    ├── assets // 会被RN打包工具打包的静态资源</span><br><span class="line">    ├── pages // App的页面级文件</span><br><span class="line">    │   ├── About.js // 关于页面</span><br><span class="line">    │   ├── Auth.js // 授权认证页面（Mastodon客户端登录时不是常规的账号密码登录，而是输入账号密码然后弹出授权认证，想想微信的授权认证）</span><br><span class="line">    │   ├── BlockedUsers.js // 被屏蔽用户页面</span><br><span class="line">    │   ├── Envelope.js // 私信页面</span><br><span class="line">    │   ├── FollowRequestList.js // 关注请求页面</span><br><span class="line">    │   ├── Followers.js // 关注者页面</span><br><span class="line">    │   ├── Following.js // 关注页面</span><br><span class="line">    │   ├── Home.js // 首页</span><br><span class="line">    │   ├── Launcher.js // 启动页面，从存储系统中加载主题、用户Token等基础数据</span><br><span class="line">    │   ├── Login.js // 登陆页面，即输入账号密码的地方</span><br><span class="line">    │   ├── MutedUsers.js // 被隐藏用户页面</span><br><span class="line">    │   ├── Notifications.js // 消息通知页面</span><br><span class="line">    │   ├── OpenSource.js // 开源声明页面，列出了项目所有用到的开源软件及开源协议</span><br><span class="line">    │   ├── Profile.js // 个人详情页面</span><br><span class="line">    │   ├── Search.js // 搜索页面</span><br><span class="line">    │   ├── SendToot.js // 发送嘟文（类似于微博的博文）的页面</span><br><span class="line">    │   ├── SideBar.js // 主页侧栏组件</span><br><span class="line">    │   ├── Tag.js // 标签页面</span><br><span class="line">    │   ├── Test.js // 测试页面，开发项目时需要测试某模块时可以在这个页面单独测试</span><br><span class="line">    │   ├── TootDetail.js // 嘟文详情页面</span><br><span class="line">    │   ├── common // 项目中会多处使用的公共组件</span><br><span class="line">    │   │   ├── Context.js // 评论组件</span><br><span class="line">    │   │   ├── DefaultTabBar.js // Tab组件的顶部Bar组件</span><br><span class="line">    │   │   ├── Divider.js // 分割线组件</span><br><span class="line">    │   │   ├── Fab.js // Floating Action Button (FAB)组件，一般是漂浮在右下角的那个圆形按钮</span><br><span class="line">    │   │   ├── HTMLView.js // 把渲染HTML的部分提取出来，自成一个组件</span><br><span class="line">    │   │   ├── Header.js // 顶部的Header组件</span><br><span class="line">    │   │   ├── ListFooterComponent.js FlatList组件的尾部组件</span><br><span class="line">    │   │   ├── Loading.js // Loading加载效果组件</span><br><span class="line">    │   │   ├── MediaBox.js // 媒体文件（图片、视频）展示组件</span><br><span class="line">    │   │   ├── Notice.js // 提示框、确认框等组件</span><br><span class="line">    │   │   ├── ReplyInput.js // 封装的单行、多行输入框组件</span><br><span class="line">    │   │   ├── Spruce.js // 骨架屏组件，自定了几个常用骨架屏</span><br><span class="line">    │   │   ├── TootBox.js // 嘟文组件</span><br><span class="line">    │   │   ├── UserItem.js // 用户列组件</span><br><span class="line">    │   └── screen // Tab组件下的页面</span><br><span class="line">    │       ├── HomeScreen.js // 主页时间轴Tab下的组件</span><br><span class="line">    │       ├── LocalScreen.js // 本站时间轴Tab下的组件</span><br><span class="line">    │       ├── MediaScreen.js // 媒体文件Tab下的组件</span><br><span class="line">    │       ├── PublicScreen.js // 跨站公共时间轴Tab下的组件</span><br><span class="line">    │       └── TootScreen.js // （个人详情页面下）个人嘟文Tab下的组件</span><br><span class="line">    └── utils // 放置一些公共方法</span><br><span class="line">        ├── api.js // 定义用到的所有接口</span><br><span class="line">        ├── color.js // 统一管理项目颜色</span><br><span class="line">        ├── config.js // 配置信息，如开发时使用的Token</span><br><span class="line">        ├── locale.js // 国际化文件，目前只有中文的时间字符，未来会集成所有的国际化数据</span><br><span class="line">        ├── mobx.js // 项目全局状态管理中心</span><br><span class="line">        ├── request.js // 封装axios，增加全局请求、响应拦截器</span><br><span class="line">        └── store.js // 封装AsyncStorage：本地存储系统</span><br><span class="line">└── yarn.lock // yarn为了跨机器安装得到一致的结果而生成的文件</span><br></pre></td></tr></table></figure><h4 id="介绍下目录规划"><a href="#介绍下目录规划" class="headerlink" title="介绍下目录规划"></a>介绍下目录规划</h4><p>使用<code>react-native-cli</code>工具初始化完项目的时候，你就会发现，它生成的所谓源码文件只有<code>index.js</code>、<code>App.js</code>，而这基本不足以支持任何复杂点的项目。所以就需要自己来：先新建一个<code>src</code>文件夹，然后规划文件。</p><p>首先需要一个入口/路由文件（我这里根据“登陆”和“未登陆”两种状态，规划了两个入口文件：<code>Main.js</code>、<code>SignedOutNavigator.js</code>），然后还需要一个 <code>pages</code>文件夹放置所有的“页级”文件，一个<code>common</code>用来放置那些会被引用多次的组件，比如<code>Header</code>组件（基本每个页面都要用到<code>Heeader</code>组件）。然后我还建了一个<code>screen</code>组件用来放置每个Tab对应的文件，因为严格来说，一个Tab并不属于一个页面。首页的Tab是这样的：</p><p><img src="https://ww1.sinaimg.cn/large/007i4MEmgy1g0c4dnl4ntj30go0rmgnq.jpg" alt="首页Tab"></p><p>然后介绍下<code>utils</code>文件夹。</p><p><img src="http://wx1.sinaimg.cn/large/006fVPCvly1g0fcmzwveij30ce070jrn.jpg" alt="utils"></p><p><strong>统一管理很重要！</strong>所以我接口、本地存储、国际化、颜色搭配、状态管理都封装到了单独文件中，任何组件需要使用的时候都可以自行调用。</p><p>最开始开发的时候，其实我并没有把颜色这一块给封装成单个文件，这导致后面我要实现夜间模式时直接懵逼，颜色写死在项目中的各处，完全没法实现夜间模式！因此希望大家谨记我的教训，<strong>任何重复两次以上的代码都要考虑下是否可以声明成变量或者封装成组件！</strong></p><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><hr><p>我在项目开发初期并没有使用状态管理工具，因为当时项目复杂度还没有上来，使用<code>state</code>足矣。</p><blockquote><p>就像React社区中流传甚广的一句话：don’t use Redux until you have problems with vanilla React.</p><p>意思是：除非你遇到了只使用React解决不了的问题，不要使用Redux。</p><p>P.S. React Native将会在下一个稳定版本中支持<a href="https://react.docschina.org/docs/hooks-overview.html#-%E7%8A%B6%E6%80%81%E9%92%A9%E5%AD%90%EF%BC%88state-hook%EF%BC%89" target="_blank" rel="noopener">Hooks</a>：是一个用起来非常舒服的功能，建议了解一下。</p></blockquote><p>直到我遇到了“主题切换功能”，非引入一个状态管理功能不能解决，然后我就引入了<a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">Mobx</a>（上手快）</p><p>关于<code>Redux</code>和<code>Mobx</code>我们应该如何选择的问题，这里推荐一篇文章：<a href="https://www.robinwieruch.de/redux-mobx-confusion/" target="_blank" rel="noopener">Redux or MobX: An attempt to dissolve the Confusion</a>，<a href="https://segmentfault.com/a/1190000011148981" target="_blank" rel="noopener">中译文</a>。</p><p>作者观点比较中立，并没有偏向任何一方。（所以看完之后，你的选择也没必要非要和我一样）</p><h4 id="UI库的选择"><a href="#UI库的选择" class="headerlink" title="UI库的选择"></a>UI库的选择</h4><hr><p>首先你需要知道的是，<strong>你不能奢求某一款UI库能完全满足你的需求。</strong>实际也不会存在这么一款UI库。</p><p>因此项目开发时基本是这样：一个流行组件库 + N个“单UI”组件（根据需要自行Google） + 自行实现Style</p><p>常见的流行UI库我基本都看过，包括不限于：</p><ul><li><a href="https://github.com/react-native-training/react-native-elements" target="_blank" rel="noopener">react-native-elements</a></li><li><a href="https://github.com/GeekyAnts/NativeBase" target="_blank" rel="noopener">NativeBase</a></li><li><a href="https://github.com/xotahal/react-native-material-ui" target="_blank" rel="noopener">react-native-material-ui</a></li><li><a href="https://github.com/rilyu/teaset" target="_blank" rel="noopener">Teaset</a></li></ul><p>最后选择了Teaset，理由简单实在（笑）：它由“纯JS”实现，不含任何原生代码。（这意味着，如果遇到问题需要去看源码的话，我能看懂🤣）</p><h4 id="组件重用"><a href="#组件重用" class="headerlink" title="组件重用"></a>组件重用</h4><hr><p>路由我用的是[react navigation]</p><p>设想下这样的场景：在水溶的个人主页点击小明的头像。我们预期的是页面会跳转到小明的个人主页，但实际呢？实际是页面不会有任何变化（当然，如果你没有针对这种情况做处理的话。）</p><p><img src="https://github.com/shuiRong/Gakki/raw/master/preview/14.png" alt="个人详情页面"></p><p>这是因为当跳转前后的两个路由相同（也即组件复用）的话，默认不会重新渲染组件。那么<code>componentDidMount</code>钩子（一般我们在这个钩子里面请求接口数据）就不会触发，那么页面就不会有任何变化。</p><p>P.S. 如果你在开发ReactNative之前曾写过Vue/React/Angular项目的话，可能就会遇到过这样的问题。</p><p><strong>解决方法</strong>就是在<code>componentWillReceiveProps</code>钩子里重新请求接口数据，因为前后两个路由相同会触发此钩子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">this.init(this.props.navigation.getParam(&apos;data&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps(&#123; navigation &#125;) &#123;</span><br><span class="line">this.init(navigation.getParam(&apos;data&apos;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装请求"><a href="#封装请求" class="headerlink" title="封装请求"></a>封装请求</h4><hr><blockquote><p>用来请求接口数据的HTTP库，我是用的是<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>，因为之前在写Vue、React项目时就有在用，已经比较熟悉了。如果你是用了其他的库也无妨，思想都是想通的，可以借鉴。</p></blockquote><p>为了开发测试方便，有必要将axios封装一下，加上请求、响应拦截等逻辑。这样的话，未来增加特定Header或增加接口错误时提示信息也方便，在这里加就可以了。</p><p>代码贴出来了，简单，都能看懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import &#123; Toast &#125; from &apos;teaset&apos;</span><br><span class="line"></span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://cmx.im&apos;, // 统一Host</span><br><span class="line">  timeout: 10000 // 请求超时时间限制</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 请求拦截器</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    // 如果未来需要增加统一Header，加在这里</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    Promise.reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 响应拦截器</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    // 如果你需要对接口返回的数据特殊处理一下的话，写在这里  </span><br><span class="line">    return response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    console.log(&apos;拦截器err:&apos;, err)</span><br><span class="line">    if (err &amp;&amp; err.error) &#123;</span><br><span class="line">      // 服务器异常，统一展示出来</span><br><span class="line">      Toast.message(err.error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="大前端" scheme="/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactNative" scheme="/tags/ReactNative/"/>
    
      <category term="Mastodon" scheme="/tags/Mastodon/"/>
    
      <category term="App" scheme="/tags/App/"/>
    
      <category term="Android" scheme="/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安利Mastodon：属于未来的社交网络</title>
    <link href="/2019/02/17/Mastodon%EF%BC%9A%E5%B1%9E%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    <id>/2019/02/17/Mastodon：属于未来的社交网络/</id>
    <published>2019-02-17T15:53:06.000Z</published>
    <updated>2019-05-27T15:53:41.347Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5350947&auto=0&height=66"></iframe><p><img src="https://i.loli.net/2019/05/09/5cd4436c19f03.jpg" alt="Mastodon"></p><p><strong>我为Mastodon开发了一款安卓客户端，v1.0版本已经发布，欢迎<a href="https://github.com/shuiRong/Gakki/releases" target="_blank" rel="noopener">下载使用</a></strong></p><p><strong>源码在这里：<a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">https://github.com/shuiRong/Gakki</a></strong> 🌟🌟🌟</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><hr><p><strong><a href="https://github.com/tootsuite/mastodon" target="_blank" rel="noopener">Mastodon(长毛象)</a>是什么？</strong></p><p>是一个免费开源、去中心化、分布式的微博客社交网络，是<strong>微博、Twitter绝妙的替代品</strong>。它不仅仅是一个网站，更是一个联盟：成千上万运行长毛象的独立社区形成了一个连贯的网络，虽然每个社区都是其特点，但都是整体的一部分。</p><p><strong>说人话！</strong></p><p><strong>好，我重新说～</strong></p><p>首先你要知道，<strong>微博有的功能，Mastodon基本都有，但它却有着微博绝对无法企及的特点（也正是它迷人之处～）</strong></p><p>它的<strong>源代码是公开的</strong>，因此任何懂点技术的人都可以下载它的源码，部署在你自己的服务器上，称之为一个<strong>实例</strong>。这样其他人就可以在你的实例上注册，成为你的用户。</p><blockquote><p>更多实例你可以在<a href="https://joinmastodon.org/" target="_blank" rel="noopener">这里</a>找到，</p><p>这里我仅列出几个特别的：</p><p>mastodon.social 长毛象官方团队运营的实例（需翻墙）</p><p>cmx.im 长毛象中文实例，中文用户很多，目前5471个用户（我也在这儿～欢迎关注<a href="https://cmx.im/web/accounts/81232" target="_blank" rel="noopener">我</a>）（需翻墙）</p><p>pawoo.net 日本P站（pixiv）官方团队运营的实例，画师超级多～（需翻墙）</p><p>acg.mn 主打ACG内容的中文实例，目前2855个用户（无需翻墙）</p></blockquote><p><strong>开源意味着什么？</strong>意味深长！意味着大多数实例的站长都是个人或者小团体，而非追求利益的商业公司。这决定着用户不会被广告乱入、隐私窃取恶心到。看看微博吧，无处不在的烦人广告简直恶心死了。另外，还有一把<a href="http://www.baike.com/wiki/%E8%BE%BE%E6%91%A9%E5%85%8B%E9%87%8C%E6%96%AF%E4%B9%8B%E5%89%91" target="_blank" rel="noopener">达摩克利斯之剑</a>时刻悬浮在用户头上，这也不能说，那也不能提！（讽刺的是，他们还不告诉你都有哪些不能说！）Fuck！与其相反，Mastodon基本没什么审查。</p><blockquote><p>当然，每个实例都有他们自己的社区准则，这里贴出<a href="https://cmx.im/about/more" target="_blank" rel="noopener">长毛象中文站的</a></p></blockquote><p>Mastodon<strong>尊重用户、尊重用户的数据</strong>：如果你不喜欢这个实例的氛围，完全可以<strong>导出</strong>你的所有数据，然后<strong>导入</strong>到其他你喜欢的实例，又是一条好汉！</p><blockquote><p>尽管基本所有数据都支持导出，但导入功能<strong>目前</strong>还未完善：仅支持关注列表、屏蔽列表、隐藏列表，未来官方会支持。</p></blockquote><p><img src="https://i.loli.net/2019/05/09/5cd4436c0519a.jpg" alt="导出"></p><p>用户不仅可以看到当前实例其他人发出的“消息”（我们都称之为<strong>嘟文</strong>），也可以通过<strong>“跨站公共时间轴”</strong>，看到其他实例用户发出来的嘟文。<strong>是不是很奇妙？Mastodon世界就是通过无数个实例连接起来的～</strong></p><blockquote><p>那么，Mastodon世界到底有多少个实例、多少个用户呢？</p><p>在<a href="https://instances.social/list/old" target="_blank" rel="noopener">instances.social</a>网站查询的结果是：</p><p>至少有<strong>8484</strong>个实例，<strong>170w</strong>用户！</p></blockquote><p>P.S. 补一张<strong>首页图</strong></p><p><img src="https://i.imgur.com/8Dgn7jm.jpg" alt="首页"></p><p><strong>都看到这儿了，少年还不注册个玩玩？</strong>（对了，注册仅需要邮箱，手机号是不需要的哦～）<br>长毛象中文站：<a href="https://cmx.im/about" target="_blank" rel="noopener">https://cmx.im/about</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="Mastodon" scheme="/tags/Mastodon/"/>
    
      <category term="长毛象" scheme="/tags/%E9%95%BF%E6%AF%9B%E8%B1%A1/"/>
    
      <category term="Fediverse" scheme="/tags/Fediverse/"/>
    
      <category term="社交网络" scheme="/tags/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>海伯利安：梅伊娜·悦石和技术内核顾问的对决（一）</title>
    <link href="/2019/02/05/%E6%B5%B7%E4%BC%AF%E5%88%A9%E5%AE%89%EF%BC%9A%E6%82%A6%E7%9F%B3%E5%92%8C%E6%8A%80%E6%9C%AF%E5%86%85%E6%A0%B8%E9%A1%BE%E9%97%AE%E7%9A%84%E5%AF%B9%E5%86%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>/2019/02/05/海伯利安：悦石和技术内核顾问的对决（一）/</id>
    <published>2019-02-05T09:01:27.000Z</published>
    <updated>2019-05-10T10:51:33.655Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>悦石坐着思考了片刻，单拳托腮。然后对着墙壁说道：<strong>“请叫阿尔贝都顾问过来。”</strong></p><p>二十秒后，悦石宽桌对面的空气蒙上了迷雾，闪着微光，最后凝固住了。技术内核的代表看上去依然俊俏，短短的灰发在光线下闪烁，他那坦率、正直的脸庞呈现出健康的古铜色。</p><p><strong>“执行官大人”</strong>全息投影像开口道，<strong>“顾问理事会和内核预言者将继续为你们效劳，在这大难——”</strong></p><p><strong>“阿尔贝都，内核在哪里？”</strong>悦石打断道。</p><p>顾问的笑容毫不抖动。<strong>“对不起，执行官大人，你说什么？”</strong></p><p><strong>“技术内核。到底在哪里？”</strong></p><p>阿尔贝都那好好先生的脸庞露出一丝疑惑，但没有敌意，没有什么显著的情感反应，除了一副想要帮忙的茫然表情。<strong>“执行官大人，你肯定知道，自从内核隐退以来，我们的政策一直坚持不要暴露……啊……技术内核物理元件的所在地。换句话说，内核不在任何地方，自从——”</strong></p><p><strong>“自从你们生活在数据平面和数据网的交感现实中，”</strong>悦石说，声音单调，<strong>“对，我已经听够这些废话了，阿尔贝都。我父亲以及我父亲的父亲都听够这一切了。我现在直截了当问你，技术内核在哪里？”</strong></p><p>顾问呆呆地摇了摇头，满脸歉意，就像一名大人又被小孩问了一个问了一千遍的问题。爸爸，天为什么是蓝色的？</p><p><strong>“执行官大人，对这个问题，我完全无法以人类的三维坐标来回答。从某种意义上说，我们……内核……存在于环网内，也存在于环网外。我们在数据平面的现实中游动，你们称其为数据网，但是说到物理元件……你们祖先称之为‘硬件’的东西，我们觉得有必要——”</strong></p><p><strong>“有必要保密。”</strong>悦石替他说完了这句话。她交叉双臂，<strong>“阿尔贝都顾问，你有没有意识到，霸主中将会有好多人……数百万人……坚信内核……你们的顾问理事会……背叛了人类？”</strong></p><p>阿尔贝都双手打了个手势。<strong>“执行官大人，那实在是令人遗憾。遗憾，但可以理解。”</strong></p><p><strong>“顾问先生，你们的预言者应该差不多是十全十美的。但你们却从没有警告过我们，驱逐者舰队会对世界造成毁灭。”</strong></p><p>投影像英俊的脸庞上露出悲伤之情，表情极为令人信服。<strong>“执行官大人，我得提醒你，顾问理事会警告过你们，如果想将海伯利安引进环网，将会带来无规则的变数，甚至连理事会也无法归因。”</strong></p><p><strong>“但并不单单是海伯利安！”</strong>悦石叫道，她提高了嗓音，<strong>“神林被烧毁了。天国之门被熔成一堆渣。无限极海的脑袋正等着下一锤的攻击！如果顾问理事会不能预测如此规模的侵略，那还要你们有什么用？”</strong></p><p><strong>“我们的确预测到了和驱逐者发生战争的必然性，执行官大人。我们也预言了防卫海伯利安的重大危险。你必须相信我，把海伯利安加入到任何预言方程式，都将让安全性因素降低到——”</strong></p><p><strong>“好吧，”</strong>悦石叹了口气，<strong>“我想和内核的其他人谈谈，阿尔贝都。你们那难以辨认的智能阶级中拥有决策权力的人。”</strong></p><p><strong>“我向你保证，我代表了广大内核成员，在我——”</strong></p><p><strong>“对，对。但我想要和你们的……我想你们称其为神，我想和你们的一位神谈一谈。老辈人工智能中的一个。一个有影响力的神，阿尔贝都。我需要和他谈一谈，告诉我为什么内核绑架了我的艺术家赛文和我的助手利·亨特。”</strong></p><p>全息像看上去大吃一惊。<strong>“我向你保证，执行官大人，我们四世纪的联盟在上，内核跟这不幸的失踪事件完全无关——”</strong></p><p>悦石站起身。<strong>“这就是为什么我要和你们的神谈一谈的原因。阿尔贝都，现在作担保已毫无意义了。如果我们两个种族想要活下去，那就是时候来一次坦率的会谈了。我说完了。”</strong>她的注意力回到了桌子上的传真台文件上。</p><p>阿尔贝都顾问站起身，点头道别，闪了闪，消失了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;悦石坐着思考了片刻，单拳托腮。然后对着墙壁说道：&lt;strong&gt;“请叫阿尔贝都顾问过来。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二十秒后，悦石宽桌对面的空气蒙上了迷雾，闪着微光，最后凝固住了。技术内核的代表看上去依然俊俏，短短的灰发在光线下闪烁，他那坦
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="海伯利安" scheme="/tags/%E6%B5%B7%E4%BC%AF%E5%88%A9%E5%AE%89/"/>
    
      <category term="读书" scheme="/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>相声：一个休学实习生的被裁经历</title>
    <link href="/2019/01/30/%E7%9B%B8%E5%A3%B0%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BC%91%E5%AD%A6%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%9A%84%E8%A2%AB%E8%A3%81%E7%BB%8F%E5%8E%86/"/>
    <id>/2019/01/30/相声：一个休学实习生的被裁经历/</id>
    <published>2019-01-30T08:39:22.000Z</published>
    <updated>2019-05-10T10:51:33.655Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：</strong>林水溶</p><p><strong>博客：</strong><a href="https://linshuirong.cn/" target="_blank" rel="noopener">https://linshuirong.cn</a></p><blockquote><p><strong>为了大家都能看懂相声中我想表达的东西，先声明下：</strong></p><ol><li>今早咪蒙发表一篇文章：《一个出身寒门的状元之死》（槽点满满）</li><li>咪蒙曾发表过一篇文章：《我为什么支持实习生休学？》（槽点满满 plus）</li></ol></blockquote><p><strong>进入正文：</strong></p><hr><blockquote><p>实习生小A，来咪蒙老师公司三个月了。前段时间听从咪老师建议休了学，全职投入到了工作之中。</p><p>实习生小B，刚来公司一周。受到小A学长和咪老师的鼓舞，也过段时间休学的打算。</p></blockquote><p>实习生小A：小B啊，你在这儿好好干。我准备联系下学校，看还能不能继续回去上学…（悲伤脸）</p><p>实习生小B：你这咋回事儿啊？（震惊脸）</p><p>实习生小A：唉…这个事儿吧，还得从前两天说起。（悲伤脸）前两天咪蒙老师给我安排个活儿。</p><p>实习生小B：啥活啊？</p><p>实习生小A：她让我给篇文章拟个标题，说准备发一篇爆款文章，让我给拟个配得上它身份的标题。</p><p>实习生小B：那你就拟个呗，这有啥难的？小学三年级我们就开始写作文了，还怕它一个标题？</p><p>实习生小A：要有你说的这么简单就好了。</p><p>实习生小B：怎么了，难道还有要求？（疑问脸）</p><p>实习生小A：真有！咪老师提了三点要求。</p><p>实习生小B：哪三点？</p><p>实习生小A：<strong>第一点：标题一定要引发好奇</strong></p><p>实习生小B：这很有道理啊。（认真脸）</p><p>实习生小A：还给我举了个例子：<strong>《一夜之间，北京的井盖全消失了》</strong></p><p>实习生小B：咦，这是怎么回事？北京的井盖怎么会在一夜之间全消失呢？（好奇脸）</p><p>实习生小A：你看你看。只要是个人，看到这样的标题他都会好奇不是。</p><p>实习生小B：有道理。但北京的井盖怎么会在一夜之间全消失呢？你说河南人…（纠结脸）</p><p>实习生小A：打住打住，哪儿跟哪儿啊。井盖怎么消失的根本不重要好吗。重要的是这个标题能在第一时间抓住你的视线。</p><p>实习生小B：怎么可能不重要啊？北京的井盖儿都消失了还不算重要啊？这一天得造成多少次交通事故啊。（萌新脸）</p><p>实习生小A：你是真傻还是装傻啊？看不出来文章标题是故意夸大啊。你要是点开看，它肯定说只是北京某处的井盖消失了，哪儿能是全北京城啊。我早就跟你说了，不要刷抖音，刷抖音降智，你不听。你看看你现在成什么样子了…（不屑脸）</p><p>实习生小B：去你的吧。我还刷知乎，学习新姿势呢，你怎么不说？（不服脸）</p><p>实习生小A：知乎？“与世界分享你刚编的段子”，那个知乎啊。（不屑脸）</p><p>实习生小B：人家那是“与世界分享你身边的故事”。</p><p>实习生小A：扯远了扯远了。接着说<strong>第二点要求：标题一定要简单粗暴</strong></p><p>实习生小B：简单粗暴这个我会。不就是“说大白话”吗？是个人都会吧。</p><p>实习生小A：是说“大白话”，也不是说“大白话”。</p><p>实习生小B：那到底是不是“说大白话”啊？</p><p>实习生小A：我也不知道。</p><p>实习生小B：什么？你也不知道？那你还这么说！（生气脸）</p><p>实习生小A：不是。这句话是那天咪老师说的。然后我也问她了，我说“咪老师，那到底是‘是’还是‘不是’啊？“</p><p>实习生小B：咪老师怎么说？</p><p>实习生小A：咪老师什么都没说，就直勾勾地瞪着我，足足有三分钟！然后说“第三点要求…”</p><p>实习生小B：这…</p><p>实习生小A：唉，实习生真不好做。（轻声叹息：早知道不休学了…）（苦逼脸）</p><p>实习生小B：那第三个要求是啥？</p><p>实习生小A：哦，<strong>第三点要求是：标题一定要颠覆常识</strong></p><p>实习生小B：什么叫颠覆常识？</p><p>实习生小A：给你举个例子：<strong>《他这么真诚，一定是在骗你！》</strong></p><p>实习生小B：这是什么混蛋逻辑啊。真诚招你惹你了，就一定是骗子啊。（愤怒脸）</p><p>实习生小A：别着急骂先。你看看它算不算是“颠覆常识”。</p><p>实习生小B：… 还真算（尴尬脸）</p><p>实习生小A：这就对了。读者看到这样的标题，肯定会觉得气。</p><p>实习生小B：胡说八道，肯定气啊。</p><p>实习生小A：只要一生气，那可就着了道了。鲁迅曾说：“你对待情绪的方式，决定了你生活的层次”（认真脸）</p><p>实习生小B：鲁迅说过这话？（好奇脸）</p><p>实习生小A：说过啊，不信你去Google！（严肃脸）</p><p>实习生小B：Google上不去，算了，信你一回。（悻悻脸）</p><p>实习生小A：三点建议呢，就是这样。晚上下班到家后，我饭也顾不上吃，就想啊。最后绞尽脑汁地想了一宿，才想出来个我觉得完全符合咪老师要求的标题。然后第二天一大早就来到老师办公室，把标题交了上去。（疲惫脸）</p><p>实习生小B：然后呢？</p><p>实习生小A：然后？然后我被辞了。</p><p>实习生小B：被…被辞了？就因为这件破事儿？（震惊脸）</p><p>实习生小A：嗯。</p><p>实习生小B：那你交上去的是啥标题啊？</p><p>实习生小A：<strong>《一夜之间，寒门出身的状元周有择死了，一定是在骗你！》</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt;林水溶&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客：&lt;/strong&gt;&lt;a href=&quot;https://linshuirong.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://linshuirong.c
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="碎碎念" scheme="/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="相声" scheme="/tags/%E7%9B%B8%E5%A3%B0/"/>
    
      <category term="咪蒙" scheme="/tags/%E5%92%AA%E8%92%99/"/>
    
      <category term="吐槽" scheme="/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>「译」setState如何知道它该做什么？</title>
    <link href="/2019/01/09/%E3%80%8C%E8%AF%91%E3%80%8DsetState%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%AE%83%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>/2019/01/09/「译」setState如何知道它该做什么？/</id>
    <published>2019-01-09T08:37:23.000Z</published>
    <updated>2019-01-09T08:40:20.612Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=670000&auto=0&height=66"></iframe><blockquote><p>本文翻译自：<a href="https://overreacted.io/how-does-setstate-know-what-to-do/" target="_blank" rel="noopener">How Does setState Know What to Do?</a></p><p>原作者：<a href="https://mobile.twitter.com/dan_abramov" target="_blank" rel="noopener">Dan Abramov</a></p><p>如果有任何版权问题，请联系<a href="mailto:shuirong1997@icloud.com" target="_blank" rel="noopener">shuirong1997@icloud.com</a></p></blockquote><p>当你在组件中调用<code>setState</code>时，你觉得会发生什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">class Button extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123; clicked: false &#125;;</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.setState(&#123; clicked: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    if (this.state.clicked) &#123;</span><br><span class="line">      return &lt;h1&gt;Thanks&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">        Click me!</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Button /&gt;, document.getElementById(&apos;container&apos;));</span><br></pre></td></tr></table></figure><p>当然，React会用<code>{ clicked: true}</code> 这条状态重新渲染组件并且更新匹配到的DOM，然后返回<code>&lt;h1&gt;Thanks&lt;/h1&gt;</code>元素。</p><p>听起来似乎简洁明了。但别急，React（或者说React DOM）是怎么做的？</p><p>更新DOM听起来像是React DOM的事儿，但别忘了我们调用的可是<code>this.setState()</code>，它是React的东西，可不是React DOM的。另外，我们的基类<code>React.Component</code>是被定义在React内部。</p><p>所以问题来了：<code>React.Component</code>内部的<code>setState</code>怎么能去更新DOM呢？</p><p><strong>事先声明：就像我的<a href="https://overreacted.io/how-does-react-tell-a-class-from-a-function/" target="_blank" rel="noopener">其他博客</a>，你不需要熟练掌握React。这篇博客是为那些想要看看面纱之后是什么东西的人准备的。完全可选！</strong></p><hr><p>我们或许会认为<code>React.Component</code>类已经包含了DOM更新逻辑。</p><p>但如果这是事实，那<code>this.setState</code>是如何工作在其他环境中呢？比如：在React Native App中的组件也能继承<code>React.Component</code>，他们也能像上面一样调用<code>this.setState()</code>，并且React Native工作在Android和iOS的原生视图而不是DOM中。</p><p>你可能也对React Test Renderer 或 Shallow Renderer比较熟悉。这两个测试渲染器让你可以渲染一般的组件并且也能在他们中调用<code>this.setState</code>，但他们可都不使用DOM。</p><p>如果你之前使用过一些渲染器比如说<a href="https://github.com/facebook/react/tree/master/packages/react-art" target="_blank" rel="noopener">React ART</a>，你可能知道在页面中使用超过一个渲染器是没什么问题的。（比如：ART组件工作在React DOM  树的内部。）这会产生一个不可维持的全局标志或变量。</p><p><strong>所以<code>React.Component</code>以某种方式将state的更新委托为具体的平台（译者注：比如Android, iOS）</strong>，在我们理解这是如何发生之前，让我们对包是如何被分离和其原因挖得更深一点吧！</p><hr><p>这有一个常见的错误理解：React “引擎”在<code>react</code>包的内部。这不是事实。</p><p>事实上，从 <a href="https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages" target="_blank" rel="noopener">React 0.14</a>开始对包进行分割时，<code>React</code>包就有意地仅导出关于如何定义组件的API了。React的大部分实现其实在“渲染器”中。</p><p>渲染器的其中一些例子包括：<code>react-dom</code>,<code>react-dom/server</code>,<code>react-native</code>,<code>react-test-renderer</code>,<code>react-art</code>（另外，你也可以<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples" target="_blank" rel="noopener">构建自己的</a>）。</p><p>这就是为什么<code>react</code>包帮助很大而不管作用在什么平台上。所有它导出的模块，比如<code>React.Component</code>，<code>React.createElement</code>，<code>React.Children</code>和<code>[Hooks](https://reactjs.org/docs/hooks-intro.html)</code>，都是平台无关的。无论你的代码运行在React DOM、React DOM Server、还是React Native，你的组件都可以以一种相同的方式导入并且使用它们。</p><p>与之相对的是，渲染器会暴露出平台相关的接口，比如<code>ReactDOM.render()</code>，它会让你可以把React挂载在DOM节点中。每个渲染器都提供像这样的接口，但理想情况是：大多数组件都不需要从渲染器中导入任何东西。这能使它们更精简。</p><p><strong>大多数人都认为React“引擎”是位于每个独立的渲染器中的</strong>。许多渲染器都包含一份相同的代码—我们叫它<a href="https://github.com/facebook/react/tree/master/packages/react-reconciler" target="_blank" rel="noopener">“调节器”</a>，为了表现的更好，遵循<a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler" target="_blank" rel="noopener">这个步骤</a> 可以让调节器的代码和渲染器的代码在打包时归到一处。（拷贝代码通常不是优化“打包后文件”（bundle）体积的好办法，但大多数React的使用者一次只需要一个渲染器，比如：<code>react-dom</code>（译者注：因此可以忽略调节器的存在））</p><p>The takeaway here 是<code>react</code>包仅仅让你知道如何使用React的特性而无需了解他们是如何被实现的。渲染器（<code>react-dom,react-native</code>等等）会提供React特性的实现和平台相关的逻辑；一些关于调节器的代码被分享出来了，但那只是单独渲染器的实现细节而已。</p><hr><p>现在我们知道了为什么<code>react</code>和<code>react-dom</code>包需要为新特定更新代码了。比如：当React16.3新增了Context接口时，<code>React.createContext()</code>方法会在React包中被暴露出来。</p><p>但是<code>React.createContext()</code>实际上不会实现具体的逻辑（译者注：只定义接口，由其他渲染器来实现逻辑）。并且，在React DOM和React DOM Server上实现的逻辑也会有区别。所以<code>createContext()</code>会返回一些纯粹的对象（定义如何实现）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 一个简单例子</span><br><span class="line">function createContext(defaultValue) &#123;</span><br><span class="line">  let context = &#123;</span><br><span class="line">    _currentValue: defaultValue,</span><br><span class="line">    Provider: null,</span><br><span class="line">    Consumer: null</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Provider = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.provider&apos;),</span><br><span class="line">    _context: context</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Consumer = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.context&apos;),</span><br><span class="line">    _context: context,</span><br><span class="line">  &#125;;</span><br><span class="line">  return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会在某处代码中使用<code>&lt;MyContext.Provider&gt;</code>或<code>&lt;MyContext.Consumer</code>&gt;，那里就是决定着如何处理他们的渲染器。React DOM会用A方法追踪context值，但React DOM Server或许会用另一个不同的方法实现。</p><p><strong>所以如果你将<code>react</code>升级到16.3+，但没有升级react-dom，你将使用一个还不知道<code>Provider</code>和<code>Consumer</code>类型的渲染器</strong>，这也就旧版的<code>react-dom</code>可能会<a href="https://stackoverflow.com/a/49677020/458193" target="_blank" rel="noopener">报错：fail saying these types are invalid</a>的原因。</p><p>同样的警告也会出现在React Native中，但是不同于React DOM，一个新的React版本不会立即产生一个对应的React Native版本。他们（React Native）有自己的发布时间表。大概几周后，渲染器代码才会<a href="https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss" target="_blank" rel="noopener">单独更新</a>到React Native库中。这就是为什么新特性在React Native生效的时间会和React DOM不同。</p><hr><p>Okay，那么现在我们知道了<code>react</code>包不包含任何好玩的东西，并且具体的实现都在像<code>react-dom</code>，<code>react-native</code>这样的渲染器中。但这并不能回答我们开头提出的问题。<code>React.Component</code>里的<code>setState()</code>是如何和对应的渲染器通信的呢？</p><p><strong>答案是每个渲染器都会在创建的类中添加一个特殊的东西</strong>，这个东西叫<code>updater</code>。它不是你添加的东西—恰恰相反，它是React DOM，React DOM Server 或者React Native在创建了一个类的实例后添加的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// React DOM 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMUpdater;</span><br><span class="line">// React DOM Server 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMServerUpdater;</span><br><span class="line">// React Native 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactNativeUpdater;</span><br></pre></td></tr></table></figure><p>从 <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67" target="_blank" rel="noopener"><code>setState</code>的实现</a>就可以看出，它做的所有的工作就是把任务委托给在这个组件实例中创建的渲染器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 简单例子</span><br><span class="line">setState(partialState, callback) &#123;</span><br><span class="line">  // 使用`updater`去和渲染器通信</span><br><span class="line">  this.updater.enqueueSetState(this, partialState, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React DOM Server <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448" target="_blank" rel="noopener">可能想</a>忽略状态更新并且警告你，然而React DOM和React Native将会让调节器的拷贝部分去 <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207" target="_blank" rel="noopener">处理它</a>。</p><p>这就是尽管<code>this.setState()</code>被定义在React包中也可以更新DOM的原因。它调用被React DOM添加的<code>this.updater</code>并且让React DOM来处理更新。</p><hr><p>现在我们都比较了解“类”了，但“钩子”（Hooks）呢？</p><p>当人们第一次看到 <a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">钩子接口的提案</a>时，他们常回想：<code>useState</code>是怎么知道该做什么呢？这一假设简直比对<code>this.setState()</code>的疑问还要迷人。</p><p>但就像我们如今看到的那样，<code>setState()</code>的实现一直以来都是模糊不清的。它除了传递调用给当前的渲染器外什么都不做。所以，<code>useState</code>钩子做的事也是如此。</p><p>这次不是<code>updater</code>，钩子（Hooks）使用一个叫做“分配器”（dispatcher）的对象，当你调用<code>React.useState()</code>、<code>React.useEffect()</code>或者其他自带的钩子时，这些调用会被推送给当前的分配器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// In React (simplified a bit)</span><br><span class="line">const React = &#123;</span><br><span class="line">  // Real property is hidden a bit deeper, see if you can find it!</span><br><span class="line">  __currentDispatcher: null,</span><br><span class="line"></span><br><span class="line">  useState(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useState(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  useEffect(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useEffect(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>单独的渲染器会在渲染你的组件之前设置分配器（dispatcher）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// In React DOM</span><br><span class="line">const prevDispatcher = React.__currentDispatcher;</span><br><span class="line">React.__currentDispatcher = ReactDOMDispatcher;let result;</span><br><span class="line">try &#123;</span><br><span class="line">  result = YourComponent(props);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  // Restore it back  React.__currentDispatcher = prevDispatcher;&#125;</span><br></pre></td></tr></table></figure><p>React DOM Server的实现在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354" target="_blank" rel="noopener">这里</a>。由React DOM和React Native共享的调节器实现在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js" target="_blank" rel="noopener">这里</a>。</p><p>这就是为什么像<code>react-dom</code>这样的渲染器需要访问和你调用的钩子所使用的<code>react</code>一样的包。否则你的组件将找不到分配器！如果你有<a href="https://github.com/facebook/react/issues/13991" target="_blank" rel="noopener">多个React的拷贝在相同的组件树中</a>，代码可能不会正常工作。然而，这总是造成复杂的Bug，因此钩子会在它耗光你的精力前强制你去解决包的副本问题。</p><p>如果你不觉得这有什么，你可以在工具使用它们前精巧地覆盖掉原先的分配器（<code>__currentDispatcher</code>的名字其实我自己编的但你可以在React仓库中找到它真正的名字）。比如：React DevTools会使用一个<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214" target="_blank" rel="noopener">特殊的内建分配器</a>来通过捕获JavaScript调用栈来反映（introspect）钩子。不要在家里重复这个（Don’t repeat this at home.）（译者注：可能是“不要在家里模仿某项实验”的衍生体。可能是个笑话，但我get到）</p><p>这也意味着钩子不是React固有的东西。如果在将来有很多类库想要重用相同的基础钩子，理论上来说分配器可能会被移到分离的包中并且被塑造成优秀的接口—会有更少让人望而生畏的名称—暴露出来。在实际中，我们更偏向去避免过于仓促地将某物抽象，直到我们的确需要这么做。</p><p><code>updater</code>和<code>__currentDispatcher</code>都是泛型程序设计（<em>依赖注入</em>/<em>dependency injection</em>）的绝佳实例。渲染器“注入”特性的实现。就像<code>setState</code>可以让你的组件看起来简单明了。</p><p>当你使用React时，你不需要考虑它是如何工作的。我们期望React用户去花费更多的时间去考虑它们的应用代码而不是一些抽象的概念比如：依赖注入。但如果你曾好奇<code>this.setState()</code>或<code>useState()</code>是怎么知道它们该做什么的，那我希望这篇文章将帮助到你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="大前端" scheme="/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="大前端" scheme="/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="翻译" scheme="/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="React" scheme="/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative: 使用Animted API实现向上滚动时隐藏Header组件</title>
    <link href="/2018/12/25/ReactNative-%E4%BD%BF%E7%94%A8Animted-API%E5%AE%9E%E7%8E%B0%E5%90%91%E4%B8%8A%E6%BB%9A%E5%8A%A8%E6%97%B6%E9%9A%90%E8%97%8FHeader%E7%BB%84%E4%BB%B6/"/>
    <id>/2018/12/25/ReactNative-使用Animted-API实现向上滚动时隐藏Header组件/</id>
    <published>2018-12-25T07:13:43.000Z</published>
    <updated>2019-01-07T14:32:15.007Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22773678&auto=0&height=66"></iframe><blockquote><p>想先推荐一下近期在写的一个React Native项目，名字叫 <a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">Gakki</a> ：是一个<a href="https://cmx.im" target="_blank" rel="noopener">Mastodon</a>的第三方客户端 （Android App）</p></blockquote><p><strong>预览</strong></p><p><img src="https://i.loli.net/2019/01/07/5c3362bb6401b.gif" alt="rn.gif"></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="#写在前面"></a>#写在前面</h3><hr><p>本来我也不想造这个轮子的，奈何没找到合适的组件。只能自己上了～</p><p><strong>思路很清楚：</strong> 监听滚动事件，动态修改Header组件和Content组件的top值（当然，他们默认都是position:relative）。</p><p>接下来实现的时候遇到了问题，我第一个版本是通过动态设置state来实现，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 每次滚动时，重新设置headerTop的值</span><br><span class="line"> */</span><br><span class="line">onScroll = event =&gt;&#123;</span><br><span class="line">    const y = event.nativeEvent.contentOffset.y</span><br><span class="line">    if (y &gt;= 270) return</span><br><span class="line">    // headerTop即是Header和Content的top样式对应的值</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        headerTop: y</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样虽然能实现，但是效果不好：明显可以看到在上滑的过程中，Header组件一卡一卡地向上方移动（一点都不流畅）。</p><p>因为就只能另寻他法了：<strong>动画</strong></p><blockquote><p>React Native 提供了两个互补的动画系统：用于创建精细的交互控制的动画<a href="https://reactnative.cn/docs/animations#animated-api" target="_blank" rel="noopener"><code>Animated</code></a>和用于全局的布局动画<a href="https://reactnative.cn/docs/animations#layoutanimation-api" target="_blank" rel="noopener"><code>LayoutAnimation</code></a> （笔者注：这次没有用到它）</p></blockquote><h3 id="Animated-相关API介绍"><a href="#Animated-相关API介绍" class="headerlink" title="#Animated 相关API介绍"></a>#Animated 相关API介绍</h3><hr><p>首先，这儿有一个简单“逐渐显示”动画的<a href="https://reactnative.cn/docs/animations/#docsNav" target="_blank" rel="noopener">DEMO</a>，需要你先看完（文档很简单明了且注释清楚，没必要Copy过来）。</p><p>在看懂了DEMO的基础上，我们还需要了解两个<strong>关键</strong>的API才能实现完整的效果：</p><p><strong>1. interpolate</strong></p><p>插值函数。用来对不同类型的数值做映射处理。</p><blockquote><p>当然，这是文档说明：</p><p>Each property can be run through an interpolation first. An interpolation maps input ranges to output ranges, typically using a linear interpolation but also supports easing functions. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value.</p><p>翻译：</p><p>每个属性可以先经过插值处理。插值对输入范围和输出范围之间做一个映射，通常使用线性插值，但也支持缓和函数。默认情况下，<strong>如果给定数据超出范围，他也可以自行推断出对于的曲线</strong>，但您也可以让它箝位输出值（P.S. 最后一句可能翻译错误，因为没搞懂clamp value指的是什么, sigh…）</p></blockquote><p><strong>举个例子：</strong></p><p>在实现一个图片旋转动画时，输入值只能是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">  rotate: new Animated.Value(0) // 初始化用到的动画变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 这么映射是因为style样式需要的是0deg这样的值，你给它0这样的值，它可不能正常工作。因此必定需要一个映射处理。</span><br><span class="line">this.state.rotate.interpolate(&#123; // 将0映射成0deg，1映射成360deg。当然中间的数据也是如此映射。</span><br><span class="line">  inputRange: [0, 1],</span><br><span class="line">  outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. Animated.event</strong></p><p>一般动画的输入值都是默认设定好的，比如前面DEMO中的逐渐显示动画中的透明度：开始是0，最后是1。这是已经写死了的。</p><p>但如果有些动画效果需要的不是写死的值，而是动态输入的呢，比如：手势（上滑、下滑，左滑，右滑…）、其它事件。</p><p>那就用到了<code>Animated.event</code>。</p><p>直接看一个<strong>将滚动事件的y值(滚动条距离顶部高度)和我们的动画变量绑定起来</strong>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这段代码表示：在滚动事件触发时，将event.nativeEvent.contentOffset.y 的值动态绑定到this.state.headerTop上</span><br><span class="line">// 和最前面我通过this.setState动态设置的目的一样，但交给Animated.event做就不会造成视觉上的卡顿了。</span><br><span class="line">onScroll=&#123;Animated.event([</span><br><span class="line">   &#123;</span><br><span class="line">      nativeEvent: &#123;</span><br><span class="line">        contentOffset: &#123; y: this.state.headerTop &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">])&#125;</span><br></pre></td></tr></table></figure><p>关于API更多的说明请移步<a href="https://reactnative.cn/docs/animated.html#%E5%A4%84%E7%90%86%E6%89%8B%E5%8A%BF%E5%92%8C%E5%85%B6%E4%BB%96%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">文档</a></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="#完整代码"></a>#完整代码</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; StyleSheet, Text, View, Animated, FlatList &#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">class List extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 模拟列表数据</span><br><span class="line">    const mockData = [</span><br><span class="line">      &apos;富强&apos;,</span><br><span class="line">      &apos;民主&apos;,</span><br><span class="line">      &apos;文明&apos;,</span><br><span class="line">      &apos;和谐&apos;,</span><br><span class="line">      &apos;自由&apos;,</span><br><span class="line">      &apos;平等&apos;,</span><br><span class="line">      &apos;公正&apos;,</span><br><span class="line">      &apos;法治&apos;,</span><br><span class="line">      &apos;爱国&apos;,</span><br><span class="line">      &apos;敬业&apos;,</span><br><span class="line">      &apos;诚信&apos;,</span><br><span class="line">      &apos;友善&apos;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">        onScroll=&#123;this.props.onScroll&#125;</span><br><span class="line">        data=&#123;mockData&#125;</span><br><span class="line">        renderItem=&#123;(&#123; item &#125;) =&gt; (</span><br><span class="line">          &lt;View style=&#123;styles.list&#125;&gt;</span><br><span class="line">            &lt;Text&gt;&#123;item&#125;&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class AnimatedScrollDemo extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      headerTop: new Animated.Value(0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    // P.S. 270,217,280区间的映射是告诉interpolate，所有大于270的值都映射成-50</span><br><span class="line">    // 这样就不会导致Header在上滑的过程中一直向上滑动了</span><br><span class="line">    this.top = this.state.headerTop.interpolate(&#123;</span><br><span class="line">      inputRange: [0, 270, 271, 280],</span><br><span class="line">      outputRange: [0, -50, -50, -50]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.animatedEvent = Animated.event([</span><br><span class="line">      &#123;</span><br><span class="line">        nativeEvent: &#123;</span><br><span class="line">          contentOffset: &#123; y: this.state.headerTop &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Animated.View style=&#123;&#123; top: this.top &#125;&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.header&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.text&#125;&gt;linshuirong.cn&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/Animated.View&gt;</span><br><span class="line">        &#123;/* 在oHeader组件上移的同时，列表容器也需要同时向上移动，需要注意。 */&#125;</span><br><span class="line">        &lt;Animated.View style=&#123;&#123; top: this.top &#125;&#125;&gt;</span><br><span class="line">          &lt;List onScroll=&#123;this.animatedEvent&#125; /&gt;</span><br><span class="line">        &lt;/Animated.View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  list: &#123;</span><br><span class="line">    height: 80,</span><br><span class="line">    backgroundColor: &apos;pink&apos;,</span><br><span class="line">    marginBottom: 1,</span><br><span class="line">    alignItems: &apos;center&apos;,</span><br><span class="line">    justifyContent: &apos;center&apos;,</span><br><span class="line">    color: &apos;white&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">    height: 50,</span><br><span class="line">    backgroundColor: &apos;#3F51B5&apos;,</span><br><span class="line">    alignItems: &apos;center&apos;,</span><br><span class="line">    justifyContent: &apos;center&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  text: &#123;</span><br><span class="line">    color: &apos;white&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="大前端" scheme="/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactNative" scheme="/tags/ReactNative/"/>
    
      <category term="AnimtedAPI" scheme="/tags/AnimtedAPI/"/>
    
      <category term="动画" scheme="/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>写在读完《时光之轮》之后</title>
    <link href="/2018/08/07/%E5%86%99%E5%9C%A8%E8%AF%BB%E5%AE%8C%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E4%B9%8B%E5%90%8E/"/>
    <id>/2018/08/07/写在读完《时光之轮》之后/</id>
    <published>2018-08-07T10:16:11.000Z</published>
    <updated>2018-10-07T11:17:52.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看了一年的《时光之轮》，还是到了结束的时候～</p></blockquote><p>看着我们的几位主角（兰德，麦特，佩林，奈妮薇，艾雯…），走出伊蒙村，在世界各地历练，经历磨难，一步步成长，经历着必将会被吟游诗人传唱的人生～</p><p><strong>忽然觉得，现实生活是如此苍白、无意义～</strong></p><h4 id="艾塞达依与三誓"><a href="#艾塞达依与三誓" class="headerlink" title="艾塞达依与三誓"></a>艾塞达依与三誓</h4><hr><blockquote><p>艾塞达依（Aes Sedai）：李镭的版本翻译成了两仪师，但我更喜欢这个音译版。</p></blockquote><p>艾塞达依是兰德大陆上最有力量的一群女人，因为她们能<strong>引导至上力</strong>！</p><p>在至上力战争后的千年里，几乎没有任何势力能与他们匹敌。（艾伊尔人不问“世”事，霄辰人还远在大洋另一边）</p><p>正常来讲，<strong>“绝对的权力应该会导致绝对的堕落”</strong>，各国人众应该奋起反抗<strong>“强权”</strong>来着。但事实却不是这样：各国都愿意遵从艾塞达依的指引，艾塞达依也在积极扮演着“世界守护者”的角色。</p><p><strong>为什么会这样？</strong></p><p><strong>因为三誓！</strong></p><p>每一个能引导至上力的女人在从见习生晋升为正式的艾塞达依时，都会握着誓言之杖（一件传奇纪元流传下来的法器）立下这三个誓言：</p><ul><li><strong>在光明之下，我发誓绝不说虚妄之言。</strong></li><li><strong>在光明之下，我发誓不为男人制造武器，让他去伤害别人。</strong></li><li><strong>在光明之下，除了对抗暗之友和暗影生物，或者是在危急关头保护自己、护法和其他艾塞达依的生命之外，不将至上力当作武器使用。</strong></li></ul><p>三誓就是艾塞达依之所以是艾塞达依，人们会敬畏、而不是恐惧白塔的原因，就如前艾梅林玉座史汪·桑晨所说：</p><blockquote><p>“是三誓让我们不再只是一群操纵这个世界的女人，或者是七群，或者十五群。誓言将我们聚为一体，让我们有了共同的信仰，彼此相连。是三誓让我们成为艾塞达依，而不是至上力。任何野人都能导引。人们也许会用不同的眼光看待我们所说的话，但当一个姊妹说‘是这样’，他们便会知道那的确就是这样。他们会相信，是因为三誓。因为三誓，没有任何女王害怕姊妹们会让她们的城市血流成河；最坏的恶棍也会知道，他在一位姊妹身边是安全的，除非他想要伤害那位姊妹。是的，白袍众说三誓是谎言，一些人对于三誓有着奇怪的看法，但世界上很少有什么地方艾塞达依不能去，很少有人会不听艾塞达依的话，这全都因为三誓。<strong>三誓是艾塞达依之所以成为艾塞达依的原因；是艾塞达依的核心。如果将三誓扔进垃圾堆，我们就会成为被洪流冲走的沙子。</strong>”</p></blockquote><p><strong>另外，</strong> 因为她们不能说谎，所以艾塞达依发展出一套<strong>用真话表达另一种含意的艺术</strong>。（即，她们都是文字游戏的高手～）</p><blockquote><p>“她们不能说谎，但她们可以把事实说得扑朔迷离”</p><p>“她们不能说谎，但她们说的事实往往不是你所想的那个”</p></blockquote><p>这门艺术很有趣，也很实用:p，我要学一下～</p><blockquote><p><strong>记录一些这样的例子：</strong></p><p>A：B，推荐一些Node.js的书吧</p><p>B：没看过什么靠谱的书</p><p>笔者：存在两种理解。1. B看过<strong>很多</strong>相关的书，觉得大都不靠谱。2. B只看过<strong>很少</strong>的相关书籍，而且都觉得不靠谱。但普通人都会<strong>“下意识”</strong>地认为情况属于第一种。那么就可以利用这种<strong>“下意识”</strong></p><p>A：（看完了围城）觉得钱钟书的文字真是幽默哈</p><p>B：围城啊，之前我也<strong>看过</strong></p><p>….</p><p>A：你是全看完了吗？</p><p>B：不，只看了前言</p><p>笔者： B并没有撒谎，他的确<strong>看过</strong>围城。但对于<strong>“看过某书”</strong>，常人会<strong>下意识</strong>地认为他<strong>”看完过“</strong>某书…</p></blockquote><h4 id="圣光之子与黑暗"><a href="#圣光之子与黑暗" class="headerlink" title="圣光之子与黑暗"></a>圣光之子与黑暗</h4><hr><p>圣光之子是一个类似于宗教的组织，目的是搜寻黑暗之友，消除邪恶与堕落。</p><p>他们自称<strong>“行走在光明之中”，但行的却是“黑暗”之事</strong>：往往未经任何审判就指控别人是黑暗之友。所谓的“光明与正义”成了他们为一己私利而行恶事的遮羞布，尽管有些光之子可能根本没有意识到这点。</p><p>前几天曝光的<strong><a href="http://xqdoc.imedao.com/164f59c8b1799c43fe3a7953.pdf" target="_blank" rel="noopener">龙泉寺95页PDF事件</a></strong>是一个活生生的例子：住持释学诚<strong>“借佛之名行淫秽（私欲）之事”</strong>。</p><p><strong>因此，越是“伟光正”我们越是要警惕。毕竟，不能对人性有什么期待。</strong></p><p><del>（处于水深火热的各国人民等着我们去拯救？）</del></p><h4 id="艾伊尔与荣誉（节义）"><a href="#艾伊尔与荣誉（节义）" class="headerlink" title="艾伊尔与荣誉（节义）"></a>艾伊尔与荣誉（节义）</h4><hr><p>艾伊尔是小说中最为奇特的一个民族。</p><p>艾伊尔人一直生活在三绝之地（戈壁），极少与外界交流，这是（奇特的）艾伊尔文化形成的前提。</p><p>他们的文化：</p><blockquote><p>女性（枪姬众）和男性并肩作战；</p><p>女性要结婚就必须放下枪矛；</p><p>枪姬众如果怀孕且不打算放下枪矛，那么孩子将会由智者交给他人抚养，且枪姬众不会知道哪个是自己的孩子；</p><p>对裸露没什么禁忌；</p><p>只有男性可以成为氏族酋长；只有女性可以成为智者；</p><p>只有女性可以拥有财产。部落的财产拥有者称之为<strong>“顶主妇”</strong>，顶主妇对栖息地有绝对的权威。只有经过顶主妇的允许，酋长才可以进入栖息地；</p><p>在婚姻中，女性有绝对的主动权。只有女性才可以要求结婚等。</p><p>一夫多妻制；多个妻子互称为<strong>“首姐妹”</strong>。</p><p>…</p></blockquote><p>艾伊尔人对<strong>“荣誉（他们称之为节义）”</strong>的坚持，更让人尊敬。他们的生活准则就是“节义”，节义约束着他们的方方面面：</p><ul><li>战斗可以获得义，但在可以杀死对方却选择不伤害他时能获取更大的义；</li><li>俘虏会成为<strong>“奉义徒”</strong>，侍奉俘虏他的人一年零一天（侍奉用来赎回在战斗中失去的义），然后就能回到原先的部族；奉义徒不参与战争，即使是末日战争！</li><li>艾伊尔没有间谍行为，因为这会亏损巨大的义；</li><li>…</li></ul><p>总而言之，艾伊尔是一个<strong>“令人着迷”</strong>的民族～</p><h4 id="艾梅林玉座：艾雯·艾威尔"><a href="#艾梅林玉座：艾雯·艾威尔" class="headerlink" title="艾梅林玉座：艾雯·艾威尔"></a>艾梅林玉座：艾雯·艾威尔</h4><hr><blockquote><p>艾雯是我最偏爱的一个女性角色，甚至超过了沐瑞～</p></blockquote><p><strong>艾雯被囚禁在白塔时的表现，在我看来最能表现她是玉座的不二人选！</strong></p><p>她像艾伊尔人一样拥抱痛苦，逐渐赢得了所有人的尊敬。在她最初被囚禁的日子里，甚至初阶生都不相信她的确是玉座。</p><blockquote><p>她们（初阶生）完全没想到，她虽然同样身穿白抱，也和她们睡在一个地方，却还是会宣称自己是玉座</p></blockquote><p>甚至其中最捣蛋的一位，奥薇丝特，<strong>居然敢偷偷地用脚绊艾雯！</strong></p><blockquote><p>在前往厨房门口的半路上，一名个子矮小、留着黑色长发的初阶生突然伸出一只脚，绊了她 一下。 艾雯勉强维持住平衡，但还是差点把额头撞在地面上。她冷冷地转过头。又一场遭遇战。</p></blockquote><p>另一位是值得写出来的是<strong>见习生妮可拉</strong>，在沙力达阵营时公开反抗艾雯的权威，后来因为想更快的学习引导至上力而叛逃到白塔阵营。但也因为艾雯被囚禁时的表现而转变态度，成为艾雯忠实的追随者（另一位是上面的捣蛋鬼奥薇丝特，有趣～）。后来在黑结攻击白塔时牺牲了～</p><p>在白塔阵营里，初阶生是最早一批承认艾雯权威的人。非常有趣～</p><blockquote><p>她听到妮可拉正在和两名不过十五、六岁的初阶生说 话。艾雯几乎不记得自己这么小的时候是什么样子了，那彷彿都已经是另外一个人 生。这两个女孩分别是矮胖的莫兰迪人麦拉爱，她有着一双调皮的蓝眼睛；还有高瘦的阿拉多曼人娜梅恩，她总是在 「咯咯」地笑着。 <strong>「去问问吾母。」妮可拉说。已经有几个初阶生在这样称呼艾雯了。</strong>当然，她们绝不会在有外人在场的时候这样说。她们都是傻女孩，不过总算还不是愚不可及。 <strong>「她会给妳们建议的。」</strong> 娜梅恩紧张地笑着，绞动着手指（P.S.：非常有画面感的描述！）， <strong>「我不想打扰她。」</strong></p></blockquote><p>艾雯有太多精彩的表现了，比如：<a href="https://linshuirong.cn/2018/07/16/%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E7%B2%BE%E5%BD%A9%E7%89%87%E6%AE%B5/" target="_blank" rel="noopener">艾雯与爱莉达的对决（精彩辩论）</a></p><p>（省略五千字艾雯是如何一步步赢得其他艾塞达依尊敬的…） </p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><hr><p><strong>作者对男人、女人的态度一度让我很震惊（也觉得很好玩）～</strong></p><blockquote><p>如果女人不想听到某些话，她就会彻底充耳不闻，直到你也开始怀疑自己是否说过这些话</p><p>那个女人为了决定要从哪一边下床，会一直在床上躺到中午！</p><p>「你确定你没告诉他任何事？」奈妮薇问。在房间对面，泽凌的手在石雕棋盘上停了一下。他用愤怒又无辜的眼神看着奈妮薇。「我还要说多少次？」<strong>愤怒无辜的表情是男人最擅长的手段之一，特别是当它们像溜进鸡舍的狐狸般犯下罪行时。</strong></p><p>这三个家伙之遥聚在一起就会立刻交换各种流言蜚语。<strong>男人都是这样。</strong></p><p>汤姆这句话是什么意思？每个人都知道，<strong>男人永远比同龄的女人小十岁。</strong></p><p>当然，这个男人是不会接受教训的。<strong>男人总是会去玩火，以为这一次不会烧起来。</strong></p><p>女人能够喋喋不休的指责一个人的每一点错误，直到那个人觉得自己陷进万劫不复的深渊。</p><p>在两河有一句谚语，不过怎么理解它就因人而异了：<strong>「永远都是男人的错」</strong>。现在佩林已经知道女人最擅长的一件事，就是让男人叹气。</p><p>麦特的结论是：女人都有暴力倾向，而不仅仅是她们之中的少数人。</p><p>那些女人真会惹麻烦。当然，<strong>这是女人最擅长的事情。</strong></p><p>一个女人如果敢饿死一个男人，她就敢做任何事。</p><p>如果让男人说太久，她们就会占上风。</p><p>她们也许会将这一点秘密和另一个女人分享，但绝不会告诉男人。<strong>这是他对女人唯一能确定的一件事。</strong></p><p><strong>男人在许多方面都是奇怪的生物。</strong>一分钟之前，他们会接受正确的建议，只过了一分钟，他们又会反其道而行之。</p><p>一般在女人犯错时，她们总是能找到许多借口责备她们身边的男人，直到男人们开始怀疑也许真的是自己犯了错。<strong>根据麦特的经验，只有两种情况下女人会承认自己错了：当她们想要某件东西的时候；当夏天下雪的时候。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;看了一年的《时光之轮》，还是到了结束的时候～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看着我们的几位主角（兰德，麦特，佩林，奈妮薇，艾雯…），走出伊蒙村，在世界各地历练，经历磨难，一步步成长，经历着必将会被吟游诗人传唱的人生～&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="时光之轮" scheme="/tags/%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE/"/>
    
      <category term="书评" scheme="/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的权威</title>
    <link href="/2018/07/25/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E6%9D%83%E5%A8%81/"/>
    <id>/2018/07/25/我眼中的权威/</id>
    <published>2018-07-25T15:51:43.000Z</published>
    <updated>2018-07-26T14:10:18.732Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26522008&auto=0&height=66"></iframe><p><strong>我不相信权威！</strong></p><blockquote><p>不只是权威，我对任何人的言论都有所保留。除非它符合逻辑，也就是说，它要听起来“有道理”。但“权威”是比较典型的群体，所以本文借它来说理</p></blockquote><p><strong>注</strong> 为了避免无意义地争论，我有必要解释下这句话：看待事物不要走极端。我不是不相信“每一个”权威，也不是不相信权威说的“每一句话”。<strong>我的意思是，在公共场合下，权威们所说的大部分话，我都持怀疑态度。</strong></p><h3 id="在其位谋其政"><a href="#在其位谋其政" class="headerlink" title="在其位谋其政"></a>在其位谋其政</h3><hr><p>换句话说，屁股决定脑袋。<br>趋利避害是人的本能。人做的事，说的话，背后大都是有利益等考量，公共场合更是如此。只不过具体怎样的利益考量，只有他自己知道了。</p><p><strong>正是因为权威说的话大都是出于利益等考量，而不是出于对真理，对事实的追求。所以我才会说“我不相信权威”。</strong></p><p>经常在网络上看到有人在争论。</p><p>如果我发现某个人和其“争论的对象”有利益关联或者说其他人性/心理方面的动机（比如：和一个贫穷的人讨论“贫穷和愚昧的关系”，他就有可能仅仅因为“对号入座”而不顾事实逻辑，一味反驳；很多人听不得对当下社会的批评言论也是出于某种“奇怪的心理原因”，尽管事实如此。），那么他的观点的可信度就会大大降低。</p><blockquote><p>前段时间“李笑来通话录音流出”，又证实了我的想法：大多数所谓“知名人士”只是把大众当成“可以随意摆弄的对象”（本来想说“傻逼”，但这个词太情绪化了，遂换之）罢了，没别的。还有这么多人把他们的言论奉为圭臬，呵呵。</p></blockquote><p>这么多人轻信权威的话，可能是觉得：<strong>因为</strong>权威比自己更专业，见识更多，更有经验，更….<strong>所以</strong>权威的言论就更可靠。<br>这个因果关系看上去<strong>似乎</strong>没问题。</p><p>但这句话正确的一个前提却被大众忽略了，而这个前提恰恰是致命的：权威在经过一番权衡后（利益？道德？），认为告诉大众<strong>“正确的话”</strong>是符合<strong>“他的需求”</strong>的。</p><p>那么问题来了：如果权威在经过一番权衡后，认为告诉大众<strong>“错误的话”</strong>是符合<strong>“他的需求”</strong>的呢？</p><h3 id="预设观点"><a href="#预设观点" class="headerlink" title="预设观点"></a>预设观点</h3><hr><p>相信多数人在看到权威的观点前都会有自己的“观点”。</p><p>多数人发现权威的观点和自己的一致，会笑着点了点头说：“嗯，果然我想的没错！”，然后就吃瓜去了。</p><blockquote><p>这种人只是在欺骗自己罢了。他们了解权威观点的唯一目的只是想确认”权威的观点和自己的一致“。并且这里还有个隐藏的预设：他们潜意识认为“权威的观点就是正确的”。</p><p>他们这种行为还反映出他们的<strong>不自信</strong>。居然需要别人告诉自己是对的，自己才觉得自己是对的，呵。</p><p>那么这种人在发现权威观点和自己的不一致时，也只会抛弃自己的观点，选择接受权威的观点，而不会去主动思考！思考！思考！</p></blockquote><p>少数人则不止于此，会去思考权威说的话是否有逻辑问题，数据引用是否正确等，还会继续通过搜索引擎去看其他人的观点，尤其是相反的观点，<strong>继续思考</strong>！</p><h3 id="尽信书不如无书"><a href="#尽信书不如无书" class="headerlink" title="尽信书不如无书"></a>尽信书不如无书</h3><hr><p>“努力很重要”</p><p>“选择比努力重要”</p><p>“选择虽然比努力重要，但坚持比选择更重要”</p><blockquote><p>可能有人会抓狂说：”他喵的，到底哪个重要？”</p><p><strong>纠结哪个重要根本无关紧要！</strong></p></blockquote><p>在我高中的某个时刻突然发现：针对同一件事，一个人可以出于不同的考量而说出相反却都有说服力的话之后，我就决定<strong>不再只是一味地接受任何人的观点了。</strong></p><p>所谓<strong>尽信书不如无书</strong>，就是这个道理。</p><h3 id="独立思考"><a href="#独立思考" class="headerlink" title="独立思考"></a>独立思考</h3><hr><p>“独立思考”简直太重要了。重要到什么程度呢？完全可以说是“性命攸关”。</p><p>它可以帮助你在生活中面临大大小小的选择时，<strong>大概率</strong>能选择到更有利的那一个。</p><p>关于独立思考，不想聊了。</p><p>其他相关文章及讨论：</p><p><a href="https://program-think.blogspot.com/2010/10/book-review-asking-right-questions.html" target="_blank" rel="noopener">书评：《学会提问——批判性思维指南》</a> （需科学上网）</p><p><a href="https://www.zhihu.com/question/19649898" target="_blank" rel="noopener">什么是独立思考？如何独立思考？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="权威" scheme="/tags/%E6%9D%83%E5%A8%81/"/>
    
      <category term="独立思考" scheme="/tags/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>时光之轮：艾雯与爱莉达的对决（精彩辩论）</title>
    <link href="/2018/07/16/%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E7%B2%BE%E5%BD%A9%E7%89%87%E6%AE%B5/"/>
    <id>/2018/07/16/《时光之轮》精彩片段/</id>
    <published>2018-07-16T08:24:55.000Z</published>
    <updated>2019-05-10T11:42:59.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谈话还在继续，爱莉达不断对其他人发出侮辱性的评论，有时是故意的，有时则显然是无意的。其他人却已经将话题从叛逆姐妹转移到那种怪异的、一直被阴云覆盖的天空上。最后，舍万提到一则传闻，在遥远的南方，霄辰人正在与艾伊尔人合作。</p><p><strong>“又是霄辰人？”</strong>爱莉达叹了口气，<strong>“你们不需要为那些人担心。”</strong></p><p><strong>“我的讯息来源却无法苟同，吾母。”</strong>舍万僵硬地说，<strong>“我相信，我们需要密切注意他们的一切行动。我已经让一些姐妹问过这个孩子，她与霄辰人接触的经历，这些是非常重要的讯息。您应该了解一下他们对两仪师的所作所为。”</strong></p><p>爱莉达发出一阵响亮而韵律优美的笑声。<strong>“你当然应该知道这个孩子是多么喜欢说大话！”</strong>她朝艾雯瞥了一眼，<strong>“你是不是在为你的朋友传播谎言？那个愚蠢的亚瑟让你如何描述那些侵略者？他们在为他卖命，不是吗？”</strong></p><p>艾雯没有回答。</p><p><strong>“说话。”</strong>爱莉达用手中的酒杯指了她一下，<strong>“告诉这些人，你说的都是谎话。承认你的错误，否则我就让你继续去进行苦修，女孩。”</strong></p><p>就算因为紧闭嘴巴而承受苦修，也要比直接承受爱莉达的愤怒来得更好。沉默是取得胜利的办法。</p><p>但艾雯的目光扫过这张摆放着雪白的海民瓷器，和闪耀红烛的桃花心木长桌，她看见五双眼睛正在打量着她，更能看到那些眼里的疑问。在私下里，艾雯曾经向她们大胆发言。但现在，在这个全世界最有权势的女人面前，她还会坚持自己的主张吗？毕竟她的小命就握在这个人的掌心里。</p><p>艾雯到底是玉座，或者只不过是个爱装腔作势的女孩？</p><p>光明烧了你，爱莉达，她想着，咬紧了牙。她知道自己错了，沉默不会取得胜利，不会争取到这些人的信任。你绝不会喜欢沉默带来的后果。</p><p><strong>“霄辰人绝不是在为兰德卖命。”</strong>艾雯说，<strong>“他们对白塔是一个严重的威胁。我没有说过任何谎话，除此以外的任何说法都会是对三誓的背叛。”</strong></p><p><strong>“你还没有立下三誓。”</strong>爱莉达以不容置疑的口吻说着，将目光转向她。</p><p><strong>“我立了。”</strong>艾雯说，<strong>“我没有手执誓言之杖，但让我无一字谎言的绝不是誓言之杖。我已经在心里立下了那些誓言，我会更加严苛地坚守它们，因为没有外部的力量能够帮助我约束自己。谨守三誓，我再次告诉你，我是一名梦卜者，我已经梦到霄辰人会进攻白塔。”</strong></p><p>爱莉达的目光不住地闪烁。她紧握叉子的拳头指节泛白。艾雯直视着她的眼睛。最后，她又笑了：<strong>“啊，看得出来，这孩子像以往一样倔强。看来嘉德琳是对的，你必须为你的嚣张狂妄接受苦修，孩子。”</strong></p><p><strong>“这些人都知道，我不会说谎。”</strong>艾雯平静地说，<strong>“每一次你坚称我说谎，你都是在她们眼中贬低你自己。即使你不相信我的梦，你也必须承认，霄辰人是一个威胁。他们奴役能够导引的女人，用一种扭曲的特法器让她们成为武器。有时候，我还能感觉到那种项圈正勒住我的脖子。在我的梦里，在我的噩梦里。”</strong></p><p>房里一片沉寂。</p><p><strong>“你是个愚蠢的孩子。”</strong>爱莉达显然在装作艾雯对她构不成任何威胁。她真应该仔细看看其他人的眼神，至少，她能在那里看到自己的荒谬。<strong>“好吧，你在逼我。孩子，你要跪倒在我面前，乞求我的原谅。快一点。否则，我会把你单独关起来。你想要的就是这个吗？但不要以为这样你就不会再挨打了。你还是要接受每日例行的苦修，然后再被扔回囚室里。现在，跪下乞求原谅吧。”</strong></p><p>宗派守护者们互相交换着眼神。已经没有退路了。艾雯希望情况不要发展到这种样子，但事实就是这样，爱莉达在要求一场战斗。</p><p>该是展开正面战斗的时候了。<strong>“如果我不向你鞠躬呢？”</strong>艾雯直视着爱莉达的眼睛问道，<strong>“那又怎样？”</strong></p><p><strong>“不管怎样，你终究会跪下来。”</strong>爱莉达咆哮着，拥抱了真源。</p><p><strong>“你要对我使用至上力？”</strong>艾雯平静地问，<strong>“你竟然要采用这样的手段？难道没有导引，你就没有权威了？”</strong></p><p>爱莉达停了一下。<strong>“我有权利纠正一个不懂得尊敬的人。”</strong></p><p><strong>“那么，你是要强迫我服从你。”</strong>艾雯说，<strong>“你要对白塔中的每一个人都这么做，爱莉达？一个宗派反对你，宗派就被解散。有人不讨你喜欢，你就会设法毁掉她的两仪师身份。到最后，你会让每一名姐妹都向你下跪。”</strong></p><p><strong>“胡说！”</strong></p><p><strong>“哦？”</strong>艾雯问，<strong>“你有没有告诉她们，你那个关于新誓言的设想？每一名姐妹都要手持誓言之杖，立誓服从玉座、支持玉座？你能不能否认它，能不能否认你说过这样的话？三誓会让你这么做吗？”</strong></p><p>爱莉达僵住了。如果她是黑宗，她就可以否认，不管她有没有用过誓言之杖。但不管怎样，梅丹妮会证实艾雯的话。</p><p><strong>“那只是闲聊，”</strong>爱莉达说，<strong>“只是一个无意中说出的想法而已。”</strong></p><p><strong>“无意的闲聊经常会是事实。”</strong>艾雯说，<strong>“你把转生真龙锁在箱子里，你也在这么多见证人面前威胁要这样处置我。人们称亚瑟为暴君，但是你践踏了我们的法律，用恐怖的手段统治白塔。”</strong></p><p>爱莉达睁大了眼睛。她的怒火显而易见，而且她似乎……很震惊，仿佛不明白教训一个不守规矩的初阶生怎么会变成一场针锋相对的辩论。艾雯看见她开始编织一根风之力的丝线。必须阻止她这么做，让风之力堵住自己嘴会彻底终结这场辩论。</p><p><strong>“来吧，”</strong>艾雯继续保持着平静，<strong>“用至上力塞住我的嘴。身为玉座，难道你没能力说服一个对手，只能诉诸暴力吗？”</strong></p><p>艾雯从眼角看到瘦小的灰宗守护者尤缇芮正在点头。</p><p>爱莉达的眼里闪动着愤怒，她撇下了风之力丝线。<strong>“我不需要反驳区区一个初阶生。”</strong>她喝道，<strong>“玉座不会对像你这样的人做解释。”</strong></p><p><strong>“‘玉座了解最复杂的条文与争议，’”</strong>艾雯凭借记忆引述着，<strong>“‘总而言之，她是所有人的奴仆，哪怕是最低贱的劳工。’”</strong>这是芭拉黛尔·雅兰戴勒在死前最后一份稿件中写下的文字。她是从褐宗选出的第一任玉座。她在这份稿件里对自己统治白塔时期和在卡瓦瑟恩战争中所做的一切进行了解释。雅兰戴勒认为，每一次度过危机之后，玉座都有义务向众人解释自己的施政纲领。</p><p>舍万坐在爱莉达身边，赞同地点着头。艾雯所引述的话在白塔中算不上传播广泛。她很感谢史汪在潜移默化中向她传授前玉座的智慧。现在她说出的事情有许多来自秘密历史，但也有许多是像芭拉黛尔这样的人留下来的哲理。</p><p><strong>“你在说什么胡话？”</strong>爱莉达轻蔑地说道。</p><p><strong>“在你捉住兰德·亚瑟之后，你打算怎么做？”</strong>艾雯并没有理会她的评价。</p><p><strong>“我不……”</strong></p><p><strong>“你不必回答我。”</strong>艾雯向围坐在桌边的人们点点头，<strong>“但对于她们，你也不需要做出一点解释吗，爱莉达？你的计划是什么？还是你要逃避这个问题，就像对我的其他问题一样？”</strong></p><p>爱莉达的面孔变得通红，但她努力让自己镇定下来。<strong>“我会保障他的安全，将他妥善地进行屏障，让他在白塔中安居，直到最后战争爆发的时刻。这样就能阻止他已经在许多国家中造成的灾难和混乱。即使这么做有可能会激怒他，也完全是值得的。”</strong></p><p><strong>“‘人类的生命将被粉碎，如同犁头粉碎田中的土块。一切都将被他眼中的烈火吞噬。’”</strong>艾雯又说道，<strong>“‘战争的号角随他的脚步响起。乌鸦在他的声音中饱餐，他将戴上一顶利剑的王冠。’”</strong></p><p>爱莉达皱起眉，向后退了退。</p><p><strong>“《卡里雅松轮回》，爱莉达，”</strong>艾雯说，<strong>“如果你将兰德·亚瑟锁在监牢中，以‘保障他的安全’，他会拿下伊利安吗？他会戴上剑之王冠吗？”</strong></p><p><strong>“不会。”</strong></p><p><strong>“如果他躲藏在白塔里，你以为他该如何实现这些预言？他该怎么引发战争，就像预言中所说的那样？他该如何粉碎诸国，将它们绑缚在他周围？他该如何‘用和平之剑杀戮他的人众’或‘束缚九月，供他驱策’？预言中是不是说他将‘毫无羁绊’？难道那里不是写了‘他所经之处，便生出混乱’？如果他被束缚在锁链里，他又能经过哪里？”</strong></p><p><strong>“我……”</strong></p><p><strong>“你的逻辑感很可怕，爱莉达。”</strong>艾雯冷冷地说。菲兰恩狡狯地笑了笑，她也许又在思考艾雯很适合白宗的事了。</p><p><strong>“呸，”</strong>爱莉达说，<strong>“你所问的问题都是无稽之谈。预言必将实现。除此以外，没有任何可能。”</strong></p><p><strong>“那你的意思就是，你对他的安排必将失败。”</strong></p><p><strong>“不，根本不是。”</strong>爱莉达的脸又红了，<strong>“我们不该在这个问题上打转，这种事不是由你来决定的。不，我们要谈论的是你的那些叛徒，以及那些人对白塔所做的一切！”</strong></p><p>漂亮的一招，这完全有可能逼迫艾雯转为守势。爱莉达绝非无能，她只是过于傲慢。</p><p><strong>“我看到她们在努力修补我们之间的裂痕。”</strong>艾雯说，<strong>“我们不能改变已经发生的事。我们不能改变你对史汪所做的一切，尽管跟随我的姐妹们已经发现了一种治疗静断的手段。我们只能继续向前，竭尽全力抚平伤痕。而你在做什么，爱莉达？拒绝对话，威胁宗派守护者们停止谈判？侮辱所有不属于你的宗派？”</strong></p><p>黄宗的多欣低声表示赞同。爱莉达的目光立刻转向了她。她沉默了下去，仿佛才意识到这不是她应该参与的辩论。然后，爱莉达回过头喝道：<strong>“够了。”</strong></p><p><strong>“懦夫。”</strong>艾雯说。</p><p>爱莉达猛地睁大了眼睛。<strong>“你怎么敢！”</strong></p><p><strong>“我所说的是事实，爱莉达。”</strong>艾雯平静地说，<strong>“你是一个懦夫和一个暴君。我很想指认你为暗黑之友，但我怀疑，暗帝也许不会愿意接纳你。”</strong></p><p>爱莉达尖叫着，挥舞至上力将艾雯狠狠地摔到墙上，水晶酒壶也从艾雯手中飞了出去，落在木制地板上，将一大片红色的酒浆洒在餐桌和桌边的人们身上，把雪白的桌布染成了红色。</p><p><strong>“你指认我是暗黑之友？”</strong>爱莉达嚎叫着，<strong>“你才是暗黑之友。你和外面的叛逆，你们只想干扰我去做我必须要做的事！”</strong></p><p>又是一阵风之力将艾雯打在墙上。艾雯无力地掉在地上，水晶酒壶碎片划破她的手臂。十几条鞭子连续抽打在她身上，将她的衣服撕裂，鲜血从她的手臂上渗流出来，泼溅到半空中，最后洒落在墙壁上。</p><p><strong>“爱莉达，住手！”</strong>茹班德站起身，绿色长裙发出响亮的簌簌声。<strong>“你疯了吗？”</strong></p><p>爱莉达转过身，喘息着喊道：<strong>“不要试探我的底线，绿宗！”</strong></p><p>鞭子继续抽击在艾雯身上。她静静地承受着这一切，努力站了起来。她能感觉到自己的脸和手臂已经肿了起来，但她还是平静地看着爱莉达。</p><p><strong>“爱莉达！”</strong>菲兰恩高喝一声，站了起来。<strong>“你违反了白塔律法！你不能用至上力惩罚一个学生！”</strong></p><p><strong>“我就是白塔律法！”</strong>爱莉达咆哮着，她伸手指着姐妹们，<strong>“你们讥讽我。我很清楚你们背着我都做了些什么。在我面前，你们毕恭毕敬，但我知道你们暗地里都在说什么。你们这些忘恩负义的蠢货！枉我为你们做了那么多！你们以为我会永远容忍你们吗？她就是你们的榜样！”</strong></p><p>她猛转过身，指着艾雯，却惊讶地发现艾雯正不动声色地看着她，不由得后退了一步，惊呼一声，一只手捂在胸前。她的鞭打一直都没结束。她们全都能看见那些编织，也全都见证了艾雯没有发出半点声音，在她的嘴没有被风之力塞住的情况下。她的手臂上流淌着鲜血，身体承受着沉重的抽打，但她找不到理由尖叫。她只是沉默着，感谢艾伊尔智者们的智慧。</p><p><strong>“那么，”</strong>艾雯冷冷地说，<strong>“我就是她们的榜样吗，爱莉达？”</strong></p><p>鞭打继续着。哦，可真疼啊！泪水在艾雯的眼角打转。但她有过更糟的感觉，远比疼痛糟糕得多。每当她想到面前这个人对她珍爱的白塔所做的一切，她都会有这种感觉。她真实的痛苦并非来自身上的伤口，而是因为爱莉达在宗派守护者们面前所做的一切。</p><p><strong>“光明在上。”</strong>茹班德悄声说道。</p><p><strong>“我只希望我不必出现在这里，爱莉达。”</strong>艾雯轻声说道，<strong>“我希望你能够成为白塔伟大的玉座，我希望能够心悦诚服地接受你的统率。我希望你有这样的能力和资格。如果白塔拥有一位合格的玉座，我宁愿接受死刑。白塔远比我更重要。你也能这样说吗？”</strong></p><p><strong>“你想要死刑！”</strong>爱莉达吼叫着，好不容易让自己声音平稳下来，<strong>“好吧，你得不到死刑！死亡对你来说太仁慈了，暗黑之友！我会亲眼看你受刑，每个人都会看你受刑，直到我满意为止。然后，你才会死！”</strong>她转向那些瞠目结舌的仆人。<strong>“叫士兵来！把这个人关进白塔最深的牢房里！让全城人都知道，艾雯·艾威尔是暗黑之友！她拒绝了玉座的仁慈！”</strong></p><p>仆人们立刻跑出房间。鞭打还在继续，但艾雯已经麻木了。她闭上眼睛，感到一阵虚弱。她的左臂已经流失大量的血，那里的伤口最深。</p><p>终于到尽头了，就像她担心的那样。她太激进了。</p><p>她担心的并不是自己的生命。她在为白塔担心。当她靠在墙上，思绪渐渐模糊的时候，她的心中充满了哀伤。</p><p>不管怎样，她在白塔内部的战斗结束了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;谈话还在继续，爱莉达不断对其他人发出侮辱性的评论，有时是故意的，有时则显然是无意的。其他人却已经将话题从叛逆姐妹转移到那种怪异的、一直被阴云覆盖的天空上。最后，舍万提到一则传闻，在遥远的南方，霄辰人正在与艾伊尔人合作。&lt;/p&gt;
&lt;p&gt;&lt;strong
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="时光之轮" scheme="/tags/%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE/"/>
    
      <category term="摘抄" scheme="/tags/%E6%91%98%E6%8A%84/"/>
    
  </entry>
  
  <entry>
    <title>你选择了生活，不是生活选择了你</title>
    <link href="/2018/06/24/%E4%BD%A0%E9%80%89%E6%8B%A9%E4%BA%86%E7%94%9F%E6%B4%BB%EF%BC%8C%E4%B8%8D%E6%98%AF%E7%94%9F%E6%B4%BB%E9%80%89%E6%8B%A9%E4%BA%86%E4%BD%A0/"/>
    <id>/2018/06/24/你选择了生活，不是生活选择了你/</id>
    <published>2018-06-23T17:14:50.000Z</published>
    <updated>2018-06-23T17:31:57.452Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28785782&auto=0&height=66"></iframe><blockquote><p>很多人没有意识到：<strong>正是你曾做过的那些选择，成就了现在的你自己</strong></p></blockquote><p>这两天高考出成绩，室友在聊“当初怎么选择的这个专业”。这使我想起一些之前的事，随即产生了两个有趣的观点。</p><h4 id="01：警惕所谓的“人生经验”"><a href="#01：警惕所谓的“人生经验”" class="headerlink" title="01：警惕所谓的“人生经验”"></a>01：警惕所谓的“人生经验”</h4><hr><p>高中时曾有几位老师在班里向我们传授“过来人的经验“。</p><p><strong>关于“大学”</strong></p><p>A老师曾说：“多考证！对以后工作有好处。”</p><p>B老师曾说：“大学最好把驾照考了，像我现在工作了，就没什么时间考驾照了，很后悔。”</p><p><strong>我们冷静地思考一下这些“建议”：</strong></p><p><strong>A老师</strong> 的建议是否可取，取决于你选择的专业。</p><p>因为并不是所有专业都像xx（建筑？此处不确定，因为我不是在建筑相关专业，也没有此专业的朋友）专业一样，可以用很多专业领域证书来证明你自己，工作时可以加分。比如CS专业就“基本”不需要（PS: 我知道有“ACM”这种比赛，能得奖很好啊，但其数量太微不足道了）</p><p>年初在姥姥家时，我一个表哥和我聊专业，也建议我“大学期间多拿一些证书”，理由和A老师类似。</p><p>我笑着说：“好，我知道了…”</p><blockquote><p>PS：CS方向的学生如果找编程的工作时，简历上写“计算机二级证书”的话，是会减分的哦～</p><p>“担任学生会xx职务”等项，也是一样减分的哦～</p></blockquote><p><strong>B老师</strong> 的逻辑其实就是：“当初我xxxxx, 现在很后悔，所以你们以后一定不要xxxxx”。</p><p>因为是述说者的亲身经历，而且“血淋淋”的例子就活生生的摆在我们面前，所以这种逻辑非常容易说服人（至少当时是这样）。但对不对就不一定了，具体情况具体分析。</p><p>如果像B老师说的：因为工作后“没时间”，所以“大学最好把驾照考了”。我不敢苟同。每个打算在校期间考驾照的人都应该认真思考一下：真的有必要把这么一大段绝佳的时间用在考一个不知何时才能用得上的驾照，而不是用在提升自己，着眼于逼近的毕业/工作？</p><p><strong>写到这里</strong>，我特别想聊聊此逻辑的另外一种常见表示：“因为当初家长没有能上大学，所以希望儿女一定要上大学”。</p><p>这句话对不对呢？要问我？我肯定得说对。但它的答案不是我关心的。</p><p>我关心的是另外<strong>一个始终存在却被有意忽视的事实</strong>：</p><p>前段时间看了“陈为军”导演的纪录片<a href="https://movie.douban.com/subject/20393972/" target="_blank" rel="noopener">《Why Poverty》</a>，最后一集是<a href="https://movie.douban.com/subject/26133459/" target="_blank" rel="noopener">《出路/Education Education》</a>。</p><p>看完后你就会发现：当这种家长怀着“我当年没有能上大学，所以一定要让子女上大学“的想法时，等在他们前面的往往不是“梦想天堂”，而是“陷阱”！</p><blockquote><p>导演陈为军对此现象的一段描述：</p><p>“这些孩子的家长跟我的年龄差不多。他们认为，自己之所以没有机会跳出农村，是因为没有在高考这条路上取胜。他们的想法很简单，就是我的孩子一定要进大学。但是他们不知道现在除了一本二本之外还有大量的三本大专。他们不知道这种“大学“和他们当年的大学是不一样的。”「这种大学，当你真的去上了，你会发现，那里什么都没有！」（PS: 最后一句为笔者补充）</p></blockquote><p><strong>所谓的人生经验由于“时代变化”、“围城造成的认知偏差”、“幸存者偏差”等原因，并不一定可靠，如果你把它当成灵丹妙药放心来吃，小心有一天被它毒死哦～</strong></p><h4 id="02：你选择了生活，而不是生活选择了你"><a href="#02：你选择了生活，而不是生活选择了你" class="headerlink" title="02：你选择了生活，而不是生活选择了你"></a>02：你选择了生活，而不是生活选择了你</h4><hr><blockquote><p>人这一辈子，就像是玩一款<a href="https://zh.wikipedia.org/wiki/%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94%E6%B8%B8%E6%88%8F" target="_blank" rel="noopener">RPG游戏</a>：你在游戏过程中做出的一系列选择将你导向一个特定的结局。<strong>可惜的是：游戏能存档/重来，人生不行。</strong></p></blockquote><p>你选择 <strong>回应前桌女生给你的小纸条</strong> 还是选择 <strong>扔到垃圾桶里</strong>？</p><p>你选择 <strong>让父母决定大学专业</strong> 还是选择 <strong>自己决定</strong>？</p><p>你选择 <strong>在班里同学大都去考驾照时无脑跟风</strong> 还是选择 <strong>先仔细权衡是否有必要</strong>？</p><p>你选择 <strong>在校期间做兼职</strong> 还是选择 <strong>埋头学习</strong>？</p><p>你选择 <strong>逃课玩游戏</strong> 还是选择 <strong>逃课写代码</strong> 或者选择 <strong>不逃课</strong>？</p><p>…</p><p><strong>正是过去的无数选择成就了现在的你！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="一些思考" scheme="/tags/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
      <category term="选择" scheme="/tags/%E9%80%89%E6%8B%A9/"/>
    
      <category term="人生经验" scheme="/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>当有人反驳你: “你有资格评价XXX吗？”</title>
    <link href="/2018/06/12/%E5%BD%93%E6%9C%89%E4%BA%BA%E5%8F%8D%E9%A9%B3%E4%BD%A0-%E2%80%9C%E4%BD%A0%E6%9C%89%E8%B5%84%E6%A0%BC%E8%AF%84%E4%BB%B7XXX%E5%90%97%EF%BC%9F%E2%80%9D/"/>
    <id>/2018/06/12/当有人反驳你-“你有资格评价XXX吗？”/</id>
    <published>2018-06-12T06:27:31.000Z</published>
    <updated>2018-06-12T06:31:05.075Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=95651&auto=0&height=66"></iframe><p>这句话大家应该都不陌生。</p><p>当你和别人讨论某些人某些事，恰巧你又发表了对方不喜欢的观点，这时要是他来一句“你有资格评价XXX吗？”总能把你剩下的话给呛到肚子里去。</p><p>我曾经也被这么呛过。我心里明明知道这句话有问题，但一时半会又想不出该怎么反驳。所以这次我就来认真地思考下这句话！</p><p><strong>这意味着我们要搞清楚两个问题：</strong></p><ol><li>我们有没有评价其他人/事的权利？</li><li>什么才叫有资格？</li></ol><p>对于问题一，没有什么可以质疑的： <strong>“评价”实质是言论自由的表现形式之一，言论自由是自由权的重要组成部分，而自由权是一项基本人权。</strong>(注：自由权仅次于生命权)</p><p>所以关键在于“什么才叫有资格？”</p><p>这是我思考的结果：<strong>专业领域外的，</strong> <strong>不熟悉，不了解，没有调查过的情况，你就没有资格去评价。</strong></p><p>案例一(<em>专业领域外</em>)</p><p>你如果不是程序员，你就没有资格评价我的编程水平。</p><p>案例二(<em>不了解，不熟悉</em>)</p><p>就算你是程序员而且和我相同方向，但如果你没有阅读过我的代码，就也没有资格评价我的编程水平。</p><p>案例三(<em>没有调查过</em>)</p><p>你在路边看到两个人在打架，如果你没有做过调查，像：“询问双方各自的观点，询问路人，查看监控…” 就没有资格说是谁的错，或者谁应该为此负责。</p><p><strong>最后专门说一个有趣的案例：</strong></p><p>你在某家餐厅吃饭，某道菜你觉得不好吃，然后就有人反驳说：“你又不是大厨，有什么资格说这道菜不好吃？”听起来似乎有道理(持有类似观点的人我在网络上也见过不少)。</p><p>说这件事有趣是因为说出这句话的人完全搞错了一件事，那就是：客人在评价菜好不好吃，而不是在评价菜烧的水平(火候的把握，材料的拿捏之类)，如果评价烧菜的水平的话，当然需要客人同样是厨师(或者会做饭)才行。但一道菜好不好吃这件事，任何有味蕾并且大脑正常的人都有资格评价！</p><p>(生活中还有很多其他事情，比如说评价某件东西不好用，皆同理)</p><p>因此如果以后再有人想用这句话让你闭嘴，你就可以从上述几点来说明你完全有资格评价！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="碎碎念" scheme="/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="反驳" scheme="/tags/%E5%8F%8D%E9%A9%B3/"/>
    
  </entry>
  
  <entry>
    <title>2018：聊聊正常的恋人关系</title>
    <link href="/2018/06/09/2018-%E8%81%8A%E8%81%8A%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%81%8B%E4%BA%BA%E5%85%B3%E7%B3%BB/"/>
    <id>/2018/06/09/2018-聊聊正常的恋人关系/</id>
    <published>2018-06-08T17:15:59.000Z</published>
    <updated>2018-08-27T06:45:05.122Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=34200932&auto=0&height=66"></iframe><p>和朋友聊天时聊到<strong>“相亲”</strong>.</p><p>让我想起来了高中时的一件事: 学《氓》那篇文言文后, 我思考过一个问题: </p><p><strong>“农村那些经媒人介绍的婚姻, 是如何(数十年如一日地)维持下去的?”</strong></p><p>我百思不得解, 两个之前从没见过面的人怎么可能在短时间内了解彼此, 然后结婚, 然后一起生活一辈子呢?</p><p>我就在某一节课后问了我的语文老师这个问题.</p><p>结果…没有得到答案, 我当时似乎也意识到了什么, 觉得有些尴尬, 就忘掉了这个问题.</p><p>昨天朋友“谈相亲”时说的一句话, 正好解决了我这个几年前思考过的问题: <strong>“两个人没什么想法，没有独立思考的能力，那就凑合着过吧！”</strong></p><blockquote><p>“凑合着过”，真他喵让人害怕！</p></blockquote><p>那么，<strong>“在双方都比较有想法的情况下，「正常的」恋人关系是该怎样的？”</strong></p><h4 id="三观一致"><a href="#三观一致" class="headerlink" title="三观一致"></a>三观一致</h4><hr><p>相较于性格、外表、经济、学历，<strong>三观是否一致才是恋爱关系中最重要的一环！</strong></p><blockquote><p>三观：<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E8%A7%82" target="_blank" rel="noopener">世界观</a>、<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6" target="_blank" rel="noopener">人生观</a>、<a href="https://zh.wikipedia.org/wiki/%E5%83%B9%E5%80%BC%E8%A7%80" target="_blank" rel="noopener">价值观</a>。</p><p>一致：当然是指大体一致。</p><p>不一致：同理，指大体不一致。</p></blockquote><p>三观不一致的感情不可能长久，而且可能因为“任何事情”比如说一顿饭，而最终分手。</p><h4 id="互相独立（物质-精神）"><a href="#互相独立（物质-精神）" class="headerlink" title="互相独立（物质/精神）"></a>互相独立（物质/精神）</h4><hr><p>这个好像没有说的必要…</p><h4 id="互相信任、包容"><a href="#互相信任、包容" class="headerlink" title="互相信任、包容"></a>互相信任、包容</h4><hr><p>互相信任也没什么可聊的，聊聊“包容”。</p><p>人会犯错误，信息会被误传与曲解，真相又常常解释不清，所以误解是难以避免的。不过还好，包容会抵消误解对信任的影响。</p><p>但是注意：<strong>太多</strong>的误解却会带来大面积的不信任！</p><blockquote><p>跑个题：</p><p>人何时能进化到可以直接进行思想上的交流就好了…（就像基地系列里的盖亚或者三体里的三体人）</p></blockquote><h4 id="不要放低姿态"><a href="#不要放低姿态" class="headerlink" title="不要放低姿态"></a>不要放低姿态</h4><hr><p>任何一方的低姿态都可能导致发展成“畸形关系”，而“畸形关系”往往意味着“危险”。</p><p><strong>“以斗争求和平则和平存，以妥协求和平则和平亡”</strong> </p><p>这句话适用于任何人际关系，当然也包括恋人关系。</p><blockquote><p>为什么会这样？</p><p>人性使然！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="恋人" scheme="/tags/%E6%81%8B%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>聊聊陌生人之间的信任</title>
    <link href="/2018/05/23/%E8%81%8A%E8%81%8A%E9%99%8C%E7%94%9F%E4%BA%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BF%A1%E4%BB%BB/"/>
    <id>/2018/05/23/聊聊陌生人之间的信任/</id>
    <published>2018-05-23T09:19:46.000Z</published>
    <updated>2018-06-12T06:32:07.724Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508242&auto=0&height=66"></iframe><blockquote><p>曾在网上发现一个有趣的游戏:<a href="https://www.sekai.co/trust/" target="_blank" rel="noopener">信任的进化</a></p><p>它尝试使用<a href="https://zh.wikipedia.org/wiki/%E5%8D%9A%E5%BC%88%E8%AE%BA" target="_blank" rel="noopener">博弈论</a>来解释为什么“不信任”会像病毒一样传播,以及从中我们能得到什么</p><p>建议看文章之前先玩一下(大约费时20分)</p></blockquote><p>在过去约一年的时间里,我经历了两次(上班)工作经历,两次远程工作经历,两次远程外包经历,还有两次租房经历.这里面即有痛苦的经历也有令人愉悦的.</p><p>所以我有足够的经历能聊聊这个话题</p><h4 id="身份认同"><a href="#身份认同" class="headerlink" title="身份认同"></a>身份认同</h4><p>我是一个技术群的管理员, 经常在群里解答一些问题或者和其他人扯淡.</p><p>有天看到有个眼熟的id在询问有没有朋友想找工作的, 我就联系上了他. 因为之前曾在群里一起讨论过问题和扯过皮, 所以很能谈得来. 总而言之, 差不多两天就把工作的事情谈妥了.</p><p>入职半个多月后, boss问我: 为什么敢这么相信网上的人, 就不怕被骗? 而且这边传销的很多, 之前这幢楼里就有过传销的窝点.</p><p>我听后很害怕, 因为以前看过很多传销相关的文章. 很清楚被骗入传销意味着什么. 导致当时也没有很好的回答那个问题. 如今趁这个机会, 说下当时我的考虑, 他是传销的可能非常小. 原因如下: </p><ol><li>他进群时间比较久</li><li>从群里发言看出技术不差, 不太可能是装的</li><li>在群里没有奇怪言论</li></ol><p>综上, 我认为这个人不是搞传销的.</p><p><strong>另外, 人总是本能地恐惧陌生的东西而亲近觉得熟悉的人, 所以我会选择相信这位群友</strong></p><h4 id="主动示好-适当-置自己于弱势"><a href="#主动示好-适当-置自己于弱势" class="headerlink" title="主动示好/(适当)置自己于弱势"></a>主动示好/(适当)置自己于弱势</h4><p>前段时间离开北京, 我选择了先离开, 然后等周末房东查看过房子之后再退给我押金.我为什么相信房东会按照约定退还给我押金呢?</p><ol><li>房东比我大不了几岁, 也是程序员(Java技术栈), 所以我们更容易接受对方(身份认同)</li><li>因为我提前退租，所以我选择主动放弃到剩下一个多月的租金(选择主动“示好”)</li><li>因为我没拿到租金就先离开北京，相当于把自己置于弱势地位(增强了对方的安全感)</li></ol><p>所以我认为房东大概率会按照约定做事.<br>当然还有其他原因在起作用, 比如：<strong>选择做坏事的“性价比”小</strong></p><h4 id="制衡-使陌生人之间的信任得以维持"><a href="#制衡-使陌生人之间的信任得以维持" class="headerlink" title="制衡: 使陌生人之间的信任得以维持"></a>制衡: 使陌生人之间的信任得以维持</h4><p>做外包时, 如果有第三方做担保的话更好. 但如果没有第三方介入呢? </p><p>这时一个适合双方的交付方式就显得尤为重要了. 最后我选择接受了对方提出的方法: 先付25%我开始开发, 等我开发完成后, 录制视频交给对方, 确认后付我尾款, 然后我交付代码和相关文档.</p><p>对方首先处于弱势, 因为我有可能拿了先款之后就消失, 所以我费了一些功夫, 通过我的简历等资料说服了对方我能搞定这个外包, 且不会消失. 然后对方就付了25%的先款给我.</p><p>等我开发完成, 怎么保证对方不会有变故而放弃这个项目了呢? 没法完全保证. 如果发生这种事, 我只能认栽, 并且庆幸还好有25%而不至于吐血. 那对方怎么确定我拿到尾款之后会给代码呢? 也没法完全保证, 但一般这种事情不会发生, 因为开发者完全没有动机做这种损人不利己的事.<br>到此, 一个外包流程就走完了. 你看, 相互制衡在维持着双方的信任.</p><p>你说这不叫信任？</p><p><strong>我觉得反而是因为有限制双方的“制度”存在，我们才更“敢”信任彼此.</strong></p><blockquote><p>话说，某个不受限制的xxx，你敢信任吗？</p></blockquote><h4 id="反例-双方的信任是如何从有到无的"><a href="#反例-双方的信任是如何从有到无的" class="headerlink" title="反例: 双方的信任是如何从有到无的"></a>反例: 双方的信任是如何从有到无的</h4><p>南京的一次短暂工作经历: 刚入职几天就感觉到不对劲, 因为之前在网上和boss谈好的“没事不加班”, 但据我观察和从同事那儿了解. 发现从boss创业至今, 就没有“没事”的时候! 我觉得受到了欺骗(虽然并没有直接的欺骗, 但故意误导也让我感受到了对方人品的恶劣), <strong>信任-1</strong>.</p><p>然后就是加班, 每天都要加班到8/9点,其他同事加班更晚(10/11点),却没有加班费和餐补. 让我感受到boss其人剥削的本质, <strong>信任-2</strong>. boss还辩解说只要你任务早点完成, 就可以不用加班, 懒得反驳了, 丑恶的嘴脸暴露无遗, <strong>信任-2</strong></p><p>常画大饼, 描述未来美好的场景, 却连已允诺的年前就该发的年终奖还没有见到(同事如是说), 虚伪, <strong>信任-3</strong></p><p>劳动合同工资(市最低工资水平)及福利部分不实, <strong>强行</strong>置你于弱势地位. <strong>信任-2</strong></p><p>在网上看到了最早一批员工离职后的揭发. 发现刚创业未满一年的公司, 居然已经换掉了至少一批的员工了…震惊. <strong>信任-5</strong></p><p>然后我就辞职了. 上了一趟为期半个月的社会实践课.</p><h4 id="番外-对对方有足够的了解能让你更正确的判断"><a href="#番外-对对方有足够的了解能让你更正确的判断" class="headerlink" title="番外: 对对方有足够的了解能让你更正确的判断"></a>番外: 对对方有足够的了解能让你更正确的判断</h4><p>如果是陌生人, 就要利用一些方法, 短时间内对对方尽可能的了解.</p><p>什么方法呢?</p><p><strong>互联网</strong>. 不管你承不承认, 我们都在网上留下了太多的痕迹. </p><p>理论上说, 完全可以找到你留在网上的所有痕迹,但实际上呢, 每个人能找到的都有所不同. </p><blockquote><p>话说我觉得国家机器应该能做到接近 ”理论上“ 说的那样…</p></blockquote><p>拿我来说, 如果你在我的博客看本文, 那么你就能根据网站右上角的链接, 找到我的知乎和Github. 然后就能知道我的Telegram群组, Telegram用户, 邮箱地址, 细心点可能会发现我的很多nickname都是“林水溶”,这样就能Google出来我的简书账号和Segmentfault账号, 或许还有Stackoverflow, 如果你发现我在简书/segmentfault发了很多相同的文章,猜想或许我在其他网站发过一样的文章, 那么你就能顺藤摸瓜,找到我的另外几个论坛的账号. 这种思路继续下去,再加上如果你能找到一些其他帮助(比如说社工库)的话, 那么你基本就能把我在网络上的痕迹扒的差不多了. 通过浏览所有我的这些“痕迹”, 相信你就能大概了解我是一个什么样的人了.</p><p>当然, 有个概率小的可能不能忽略: 那就是上面所有“痕迹”都是精心伪造的. 那么这个人也太厉害了,这么多年….佩服佩服, 但是动机是什么呢? 搞不懂…</p><p><strong>补充三集TED相关视频:</strong></p><p><a href="https://www.ted.com/talks/rachel_botsman_we_ve_stopped_trusting_institutions_and_started_trusting_strangers/transcript?language=zh-cn&amp;from=singlemessage&amp;isappinstalled=0#t-1015478" target="_blank" rel="noopener">从信任组织机构转向信任陌生人</a></p><p><a href="https://open.163.com/movie/2016/3/P/C/MBIJ802BI_MBIJ8J2PC.html" target="_blank" rel="noopener">如何与陌生人建立信任?</a></p><p><a href="https://open.163.com/movie/2013/11/0/H/M9C56LO9M_M9C56O10H.html" target="_blank" rel="noopener">我们误解“信任”</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="信任" scheme="/tags/%E4%BF%A1%E4%BB%BB/"/>
    
  </entry>
  
  <entry>
    <title>开发了一款写作软件(OSX,Windows)，附带Electron开发指南</title>
    <link href="/2018/05/14/%E5%BC%80%E5%8F%91%E4%BA%86%E4%B8%80%E6%AC%BE%E5%86%99%E4%BD%9C%E8%BD%AF%E4%BB%B6-OSX-Windows-%EF%BC%8C%E9%99%84%E5%B8%A6Electron%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>/2018/05/14/开发了一款写作软件-OSX-Windows-，附带Electron开发指南/</id>
    <published>2018-05-14T09:35:37.000Z</published>
    <updated>2018-05-15T14:36:30.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 断断续续写了个把月，终于在昨天完成了第一版…</p></blockquote><h3 id="笔落写作"><a href="#笔落写作" class="headerlink" title="笔落写作"></a>笔落写作</h3><hr><p><strong>一款帮助网络写手更方便地进行小说创作的PC软件</strong>，目前支持 OSX/Windows</p><p>名字灵感来自于杜甫的一首诗，前两句是：</p><blockquote><p>《寄李十二白二十韵》</p><p>昔年有狂客，号尔谪仙人。</p><p><strong>笔落</strong>惊风雨，诗成泣鬼神。</p></blockquote><p>对于名字，要感谢下<a href="https://github.com/jiayin3204" target="_blank" rel="noopener">@蓝色</a></p><p>预览的话，可以去<a href="http://biluo.netlify.com" target="_blank" rel="noopener"><strong>官网</strong></a>看</p><p>作为我的第一款商业性（虽然才卖出去一个，还是朋友捧场…）产品，我投入了很多精力。而且，重要的还在后面，那就是<strong>运营</strong>。</p><p>怎么让得让更多的人知道并且去使用它？直觉告诉我，这将是比写代码还要难的事情…</p><h3 id="Electron-开-cai-发-keng-指南"><a href="#Electron-开-cai-发-keng-指南" class="headerlink" title="Electron 开(cai)发(keng)指南"></a>Electron 开(cai)发(keng)指南</h3><hr><p>主要用到了<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">Electron-Vue</a>这个框架，让我不用花时间去琢磨配置<a href="https://webpack.docschina.org/" target="_blank" rel="noopener">Webpack</a>和<a href="http://electronjs.org/" target="_blank" rel="noopener">Electron</a>，上来就直接开发。感谢开源社区！</p><blockquote><p>歪个楼：我对Wepback的看法就是，笼统的了解下运行原理就行了，现成并且配置好的Webpack模板直接用，遇到特殊需求，查文档，查Google知道怎么改即可。</p></blockquote><p>开发要求你比较熟悉<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue</a>和<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node</a>，这里不会讲基础的东西，讲基础知识的除了官方文档，网上有更多相关文章可供选择。</p><h4 id="细数踩过的坑："><a href="#细数踩过的坑：" class="headerlink" title="细数踩过的坑："></a>细数踩过的坑：</h4><p><strong>首先，我遇到了：dev模式没问题，打包后空白页的问题？</strong></p><p>如果你刚刚生成项目，什么都没有动的话，那就可能是Webpack在打包时，把Vue当成了外部文件没有打包进去。</p><p>代码在：<code>webpack.renderer.config.js</code></p><p>注释掉<code>...Object.keys(dependencies || {}).filter(d =&gt; !whiteListedModules.includes(d))</code>即可</p><p><strong>然后，又遇到了多窗口的需求：</strong></p><p>开始没思路，因为多窗口和一般前端开发时遇到的多路由，多Tab还不是一回事儿。后来经人指点，才明白其实多窗口挺简单的…</p><p>我们先观察生成的代码模板中，主窗口是怎么生成的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainWindow;  <span class="comment">//主窗口变量</span></span><br><span class="line"><span class="keyword">const</span> winURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">'development'</span> ?</span><br><span class="line">  <span class="string">`http://localhost:9080`</span> :</span><br><span class="line">  <span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html`</span>  <span class="comment">// 设置URL或者文件,毕竟Electron App其实运行在Chromium中</span></span><br><span class="line">  </span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(options)  <span class="comment">// new 一个窗体对象，同时传一些参数</span></span><br><span class="line">mainWindow.loadURL(winURL)<span class="comment">// 加载URL，加载之后，窗口就会被显示出来。</span></span><br></pre></td></tr></table></figure><p>那么，我们依葫芦画瓢，第二个窗口就可以这么写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> secondWindow; </span><br><span class="line"> <span class="keyword">const</span> modalPath = process.env.NODE_ENV === <span class="string">'development'</span> ?</span><br><span class="line">    <span class="string">'http://localhost:9080/#/showOutline'</span> :</span><br><span class="line">    <span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html#showOutline`</span>  <span class="comment">// 的确比较简单...</span></span><br><span class="line">  </span><br><span class="line">secondWindow = <span class="keyword">new</span> BrowserWindow(options)  </span><br><span class="line">secondWindow.loadURL(modalPath)</span><br></pre></td></tr></table></figure><p><strong>PS:</strong>  这里提醒下<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router</a>不要设置成history模式。原因在文档里看到过，忘了，想知道就去查文档 :p</p><p><strong>多窗口下的Vuex异常：</strong></p><p>开发多窗口时并没有意识到vuex存在问题，后面发现数据怎么都对不上，然后排查问题时发现，两个窗口的state(状态)并不同步，即：</p><p>当你在打开窗口B时，此时两个窗口的Vuex数据时一致的，但一旦你的B窗口的数据状态发生变化，其并不能反映到窗口A里。为什么不行，其实也很好理解。</p><blockquote><p>歪个楼：说下我对Vuex实现原理的理解。以前刚开始学习Vue还没有学Vuex时，当时我解决多组件（非父子）之间的通讯方式除了利用父组件做中间人（event bus）外，还试过维护一个全局JSON（比如共用一个store.js），然后其他组件都能访问及操作。后来学了Vuex，发现它的工作方式和我想的差不多。（当然，我并没有去看源码，它真正的实现方式是什么。但直觉告诉我应该是这样没错了！）</p></blockquote><p>让我反问一句：为什么两个窗口之间的数据能一直同步？</p><p><strong>解决方法：</strong> 我结合了Electron文档中提到的两种方式：<code>ipc通讯</code>和<code>在主进程维护全局变量</code></p><p><strong>PS: </strong> 经人点拨，ipc通讯的实现利用了浏览器的<code>postMessage</code>接口（话说这个API，之前还真没听过说…）</p><p><strong>在Vue中自己实现富文本编辑器：输入框的双向绑定和自动聚焦（auto focus）</strong></p><blockquote><p>还有个不算是Electron，只能说是Vue方面的问题。</p><p>本来写这个项目时就没打算来自己实现富文本编辑器，<strong>本着能用开源就用开源的原则</strong>，在项目里测试了一些开源的编辑器，发现或多或少都有些问题，后来一琢磨，反正这个项目的富文本编辑器需求不复杂，就自己实现一个好了。</p></blockquote><p>编辑器的输入框，我使用的HTML属性<code>contenteditable</code>来实现。</p><p>编辑器组件的双向绑定和自动聚焦的细节参考<a href="https://segmentfault.com/a/1190000008261449" target="_blank" rel="noopener">这篇文章</a></p><h4 id="此外，还有些坑不知道什么原因造成的："><a href="#此外，还有些坑不知道什么原因造成的：" class="headerlink" title="此外，还有些坑不知道什么原因造成的："></a>此外，还有些坑不知道什么原因造成的：</h4><hr><p><strong>用户数据的本地存储我用了<a href="https://github.com/typicode/lowdb" target="_blank" rel="noopener">lowdb</a>：</strong></p><blockquote><p>本质就是通过<code>node</code>的<code>fs</code>模块来操作本地<code>JSON</code>文件，只不过它比我们自己实现的要优雅，可靠多了</p></blockquote><p>然后有个需求是，当触发某种条件时，保存对应的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当用户点击Button A</span></span><br><span class="line">db.set(<span class="string">'a'</span>,<span class="number">111</span>).write();</span><br><span class="line"><span class="comment">// 当用户点击Button B</span></span><br><span class="line">db.set(<span class="string">'b'</span>,<span class="number">222</span>).write();</span><br></pre></td></tr></table></figure><p>此时，如果用户点击了Button A，不仅<code>a</code> 数据会更新，<code>b</code>数据也会更新，反之同样。</p><p>这不是<code>lowdb</code>的问题，因为我单独测试过，点击Button A并不会导致其他set函数调用！</p><p>所以这应该算是一个奇怪的问题吧。</p><p><strong>利用ipcRenderer监听通信时，如果在listener内使用了异步：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ipcRenderer.on(<span class="string">'delete'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 异步这里特指setTimeout</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不知为何,_this.remove会调用多次（但发现ipcMian.send只被调用了一次！）</span></span><br><span class="line">    _this.remove(<span class="keyword">this</span>.nodeWasRightClicked, <span class="keyword">this</span>.dataWasRightClicked);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>另外：</strong> 打包软件时也遇到了很多问题，但最终都通过Google解决掉了，所以这里不复述了（<em>所谓面向Google编程</em>）</p><blockquote><p>其他问题后续会继续补充，欢迎持续关注！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 断断续续写了个把月，终于在昨天完成了第一版…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;笔落写作&quot;&gt;&lt;a href=&quot;#笔落写作&quot; class=&quot;headerlink&quot; title=&quot;笔落写作&quot;&gt;&lt;/a&gt;笔落写作&lt;/h3&gt;&lt;hr&gt;
&lt;p
      
    
    </summary>
    
      <category term="大前端" scheme="/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Electron" scheme="/tags/Electron/"/>
    
      <category term="软件" scheme="/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Electron-Vue" scheme="/tags/Electron-Vue/"/>
    
  </entry>
  
  <entry>
    <title>Github Repository 的正确打开姿势</title>
    <link href="/2018/04/02/Github-Repository-%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E5%A7%BF%E5%8A%BF/"/>
    <id>/2018/04/02/Github-Repository-的正确打开姿势/</id>
    <published>2018-04-02T14:36:48.000Z</published>
    <updated>2018-04-02T16:43:46.002Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508186&auto=0&height=66"></iframe><blockquote><p>毫无疑问，开源是伟大的</p></blockquote><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><hr><p>作为一名前端开发者，日常编程完全离不开 “开源”。</p><p>从编辑器（VSCode，Atom），到用来做开发的MVVM（Vue.js，React.js，Angular.js）框架，到用来构建项目的包管理器（npm，yarn），再到项目中用到的各种UI库，第三方工具，组件。基本全是开源的，源码都能在Github搜到。</p><p><strong>假如没有了开源，这个世界会是什么样？</strong></p><p>这个世界会是什么样不好说，但完全可以想象的到程序员开发一款同样产品的难度会增加到多么可怕的地步。</p><p>我也经常在Github上开源一些东西，虽然不是一些什么难度很高，甚至还有些拙劣，可供优化的项目，但的确实实在在地帮到了一些人。他们通过阅读项目源码来学习新技术，在他们自己的项目中使用我的开源组件而省去了自己重新造轮子花费的大把时间，所以他们会给我的项目点Star，每一个Star都是对我项目的肯定。</p><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><hr><p>但什么是一个<strong>正常的开源项目</strong>呢？我认为必须符合以下几点</p><ul><li>完整的文档（至少包含<strong>Preview</strong> 和 <strong>How To Use</strong> 两部分）<ul><li>前者可以让开发者清晰明了的知道这是一个什么东西，是否符合他们的需求，而不是非得<code>Clone</code>下来亲自试试才知道这是什么鬼？<ul><li>如果<code>Clone</code>下来后发现并不符合心中的需求，那将让人感到非常挫败，而且也浪费了本不该浪费的时间。</li></ul></li><li>后者可以让开发者不必翻看你的源码而快速上手使用它。这也是开源的一大魅力，使用者不需要去阅读源码就能使用它。<ul><li>开源项目的使用体验完全在于开发者。<strong>简单，优雅</strong> 应该是每一个开源项目开发者的信条。</li></ul></li></ul></li><li>版本控制<ul><li>关于版本控制的必要性，<a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">git文档</a>说的很清楚了，粘贴过来一段就不复述了</li><li>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。</li></ul></li><li>注释<ul><li>必要的注释不仅让其他人在阅读你的源码时明白你写下这段代码时的思路，也能让你不会在一段时间后看不懂自己写的代码。<ul><li>卧槽，当初这个地方我为什么要这么写？这是最让人尴尬的事情。</li></ul></li></ul></li><li>正确的代码<ul><li>本来不打算说这个，但在接连<code>Clone</code>了差不多有10个项目都报错时…… 我觉得还有很有必要说的。</li><li>既然咱都决定把代码开源出去了，为什么不能再费一点心，保证其他人<code>Clone</code>下来能正常运行呢？否则开源出去还有意义吗？</li></ul></li></ul><h5 id="扯点别的"><a href="#扯点别的" class="headerlink" title="扯点别的"></a>扯点别的</h5><hr><p><strong>关于为什么要开源？</strong></p><p>我的回答是：<strong>装逼</strong></p><p>（我的一位室友有句口头禅，我觉得很有道理：“如果不是为了装逼，那将毫无意义！”）</p><p>更多角度的答案看<a href="https://www.zhihu.com/question/33573424" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="编程" scheme="/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="/tags/Github/"/>
    
      <category term="Repository" scheme="/tags/Repository/"/>
    
  </entry>
  
  <entry>
    <title>南京，我做了一个错误的决定</title>
    <link href="/2018/03/18/%E5%8D%97%E4%BA%AC%EF%BC%8C%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E5%86%B3%E5%AE%9A/"/>
    <id>/2018/03/18/南京，我做了一个错误的决定/</id>
    <published>2018-03-18T10:46:20.000Z</published>
    <updated>2019-05-10T10:51:33.655Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26522011&auto=0&height=66"></iframe><blockquote><p>哪天下大雨，就把这篇补上…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="选择" scheme="/tags/%E9%80%89%E6%8B%A9/"/>
    
      <category term="职业" scheme="/tags/%E8%81%8C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>未选择的路</title>
    <link href="/2018/02/10/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/"/>
    <id>/2018/02/10/未选择的路/</id>
    <published>2018-02-10T09:22:08.000Z</published>
    <updated>2019-05-10T10:51:13.371Z</updated>
    
    <content type="html"><![CDATA[<p>黄色的树林里分出两条路，可惜我不能同时去涉足，我在那路口久久伫立，我向着一条路极目望去，直到它消失在丛林深处。但我却选了另外一条路，它荒草萋萋，十分幽寂，显得更诱人、更美丽，虽然在这两条小路上，都很少留下旅人的足迹，虽然那天清晨落叶满地，两条路都未经脚印污染。呵，留下一条路等改日再见！但我知道路径延绵无尽头，恐怕我难以再回返。也许多少年后在某个地方，我将轻声叹息把往事回顾，一片树林里分出两条路，而我选了人迹更少的一条，从此决定了我一生的道路</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;黄色的树林里分出两条路，可惜我不能同时去涉足，我在那路口久久伫立，我向着一条路极目望去，直到它消失在丛林深处。但我却选了另外一条路，它荒草萋萋，十分幽寂，显得更诱人、更美丽，虽然在这两条小路上，都很少留下旅人的足迹，虽然那天清晨落叶满地，两条路都未经脚印污染。呵，留下一条路
      
    
    </summary>
    
      <category term="一些思考" scheme="/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="诗" scheme="/tags/%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>一次痛不欲生的debug经历</title>
    <link href="/2018/02/10/%E4%B8%80%E6%AC%A1%E7%97%9B%E4%B8%8D%E6%AC%B2%E7%94%9F%E7%9A%84debug%E7%BB%8F%E5%8E%86/"/>
    <id>/2018/02/10/一次痛不欲生的debug经历/</id>
    <published>2018-02-10T09:17:36.000Z</published>
    <updated>2018-02-10T09:20:31.246Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=467117858&auto=0&height=66"></iframe><p><code>谨以此篇祭奠我逝去的Bug大人</code></p><hr><p><strong>前言:</strong></p><p>这次debug，花了我差不多两天时间．昨天下午决定过了凌晨再解决不掉的话，就打算放弃了．但代码的人生总是充满戏剧性的．一次不报希望的尝试，居然就给解决掉了．呜呼．</p><h4 id="Bug初现："><a href="#Bug初现：" class="headerlink" title="Bug初现："></a>Bug初现：</h4><p>前两天我开了个<a href="https://github.com/shuiRong/StrongSpiders" target="_blank" rel="noopener">repo</a>：包括五只Python爬虫：</p><ol><li><a href="Yinwang.org">王垠</a>的所有博客</li><li><a href="lagou.com">拉勾</a>特定选择的所有招聘数据</li><li><a href="music.163.com/#/song?id=450567505">网易云</a>歌单或者喜欢的音乐的下载</li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a>的数据爬取</li><li>QQ空间或者微博数据的爬取</li></ol><p>这五只爬虫从简到难，涉及到静动态页，从接口获取数据，模拟登录，验证码识别．还可能涉及到模拟浏览器环境，数据的可视化(4，５)．总而言之，这五只爬虫写完，Python爬虫的技能就点的差不多了．</p><p>然后在写完第一只爬虫之后，去我的<a href="http://linshuirong.cn" target="_blank" rel="noopener">博客</a>上写说明时，发现上传图片功能出问题了．</p><p><img src="http://linshuirong.cn:3000/images/202017115018.png" alt="图片"><br><img src="http://linshuirong.cn:3000/images/202017115021.png" alt="图片"></p><p>注意这句：<code>provisional headers are shown</code></p><p>同时这个post请求是<code>pedding</code>状态，在几分钟之后显示<code>failed</code>.</p><p><strong>PS：</strong> 这里有必要说明下相关的逻辑．</p><p>这个post请求是在用户选择上传的图片之后发起的．前端在把图片读取为base64字符串后（为什么选择这样上传图片，与主题无关，暂时不表），由这个post发送给后端，然后后端把base64转成二进制，再写入图片文件（根据用户图片格式新建的文件），然后再把图片路径返回给前端．</p><h4 id="尝试Debug："><a href="#尝试Debug：" class="headerlink" title="尝试Debug："></a>尝试Debug：</h4><p>我首先做的．．．是查了下＂provisional＂什么意思：）</p><p>然后Google．</p><p>在<a href="https://segmentfault.com/q/1010000000364871" target="_blank" rel="noopener">这篇</a>贴子里我得知这个Warning的意思是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个警告的意思是说：请求的资源可能会被（扩展／或其他什么机制）屏蔽掉。</span><br><span class="line"></span><br><span class="line">之所以会出现这个警告，是因为去获取该资源的请求其实并（还）没有真的发生，所以 Header 里显示的是伪信息，直到服务器真的有响应返回，这里的 Header 信息才会被更新为真实的。不过这一切也可能不会发生，因为该请求可能会被屏蔽。比如说 AdBlock 什么的，当然了不全是浏览器扩展，具体情况具体分析了。</span><br></pre></td></tr></table></figure><p>从其他的很多中文博客里，我也得到的是这个意思．（但最后结果出来，我却发现其实request没问题，是服务端response的事．（具体后面再说））</p><p>然后从<a href="https://stackoverflow.com/questions/5585918/what-does-pending-mean-for-request-in-chrome-developer-window" target="_blank" rel="noopener">这篇</a>,<a href="http://fex.baidu.com/blog/2015/01/chrome-stalled-problem-resolving-process/" target="_blank" rel="noopener">这篇</a>贴子里得到了很多解决思路，包括但不限于：</p><ul><li>请求被AdBlock，HTTPS everywhere或类似的插件给屏蔽掉了．(关掉后，问题依旧)</li><li>请求被代理或者GFW屏蔽掉．(代理关掉后，问题依旧)</li><li>Chrome的bug．（没法测试．但感觉不是）</li><li>防火墙，杀软．（没杀软，感觉不是防火墙）</li><li>应该把Ajax请求放到异步操作里．（虽然有点莫名其妙，但我也试了．依旧）</li><li>Chrome的缓存机制问题（request/response设置no-cache，依旧）</li></ul><p>把这所有的方案试过都没用之后，我有点懵了．我开始怀疑自己，哦不，自己的代码了．然后去查文档，想看是不是某个函数的知识点我不了解．．．</p><p>但在我把代码回滚到之前我能确定没问题时的commit，同时我发现，在本地运行却没问题后，<strong>我基本能确定了：我写的代码没问题！</strong>(就是在这步走错了，导致我多花了一天的时间才解决问题．)</p><p>下面我就开始求助群里大佬了．并把chrome的<code>chrome://net-internals/#events</code>里的相关日志贴给了大佬，大佬表示好久之前遇到过这问题，但忘了怎么解决的了，并给了一种思路，还没来得及测试它，问题就解决了．</p><p>到昨天晚上8点左右的时候，我已经怀疑到服务器了．想重装下系统．但因为这样折腾有些麻烦，就放到最后才考虑这个．</p><p>然后<strong>终于开始</strong>怀疑是代码问题了，我把前端后关键地方打印了下．看关键变量的值对不对．发现：前端没问题．后端正常获取到base64字符串.所以后面的图片存储应该出问题了．</p><p>我又把图片存储部分的代码分离出来，测试．终于发现把图片数据写入到文件时有未知问题，<strong>导致:</strong></p><p>程序会重复对文件进行写操作，但就是写不进去．而因为向客户端返回response信息是在写操作的callback里，所以浏览器就迟迟拿不到response，就显示了：<code>provisional headers are shown</code>.</p><p><strong>另外</strong>：我在Node交互命令行里测试这段代码时，写操作立刻就完成了．但是对应文件的大小是０．<strong>而且写操作没报错，这是最气的．</strong> 相同的代码在我的电脑上ok.</p><p>我就想到：该不会是Node的问题吧</p><ul><li>服务器端Node版本：6.X(忘记具体哪个了，要不还能去给提个issue)</li><li>自己电脑上的Node版本：7.2.1</li></ul><p><strong>把服务器上Node版本升级到了v7.10.0　然后问题解决了-_-</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="大前端" scheme="/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
