<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林水溶的博客</title>
  
  <subtitle>以前我没得选，现在我只想做个坏人</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="/blog/"/>
  <updated>2021-04-12T13:26:27.806Z</updated>
  <id>/blog/</id>
  
  <author>
    <name>林水溶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用免费云资源部署网站前后端</title>
    <link href="/blog/2021/04/12/%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9%E4%BA%91%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
    <id>/blog/2021/04/12/%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9%E4%BA%91%E8%B5%84%E6%BA%90%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99%E5%89%8D%E5%90%8E%E7%AB%AF/</id>
    <published>2021-04-12T13:21:44.000Z</published>
    <updated>2021-04-12T13:26:27.806Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写完了一个小项目，想要快速验证，但没有域名、服务器资源怎么办？</strong></p><p><strong>好办，有免费的云资源可以利（bai）用（piao）。</strong></p><p>上周末快速开发上线了一个小项目：<a href="https://weibo1.netlify.app/" target="_blank" rel="noopener">微博历史榜历史</a>，在最后发布的过程中遇到了一些问题。在搜索的过程中我意识到，关于国外的云服务使用/部署相关的文章貌似就没几篇。好在折腾了一番后顺利上线。故今天把这些部署过程记录下来，方便后人。</p><p>该项目前后端分离，还包含一个爬虫，并且使用了 Mongo 数据库。这就意味着我需要找地方放这四块东西：</p><ul><li>前端项目打包生成静态资源</li><li>后端接口</li><li>数据库</li><li>定时爬虫</li></ul><p>我没有 VPS、域名（博客在用，绑定到了 Github Pages，不能动），也不想租，所以我决定利用那些提供免费服务的云资源来部署本项目。</p><p>在看下文之前，我假设你已经能够顺利翻墙…</p><h3 id="Netlify-静态资源"><a href="#Netlify-静态资源" class="headerlink" title="Netlify - 静态资源"></a><strong><a href="http://netlify.com/" target="_blank" rel="noopener">Netlify</a> - 静态资源</strong></h3><hr><p>我从 17 年起开始用它，知道对于前端资源的部署，用它没啥问题。在国内访问速度也还凑合。后来我也发现 <a href="https://vercel.com/" target="_blank" rel="noopener">Vercel</a> 家的服务也不错，看官也可用来替代 Netlify。</p><p>Netlify 提供静态资源托管服务，有以下几个特点：</p><ul><li>可关联 Github 仓库，在仓库更新后自动收重新打包部署。</li><li>支持配置命令（<code>yarn</code>,<code>yarn build</code>），自动帮你安装依赖，构建等。</li><li>默认使用<code>dist</code>目录下的静态资源。</li><li>提供二级域名（https）。</li><li>（貌似是）仓库数量不限制。（但 Vercel 免费版只能部署你个人的仓库代码，不能部署组织下的。Netlify 没这限制。）</li></ul><blockquote><p>这几个特点貌似流行的静态资源托管商都一样，毕竟连这功能都没的话，简直没得打。</p></blockquote><p>但不仅仅如此，Netlify、Vercel 现在也提供<strong>无服务函数/云函数（Serverless）</strong>的托管了。我本来打算此项目的后端接口部署成云函数，但我看着他俩的官方示例，都没搞成功…</p><p>我后端接口用的是 <code>Go</code>，在用 Vercel 部署云函数时就直接遇到了<a href="https://github.com/xuthus5/zeit-serverless/issues/1" target="_blank" rel="noopener">报错</a>，在官方仓库的 issue 区找不到答案，最后无奈放弃。或许用 <code>Node.js</code> 不会有问题，但我就想用 <code>Go</code>。Netlify 那边遇到啥错我忘记了，总之也没成功。</p><p>所以后端代码部署这块，还是找 Heroku…</p><h3 id="Heroku-后端接口"><a href="#Heroku-后端接口" class="headerlink" title="Heroku - 后端接口"></a><strong><a href="http://netlify.com/" target="_blank" rel="noopener">Heroku</a> - 后端接口</strong></h3><hr><p>Heroku 貌似是挺老牌的服务商了（搜了下，07 年就有了，最开始只支持 Ruby）。提供的服务也不仅仅是部署后端。</p><p>它的特点有：</p><ul><li>免费额度：5 个项目。</li><li>部署方便，下载 heroku 的命令行工具后，几个命令下来就可以部署了。</li><li>支持语言多。</li><li>提供二级域名（https）。</li><li>支持云函数（但我貌似用 Go 部署时貌似也遇到了问题，忘了具体的错）。</li><li>也支持部署静态资源（但不同于 Netlify，你必须把静态资源放到后端代码框框里，等于说 Heroku 那边部署的还是后端程序，只不过你这个程序没额外功能，只是读取静态资源）。</li></ul><p>缺点：</p><ul><li>国内被墙 🧱</li></ul><p>部署完后，会提供一个接口链接，供你访问，比如我<a href="https://warm-reef-76661.herokuapp.com/api/list" target="_blank" rel="noopener">这个</a>。直接在前端代码里调用就好了。</p><p>具体的部署步骤，自己搜文章吧…</p><h3 id="MongoDB-Cloud-云数据库"><a href="#MongoDB-Cloud-云数据库" class="headerlink" title="MongoDB Cloud - 云数据库"></a><strong><a href="https://www.mongodb.com/cloud" target="_blank" rel="noopener">MongoDB Cloud</a> - 云数据库</strong></h3><hr><p>每个 Project 只有免费额度：500MB（可以创建多个 Project），所幸我的项目每天写入的数据量不大，500MB 够用一年多的了。</p><p>在后台创建 Project 没什么好说的，只是提醒一下，连接数据库时的账号密码不是网站的账号密码，而是 Project - Security - Database Access 下面的那个账号密码。</p><h3 id="Github-Actions-定时跑程序"><a href="#Github-Actions-定时跑程序" class="headerlink" title="Github Actions - 定时跑程序"></a><strong><a href="https://github.com/WeiboTrendingBackup/Spider/actions" target="_blank" rel="noopener">Github Actions</a> - 定时跑程序</strong></h3><hr><p>GA 是什么东西呢？</p><blockquote><p>GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.</p></blockquote><p>官方介绍里都是：自动化工作流，CI/CD (自动集成测试和持续部署) 等对新人来说，不好理解的概念。</p><p>其实解释 Github Actions 可以很直观：一台 Github 提供的 VPS（虚拟专用主机），你可以在主机里跑任何程序。</p><blockquote><p>注意不要滥用（挖矿什么的），会被封号。</p></blockquote><p>如果你有什么定时运行的程序，就非常适合用 Github Actions 来完成。比如我这个每小时运行一次的微博热搜备份<a href="https://github.com/WeiboTrendingBackup/Spider/blob/main/.github/workflows/autorun.yml" target="_blank" rel="noopener">爬虫</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;写完了一个小项目，想要快速验证，但没有域名、服务器资源怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好办，有免费的云资源可以利（bai）用（piao）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上周末快速开发上线了一个小项目：&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="编程" scheme="/blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网站" scheme="/blog/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="部署" scheme="/blog/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="netlify" scheme="/blog/tags/netlify/"/>
    
      <category term="heroku" scheme="/blog/tags/heroku/"/>
    
      <category term="mongo" scheme="/blog/tags/mongo/"/>
    
      <category term="mongodb" scheme="/blog/tags/mongodb/"/>
    
      <category term="weibo" scheme="/blog/tags/weibo/"/>
    
      <category term="白嫖" scheme="/blog/tags/%E7%99%BD%E5%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>到底是谁“非此即彼、二元思维”？</title>
    <link href="/blog/2020/05/28/%E5%88%B0%E5%BA%95%E6%98%AF%E8%B0%81%E2%80%9C%E9%9D%9E%E6%AD%A4%E5%8D%B3%E5%BD%BC%E3%80%81%E4%BA%8C%E5%85%83%E6%80%9D%E7%BB%B4%E2%80%9D%EF%BC%9F/"/>
    <id>/blog/2020/05/28/%E5%88%B0%E5%BA%95%E6%98%AF%E8%B0%81%E2%80%9C%E9%9D%9E%E6%AD%A4%E5%8D%B3%E5%BD%BC%E3%80%81%E4%BA%8C%E5%85%83%E6%80%9D%E7%BB%B4%E2%80%9D%EF%BC%9F/</id>
    <published>2020-05-27T16:33:50.000Z</published>
    <updated>2020-05-27T16:46:52.727Z</updated>
    
    <content type="html"><![CDATA[<p>1942年3月，延安的王实味将自己4年来的生活感受所成的杂文<a href="https://zh.m.wikisource.org/zh-hans/野百合花" target="_blank" rel="noopener">《野百合花》</a>发表在了中共中央机关报《解放日报》的文艺副刊，但却引来了杀身之祸。</p><p>据胡乔木回忆，毛泽东读完<a href="https://zh.m.wikisource.org/zh-hans/野百合花" target="_blank" rel="noopener">《野百合花》</a>后，气愤地”猛拍办公桌上的报纸”。在该文发表一周后的3月31日，毛在《解放日报》改版座谈会上批评道：</p><blockquote><p>“有些人是从不正确的立场说话的，这就是绝对平均的观念和冷嘲暗箭的办法。<strong>近来颇有些求绝对平均，但这是一种幻想，不能实现的。我们工作制度中确有许多缺点，应加改革，但如果要求绝对平均，则不但现在，将来也是办不到的。</strong>小资产阶级的空想社会主义思想，我们应该拒绝。……冷嘲暗箭，则是一种销蚀剂，是对团结不利的。”</p></blockquote><p>诸位看完毛的话，尤其是上面加粗的那两句，是不是以为王实味「在文章中要求绝对平均」，因此惹怒了毛？</p><p>原文在<a href="https://zh.m.wikisource.org/zh-hans/野百合花" target="_blank" rel="noopener">这里</a>，王只是在文章最后一部分“平均主义与等级制度”，提到了“平均”的事儿，他是这么说的：</p><blockquote><p>“我并非平均主义者，但衣分三色，食分五等，却实在不见得必要与合理。…… <strong>一切应该依合理与必要的原则来解决。如果一方面害病的同志喝不到一口面汤……另一方面有些颇为健康的“大人物”，作非常不必要不合理的“享受”。</strong>”</p></blockquote><p>人家王实味哪里是在要求“绝对平均”啊？明明只是说“合理与不合理”！</p><p>在网上时有看到这样的对话：A在主张“言论自由”，B则说“哪有绝对的言论自由”。A期盼西式民主，B则说“西式民主就是真的民主吗”。</p><p>驴唇不对马嘴。每每看到这样的对话，我都气不打一出来，想开口骂一声：傻逼。「言论自由」和「绝对的言论自由」八杆子打不着，你是怎么划等号的？人家不知道「西式民主」不等于「真（理想化）民主」？还需要等你着反问？还说人家二元思维，明明是你脑子满是「非此即彼、二元思维」，才看什么都脑补上“绝对/真“。</p><p>另外，上面提到的例子中，攻击的一方其实犯了一种逻辑错误：<a href="https://zh.wikipedia.org/wiki/稻草人論證" target="_blank" rel="noopener">稻草人谬误</a>。</p><blockquote><p>即：曲解对方的论点，然后攻击曲解后的论点（稻草人）。</p></blockquote><p>王实味明明只是指出有些现象不合理，但毛泽东故意将对方论点曲解为在要求绝对平均，然后攻击说「绝对平均是一种幻想，不能实现的」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1942年3月，延安的王实味将自己4年来的生活感受所成的杂文&lt;a href=&quot;https://zh.m.wikisource.org/zh-hans/野百合花&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《野百合花》&lt;/a&gt;发表在了中共中央机关报《解放日
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="二元化" scheme="/blog/tags/%E4%BA%8C%E5%85%83%E5%8C%96/"/>
    
      <category term="绝对平均" scheme="/blog/tags/%E7%BB%9D%E5%AF%B9%E5%B9%B3%E5%9D%87/"/>
    
      <category term="绝对主义" scheme="/blog/tags/%E7%BB%9D%E5%AF%B9%E4%B8%BB%E4%B9%89/"/>
    
      <category term="王实味" scheme="/blog/tags/%E7%8E%8B%E5%AE%9E%E5%91%B3/"/>
    
      <category term="毛泽东" scheme="/blog/tags/%E6%AF%9B%E6%B3%BD%E4%B8%9C/"/>
    
  </entry>
  
  <entry>
    <title>花了一天时间Debug的问题是什么样子？</title>
    <link href="/blog/2020/04/11/%E8%8A%B1%E4%BA%86%E4%B8%80%E5%A4%A9%E6%97%B6%E9%97%B4Debug%E7%9A%84%E9%97%AE%E9%A2%98%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%EF%BC%9F/"/>
    <id>/blog/2020/04/11/%E8%8A%B1%E4%BA%86%E4%B8%80%E5%A4%A9%E6%97%B6%E9%97%B4Debug%E7%9A%84%E9%97%AE%E9%A2%98%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%EF%BC%9F/</id>
    <published>2020-04-10T18:17:43.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天测试同学反馈说接口状态埋点上报的参数中有两个不正常。我简单排查了下，重现了问题，但不明白为什么如此。今天和测试同学差不多花了一天的时间，终于解决了，但答案却让人无语。</p><blockquote><p><strong>什么是（数据）埋点？</strong></p><p>请看<a href="[https://linshuirong.cn/blog/2019/12/26/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E4%B9%8B%E6%9B%9D%E5%85%89%E5%AE%9E%E7%8E%B0/](https://linshuirong.cn/blog/2019/12/26/前端埋点之曝光实现/">前端埋点之曝光实现</a>)</p><p><strong>什么是接口状态埋点？</strong></p><p>顾名思义就是监控接口的响应状态（比如<code>status</code>,<code>timeout</code>,<code>responseText</code>，根据各自需求来确定），并且获取到预先挑选的数据，上报给服务端。</p></blockquote><h4 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h4><p>为了监控接口的异常状态，前端在接口响应时选择将拿到的<code>xhr.status</code>,<code>request url</code>,<code>res.code</code>(后端业务的逻辑code)上报给服务端。</p><blockquote><p>后端其实也有监控，但考虑到有时问题其实发生在前后端中间的某些地方，所以在直接面向用户的前端这边上报接口数据就是非常必要的。</p></blockquote><p>核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xhr.onloadend = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res: Response | &#123; <span class="attr">code</span>: number &#125; = &#123; <span class="attr">code</span>: <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">   res = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'request url: '</span> + url);</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 埋点：数据上报</span></span><br><span class="line">      report(<span class="string">'response_status'</span>, &#123;</span><br><span class="line">        xhr_status: xhr.status, <span class="comment">// 200、400、500等</span></span><br><span class="line">        url: <span class="built_in">encodeURIComponent</span>(requestUrl),</span><br><span class="line">        response_code: res.code</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但测试同学通过Fiddler将接口的响应Status修改为500（400、502等）之后，告诉我说Fiddler显示上报请求中<code>xhr_status</code>参数为<code>0</code>。</p><h4 id="复现问题"><a href="#复现问题" class="headerlink" title="复现问题"></a>复现问题</h4><p>遇到问题之后，我立刻在电脑直接打开H5页面（内网测试环境）尝试复现。我使用Charles（Fiddler没必要macOS版本）的<code>Rewrite</code>功能将接口响应的<code>Status</code>修改为500，然后前端打log/断点。</p><blockquote><p>对于我来说，有三个环境需要说明下。</p><ol><li>开发环境。本地开发页面的环境，通过localhost来访问页面。</li><li>测试环境。开发完成后将打包后的资源文件部署到内网某服务器，通过正常的链接：<code>https://a.b.com/c/d/e</code>来访问。</li><li>外网。将测试环境验证没问题的代码部署到外网服务器，直接面向用户。</li></ol></blockquote><p>啊哦，没有复现！</p><p>然后我就去测试同学那边，让她给我演示一遍。</p><p>她开始操作：Fiddler–&gt;映射Response Body–&gt;定向到本地的JSON文件；同时修改<code>Reponse Status Code</code>为<code>500 Internal Server Error</code>；接着操作手机，发起请求。</p><p>啊哦，上报请求中的<code>xhr_status</code>参数依旧为<code>0</code>。（看来不是测试同学看错了，哈哈哈哈哈）</p><p><strong>可达鸭眉头一皱，发现事情并不简单.jpg</strong></p><p>接着，又测试了<code>400、404、502</code>，问题一样。</p><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>然后我又回到位置上，电脑上打开项目开发环境的页面，Charles修改<code>Reponse Status Code</code>，然后发现<strong>还是正常</strong>？</p><blockquote><p>我通过Charles修改电脑浏览器发出的请求时还遇到了浏览器开发者工具那边没有显示修改过的请求头信息的问题，还以为我Charles用错了，折腾了一会儿，最后冷静下来，想了想才明白过来不是我设置的问题。关于这个坑，我记录在<a href="https://segmentfault.com/q/1010000022305182" target="_blank" rel="noopener">Segmentfault</a>了，可以点过去看看。</p></blockquote><p>我开始认真了。去查了下文档，先弄清楚<code>status</code>为<code>0</code>代表什么意思吧：</p><blockquote><p>只读属性 <code>XMLHttpRequest.status</code> 返回了<code>XMLHttpRequest</code> 响应中的数字状态码。<code>status</code> 的值是一个无符号短整型。<strong>在请求完成前，<code>status</code>的值为<code>0</code>。值得注意的是，如果 XMLHttpRequest 出错，浏览器返回的 status 也为0</strong>。</p></blockquote><p>所以我开始想为什么请求会没有完成？或者说请求为什么会出错？</p><p><strong>一时没有思路。</strong></p><p>又跑去测试同学那边，看着她再把所有的情况再测试一遍。值得一提的是，这次我留意到，就算测试同学通过Fiddler把<code>Reponse Status Code</code>修改为<code>200</code>（对，就是200，再用抓包工具修改一次），依旧拿不到<code>xhr.status</code>。同时发现，如果完全不使用Fiddler，那么服务器那边的log就能显示上报的<code>xhr.status</code>是正常取到的（是200）。</p><p><strong>那如果把服务器上的后端程序直接停掉呢？</strong></p><blockquote><p>页面接口的后端程序和埋点上报的后端不在一起，分开的。</p></blockquote><p>测试的结果是，前端拿不到<code>xhr.status</code>。</p><p>你一定开始晕了，我当时也有点懵逼。让我来理一下当时测试的所有情况：</p><ol><li>服务器正常，不经过任何抓包工具，能拿到<code>xhr.status</code>。</li><li>服务器停掉，不经过任何抓包工具，拿不到<code>xhr.status</code>。</li><li>服务器正常，通过Fiddler修改<code>Reponse Status Code</code>，拿不到<code>xhr.status</code>。</li><li>服务器正常，通过Charles修改<code>Reponse Status Code</code>，能拿到<code>xhr.status</code>。</li></ol><p>这样的测试结果，不禁让我开始怀疑起Fiddler。是不是它在实现修改Headers功能的时候，emmmm，有bug？否则为什么用Charles修改就可以，Fiddler却不行呢（3和4对比）？而且不用Fiddler就正常，用了就不正常（1和3对比），更说明是你的锅了呀。</p><p><strong>但我并没有死心，回到位置上继续排查。</strong></p><p>一顿操作（关掉Chrome扩展<a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj" target="_blank" rel="noopener">ModHeader</a>），我注意到本地开发环境也复现了，同时我留意到控制台出现一个跨域错误，我想我知道答案了。</p><p><strong>因为请求遇到了跨域限制，所以浏览器中止XMLHttpRequest请求并抛出一个异常，即：XMLHttpRequest 出错，浏览器返回的 status 为0。</strong></p><h4 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h4><p><strong>但为什么之前本地开发环境测试时就没有问题呢？</strong></p><p>这是因为我早期在开发这个项目时用了测试环境的线上接口。后端没有对来自localhost的请求设置ACAO头，所以我为了开发方便通过Chrome扩展<a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj" target="_blank" rel="noopener">ModHeader</a>自己修改了Reponse Header，添加上了<code>Access-Control-Allow-Origin: http://localhost:8080</code>。这就是为什么我开始测试时没有遇到跨域限制，<code>xhr.status</code>正常的原因。</p><p><strong>但这不能解释为什么我用Charles修改响应头能拿到，但测试同学通过Fiddler修改却不行。</strong></p><p>毕竟测试同学是直接在手机上操作的，不像我在本地开发环境操作，不会有跨域限制。</p><p>然后我又跑去测试同学那里和她讨论。我还是怀疑是Fiddler有问题，那么还能怎么测试呢？我让测试同学不用Fiddler修改<code>Response Status Code</code>和<code>Response body</code>，就只修改请求的链接，让它是错误的路径。</p><p>这次发现上报的埋点数据里，有<code>xhr_status</code>（404）了。然后修改回去，拿不到。</p><p>这下能基本确定了，是Fiddler修改<code>Response Status Code</code>功能的锅。</p><p>我其实想这个时候用Chrome的Inspect功能来确认下页面的控制台有没有跨域错误来着（应该是有）。但奈何换了好几个手机都不能在测试同学的Chrome上正常调试（现象是能检测到网页的Tab，但点击<code>inspect</code>后，弹框空白（翻墙了，清理过Chrome那个xxx，手机没有使用其他内核），应该是需要找一个特殊的Chromium版本才可以。太麻烦了，既然基本解决了就不浪费精力了。）</p><blockquote><p>搞了半天是Fiddler的锅。我就说嘛，我写的代码怎么可能有Bug？</p></blockquote><h4 id="另一个奇葩问题"><a href="#另一个奇葩问题" class="headerlink" title="另一个奇葩问题"></a>另一个奇葩问题</h4><p>这时候基本上是下午4、5点了。然后又遇到了另一个奇葩的问题。</p><p><strong>现象是：后台一个页面的某块字体样式不正常（变大并且靠左偏了）！</strong></p><p>我迅速去自己电脑上（测试环境）登陆后台看了下，<strong>一切正常</strong>。奇怪了。我只能去测试同学电脑上调试了。</p><p>首先打开<strong>开发者工具</strong>，通过<strong>审查元素</strong>查看问题元素的HTML和样式，一般都是样式不正常。比如多了些样式/少了些样式。但我这次不止如此，我先是注意到HTML结构很奇怪。我没有使用<code>&lt;font /&gt;</code>标签的习惯。但他喵的哪来的<code>&lt;font /&gt;</code>？</p><p>我还注意到有些陌生的带有<code>class</code>的元素（代码是我写的，但对这一块的布局很陌生），我copy该<code>class</code>，刷新页面（因为你打开开发者工具的时候可能有些资源文件已经加载完了，所以不会显示在开发者工具里），然后在<code>Network</code>里<code>Ctrl+F</code>搜索所有的资源文件，看他喵的这个<code>class</code>是哪个狗日的注入的。</p><p>然后就看到了<code>translate.googleapis.com</code>域名下的某js文件包含该<code>class</code>。</p><p>我：？？？</p><p>一看到这个域名，测试同学就说”Google翻译”，然后我们才注意到网页上方的Google翻译工具 <img src="https://i.imgur.com/o5J8UZx.jpg" alt="不见图请翻墙"></p><p><strong>左键–&gt;选项–&gt;一律不翻译此网站</strong></p><p>刷新页面，搞定。</p><blockquote><p><strong>顺便一提，对于所有的线上样式问题，调试思路大都如此。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天测试同学反馈说接口状态埋点上报的参数中有两个不正常。我简单排查了下，重现了问题，但不明白为什么如此。今天和测试同学差不多花了一天的时间，终于解决了，但答案却让人无语。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是（数据）埋点？&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="大前端" scheme="/blog/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Debug" scheme="/blog/tags/Debug/"/>
    
      <category term="调试" scheme="/blog/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Charles" scheme="/blog/tags/Charles/"/>
    
      <category term="Fiddler" scheme="/blog/tags/Fiddler/"/>
    
      <category term="坑" scheme="/blog/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>关于折腾博客这件事儿</title>
    <link href="/blog/2020/03/31/%E5%85%B3%E4%BA%8E%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%BB%B6%E4%BA%8B%E5%84%BF/"/>
    <id>/blog/2020/03/31/%E5%85%B3%E4%BA%8E%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%BB%B6%E4%BA%8B%E5%84%BF/</id>
    <published>2020-03-31T15:33:33.000Z</published>
    <updated>2020-04-11T08:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间，一个室友在我的“影响”（用这个词的理由是我认为“假如我不认识他，他可能就不会搞自己的博客”）下也开始搞自己的博客了。我从他折腾博客身上看到了当初自己的影子。很有感触。此博客的灵感即始于此。</p></blockquote><h4 id="第一个博客"><a href="#第一个博客" class="headerlink" title="第一个博客"></a>第一个博客</h4><p><strong>2016-08-28 16:38</strong>，我发布了人生中第一篇博客，它的标题是<a href="https://www.zybuluo.com/Clay/note/470830" target="_blank" rel="noopener">《比较全面的 科学上网/FQ教程》</a>。</p><p>这是我学完Python框架Flask后看着教程开发的论坛程序，我稍微改造下，当成了自己的博客平台。它长这样：<img src="https://i.imgur.com/7vjMU8L.jpg" alt="不见图请翻墙"></p><p>现在看来真是丑极了，肯定也不会有人看（除了自己）。但当时的我可是兴奋极了，偷偷地把博客地址更新在了QQ签名栏，然后在心里琢磨谁会先注意到它。我还给博客加了个“访客统计”，并且一天登陆到统计后台好几次，看看今天有几个人访问我的博客。</p><p>如果没有亲身经历，我不觉得别人能理解我那时的心情：自己创造了一个博客论坛，并且把它放到万维网上，任何一个人通过链接就可以看到我写的文字。它不是QQ空间、不是微博，而是完全属于我自己。想象一下，浩瀚如星辰的网络空间里，有这么一块地方，是完全属于我自己的。这种感觉在我后来的两次迁移博客（更好看、功能更多）中再也没有出现过。甚至在我19年耗时四个月开发了一个App时也没有出现。</p><h4 id="第二个博客"><a href="#第二个博客" class="headerlink" title="第二个博客"></a>第二个博客</h4><p>后来随着我学习编程的深入，同时接触了很多大佬们的博客之后，我终于意识到一个事实：<strong>我的博客是真的丑。</strong></p><p>所以我考虑自己开发一个博客，同时也当成对前端技术的练习。这就有了<a href="https://github.com/shuiRong/hexo-theme-Ada" target="_blank" rel="noopener">Ada</a>，准确的说，它不是一个完整的博客项目，而只是一个<a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>的主题。它长这样：</p><p><img src="https://i.imgur.com/2B4UMjY.jpg" alt="不见图请翻墙"></p><p>的确比第一个好看多了，但现在看来似乎也有些丑。但苍天可鉴，我当时觉得它可真漂亮。我还记得在群里分享时，有人吐槽说时间图标不好看，我都没有改，因为我觉得挺好看的 😂。这些都是2017年3月左右的事。</p><h4 id="第三个博客"><a href="#第三个博客" class="headerlink" title="第三个博客"></a>第三个博客</h4><p>几个月后，我就又开始造博客的轮子了。同样是因为编程学习。那段时间我学习了Node.js和数据库的东西，也学习了下流行的前端框架Vue.js。决定写一个项目把这些技术都用上。不知怎的，就又盯上了博客。</p><p>埋头苦写一段时间后，博客<a href="https://github.com/shuiRong/Eva" target="_blank" rel="noopener">Eva</a>上线，它长这样：（当时在看王垠的博客，因此就把他的几篇博客塞到了数据库中当成了测试数据）。</p><p><img src="https://i.imgur.com/5yWBejm.jpg" alt="不见图请翻墙"></p><p><img src="https://i.imgur.com/0UcCkhr.jpg" alt="不见图请翻墙"></p><p>这个画风，似乎很中二。对✅，这就是2017年的我。</p><h4 id="第四个博客"><a href="#第四个博客" class="headerlink" title="第四个博客"></a>第四个博客</h4><p>一次搜索技术问题的时候，看到了<a href="https://gaoryrt.com/" target="_blank" rel="noopener">gaoryrt</a>的博客，给我的第一感觉就是：<strong>我的博客是真的丑</strong>。遂生出了再次更换博客的念头，又发现原来他的博客也使用了<a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>，并且我看到的其实是一款Hexo Theme：<a href="https://github.com/gaoryrt/hexo-theme-pln" target="_blank" rel="noopener">Pln</a>。我立刻把Eva丢了，换上了Pln。所以我现在的博客长这样：</p><p><img src="https://i.imgur.com/FFywAuu.jpg" alt="不见图请翻墙"></p><p>（咦，我的看板娘怎么没了？哦，原来是搞错了个东西…看我搞定它）</p><p>现在博客看上去漂亮多了。再次感谢该主题的作者。</p><h4 id="装修"><a href="#装修" class="headerlink" title="装修"></a>装修</h4><p>自从换成现在的博客主题之后，我捣鼓博客的心就又活跃起来。前前后后给博客加了很多小功能：</p><ol><li>点击时出现红色的文字效果。（24字核心价值观）</li><li>网站下方两个角落有拉姆、蕾姆。（Re：从零开始的异世界）</li><li>网站右下角有一只看板娘。（Live2D）</li><li>如果用户从百度搜索引擎跳转过来的：就告诉他<a href="https://www.zhihu.com/question/39322261/answer/81023987" target="_blank" rel="noopener">百度卖血友吧</a>的事儿。</li></ol><p>还有很多曾考虑过，但最终为了保持简洁 (I’m lazy) 而放弃的想法：</p><ol start="4"><li>切换主题</li><li>音乐播放器</li><li>…</li></ol><p>其实，网站样式只要不是太辣眼睛，就可以了，毕竟重点是博客内容。而我近期给博客加功能的兴致居然比写博客的兴致还要高…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前段时间，一个室友在我的“影响”（用这个词的理由是我认为“假如我不认识他，他可能就不会搞自己的博客”）下也开始搞自己的博客了。我从他折腾博客身上看到了当初自己的影子。很有感触。此博客的灵感即始于此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="博客" scheme="/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="折腾" scheme="/blog/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>〈我不要听英雄的故事〉郭可盼</title>
    <link href="/blog/2020/01/25/%E3%80%88%E6%88%91%E4%B8%8D%E8%A6%81%E5%90%AC%E8%8B%B1%E9%9B%84%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%89%E9%83%AD%E5%8F%AF%E7%9B%BC/"/>
    <id>/blog/2020/01/25/%E3%80%88%E6%88%91%E4%B8%8D%E8%A6%81%E5%90%AC%E8%8B%B1%E9%9B%84%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%89%E9%83%AD%E5%8F%AF%E7%9B%BC/</id>
    <published>2020-01-25T12:14:50.000Z</published>
    <updated>2020-01-25T12:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>我不要听英雄的故事，</p><p>我不要阅读可歌可泣的篇章</p><p><br></p><p>我不要听身障人士力争上游与家人的牺牲， </p><p>我要各式各样的人都拥有自在生活的空间</p><p><br></p><p>我不要帮为了家庭放弃梦想的女人鼓掌，</p><p> 我要合理的工时和健全的公共托育政策</p><p><br></p><p>我不要赞扬社工笑谈低薪和危险的洒脱， </p><p>我要合理的尊重和制度的保护</p><p><br></p><p>我不要拍掌，不要噙泪， </p><p>听护理人员挂点滴、听医生进入手术房即使所有风险都要义无反顾自己承担</p><p>我不要颂扬他们的伟大， </p><p>我要合理的医病人口和风险分担</p><p><br></p><p>我不要燃香，不要祝祷，</p><p>我不要看见舍身取义的铜像，</p><p>我要他们活著</p><p>成为消防员只该是一个决定， </p><p>不应该成为义士的象征</p><p><br></p><p>我不要听英雄的故事， </p><p>我不要阅读可歌可泣的篇章</p><p>每一个决定或许流眼泪，但是不应该流血</p><p>每一份追求难免有懊悔，但是不应该无可挽回</p><p><br></p><p>如果每个善意都以不可挽回作为代价，</p><p>如果每份正直都必须以性命来交换</p><p>那么， </p><p>所有个人的伟大，都在说着一个国家的卑劣</p><p><br></p><p>——</p><p><br></p><p>宁愿不要英雄，也不愿发生悲剧。</p><p><br></p><blockquote><p>出处：<a href="https://moptt.tw/p/poem.M.1525106942.A.892" target="_blank" rel="noopener">https://moptt.tw/p/poem.M.1525106942.A.892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我不要听英雄的故事，&lt;/p&gt;
&lt;p&gt;我不要阅读可歌可泣的篇章&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;我不要听身障人士力争上游与家人的牺牲， &lt;/p&gt;
&lt;p&gt;我要各式各样的人都拥有自在生活的空间&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;我不要帮为了家庭放弃梦想的女人鼓掌，&lt;/p
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="诗歌" scheme="/blog/tags/%E8%AF%97%E6%AD%8C/"/>
    
      <category term="现代诗" scheme="/blog/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
      <category term="郭可盼" scheme="/blog/tags/%E9%83%AD%E5%8F%AF%E7%9B%BC/"/>
    
  </entry>
  
  <entry>
    <title>我和小猫的故事</title>
    <link href="/blog/2020/01/14/%E6%88%91%E5%92%8C%E5%B0%8F%E7%8C%AB%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>/blog/2020/01/14/%E6%88%91%E5%92%8C%E5%B0%8F%E7%8C%AB%E7%9A%84%E6%95%85%E4%BA%8B/</id>
    <published>2020-01-14T14:42:29.000Z</published>
    <updated>2020-01-15T01:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>晚上从食堂买饭回来，远远地看到宿舍楼下大门外蹲着一只猫。</p><p>准确点形容的话，我应该说“蜷缩着”才对。因为一月的北方很冷，冷得我连下楼买早饭吃的想法都没了。另外，昨天下了一场雨，让天气更凉了几分。也不知道昨夜小猫在哪里躲的雨。</p><p>这只小猫我不陌生，在过去的一年里我时有见到它。当然，都是在宿舍楼下大厅外的门檐下。我还隐约记得我第一次见到它时，略感惊讶地对室友说：「哎，你看，门口有只猫。」然后就推门上楼了。小猫它就在门口蹲着，转动着可爱的脑袋看我们这群人进进出出。我当时并不知道小猫为什么要蹲在这里。现在如果要想一下的话，很容易就猜出来：小猫是饿了、没有食物才来到宿舍门口“乞食”。但我当时连花一秒钟想一下都未曾有过。</p><blockquote><p>读者你注意，从这里就可以看出我是一个冷漠的人，潜意识里我对其他动物（包括可爱的猫咪）、乃至生命的态度是浅薄、冷漠的。尽管在看到<a href="https://www.zhihu.com/question/59408430" target="_blank" rel="noopener">虐猫新闻</a>时也会发出「愤怒」、「难以想象」这样的评论，但读者须知，这评论是基于「理性/逻辑」而不是「感性」。因为理性告诉我，作为一个正常人，对「虐待」行为应该如此「反应」。而不是我真的从新闻感受到了「猫被伤害的痛苦」。不，我感受不到，至少隔着屏幕感受不到。我或许发表完评论就忙其他的事情了，在一秒钟内就忘掉了新闻。但，我偶尔也会有恻隐之心。后面会提到。</p></blockquote><p>我之前在白天很少在门口见到小猫，除了那次。</p><p>这得从前一天晚上说起。那天晚上我照常和室友买晚饭回来，看到有一位同学在宿舍门口蹲着，小猫在他面前吃着什么东西，相比是猫粮之类的食物吧。「他是一个好人」，我在心里想着，然后推门就上楼了。</p><p>第二天中午在出门买饭的时候，看到了小猫。小猫又饿了。它就蹲在昨晚的位置，看着我们。它应该在等昨晚那位同学吧。我在买饭回来的时候那位同学还没有出现。是他也没有东西可喂了还是像我一样了呢？</p><p>这个问题我晚上时就有了答案。因为我又一次看到小猫在门口地上吃着什么东西，而昨晚的同学蹲在它面前看着这一切。那晚，我感受到了叫「惭愧」的东西。面对一只没有食物可吃的小猫，晚上可能要饿着睡觉，甚至可能第二天也要饿着，直到找到还不知道在哪里的食物。我无动于衷，冷漠地让这发生。那位同学的行为，让我觉得自愧不如。他身上有着一个正常的、完整的人身上该有的东西，而我没有。我也想做些什么，这样就可以欺骗自己也有那个东西。</p><p>几天后，机会来了。</p><p>那天，下了一场雨。北方的春天白天温度还高些，但晚上就很冷了。因此我在晚上买饭回来看到小猫紧紧地蜷缩在门口时，决定该有所行动了。回到宿舍后，和室友说了下我的想法「用纸箱子和不要的衣服给小猫做一个暖和小窝」，室友Q表示支持。因此我们找了一个空箱子，每个人都翻出不穿的衣服，做好了小窝。为了防止小窝被别人拿走，我还用笔写了些类似「请不要拿走！」的文字用胶带贴在了箱子显眼处。最后我们把小窝放在了楼下门口墙边，雨水淋不到。我把小猫抱起来放到小窝里，但它立刻就跑了出来，跑到一边。看到它谨慎的样子，我知道除了等就没办法了。等了一会儿它还没有跑到窝里的意思，我就和室友上楼了，并希望在这寒冷的夜里，小窝能对小猫有帮助。</p><p>第二天中午室友买饭回来，说小窝不见了时，我很生气（是真实的、自然的情绪）。因为我明明在显眼处写上了「请不要拿走！」我下楼买饭时在附近找了下，发现小窝其实没有被拿走，只是移到了附近一个不显眼的地方。我稍微安心了些，便在后面的几天忘了此事。后来差不多一周之后，我又想起了此事，便去那个地方看了一下。箱子没了。我不知道是谁拿走了它。可能是宿管，也可能是楼下时不时出现捡废品的人。</p><p>后来就很少见小猫了，所以我也差不多把它忘了。在后面的时间里：我依旧照常上课、吃饭、和同学玩游戏、写代码，还找了份实习。前两天我刚从珠海回来，因为马上就要期末考试了。</p><p>今天晚上我从食堂买饭回来，远远地看到宿舍楼下大门外蹲着一只猫。我知道，应该是那只小猫。走近了更是确定是那只。我赶紧从袋子里的馒头上掰了一块，放到地上给它吃，心里有些激动，「我要做好事了」我想着。</p><p>但小猫只是伸出头嗅了嗅，起身伸了个懒腰，然后蹲到了另一边…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;晚上从食堂买饭回来，远远地看到宿舍楼下大门外蹲着一只猫。&lt;/p&gt;
&lt;p&gt;准确点形容的话，我应该说“蜷缩着”才对。因为一月的北方很冷，冷得我连下楼买早饭吃的想法都没了。另外，昨天下了一场雨，让天气更凉了几分。也不知道昨夜小猫在哪里躲的雨。&lt;/p&gt;
&lt;p&gt;这只小猫我不陌生，在过
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="猫" scheme="/blog/tags/%E7%8C%AB/"/>
    
      <category term="校园" scheme="/blog/tags/%E6%A0%A1%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>实习好忙｜前端埋点之曝光实现</title>
    <link href="/blog/2019/12/26/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E4%B9%8B%E6%9B%9D%E5%85%89%E5%AE%9E%E7%8E%B0/"/>
    <id>/blog/2019/12/26/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E4%B9%8B%E6%9B%9D%E5%85%89%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-12-26T13:55:37.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个工作需求是曝光埋点，让我得以有机会接触相关的东西。之前实习时没有做过这方面的需求，个人项目更是和埋点扯不上关系。以至于上周开会讨论时听到“埋点”这个词就怂了。</p><p>不过后面听大佬分析了下后才意识到，原来“埋点”是这个意思。曝光埋点的思路也是很简单：无非是判断某个DOM是否出现在视窗中，出现了就收集数据上报给服务端。</p><blockquote><p>所谓“埋点”，是数据采集领域（尤其是用户行为数据采集领域）的术语，指的是针对特定用户行为或事件进行捕获、处理和发送的相关技术及其实施过程。比如用户某个文章点击次数、观看某个视频的时长等等。</p></blockquote><p>再说「曝光埋点」，它与「图片懒加载」「计算广告浏览量」这些需求一样，本质就是让你计算某一元素和另一元素（视窗）的相对可视状态/相对位置，然后进行一些操作（一般是上报给服务端）。</p><h4 id="思考如何实现"><a href="#思考如何实现" class="headerlink" title="思考如何实现"></a>思考如何实现</h4><p>最先出现在脑海里的方法是利用<code>getBoundingClientRect</code> / <code>offset类</code> + <code>onscroll</code>。即：注册滚动事件，然后在滚动的回调函数中利用<code>getBoundingClientRect</code> / <code>offset类</code>拿到每个元素的位置信息，然后经过判断确定是否元素处于曝光状态/视窗中。</p><p>但这种方式有很大的缺陷。如果你熟悉<a href="https://segmentfault.com/a/1190000017329980" target="_blank" rel="noopener">浏览器的渲染过程</a>的话，就会知道调用<code>getBoundingClientRect</code> / <code>offset类</code>会引起浏览器的回流重绘，影响网页表现/性能。频繁、大量调用更不是一个妥当的选择。</p><p>我开始尝试在社区找找看有没有其他更妥当的方法，还真被我找到了：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">Intersection Observer</a></p><h4 id="Intersection-Observer"><a href="#Intersection-Observer" class="headerlink" title="Intersection Observer"></a>Intersection Observer</h4><p>它提供了一种<strong>异步</strong>观察目标元素与祖先元素或顶级文档Viewport的<strong>交集变化</strong>的方法。也就是说，不仅可以用来获得相对于<strong>视窗</strong>的曝光，可以做得更多，这取决于“另一个元素”是什么。</p><p><code>Intersection Observer</code>将本来是开发者做的：监听滚动、遍历获取元素与另一个元素（或视窗）相对位置的工作给做了。这两块工作是页面性能损耗大户，现在交给浏览器来实现，会比我们开发者来做要妥当的多。开发者现在只需要关心其他业务逻辑即可 😁</p><p>那这么好用的API，它的兼容性状况如何呢？</p><p><img src="https://i.imgur.com/bHh0N4R.jpg" alt="不见图请翻墙"></p><p>还不错，但兼容性方面要求高的话还是不能让人放心使用。</p><p><strong>Polyfill</strong></p><p>但不用担心，我们有polyfill。W3C提供了一个<a href="https://github.com/w3c/IntersectionObserver" target="_blank" rel="noopener">polyfill</a>，当浏览器不支持时使用常规解决方案替代。它的思路就是在检测到当前浏览器不支持<code>Intersection Observer API</code>时，使用<a href="https://github.com/w3c/IntersectionObserver/blob/cd18b01234ae2dfbdee81af2c23885dd562e3e11/polyfill/intersection-observer.js#L329" target="_blank" rel="noopener"><code>getBoundingClientRect</code></a>去重新实现一遍<code>Intersection Observer API</code>。</p><p>那么使用了该Polyfill后，浏览器兼容性状况如何呢？</p><p>非常棒！ 😎（IE7都支持了，还想啥呢，大兄弟。）</p><p><img src="https://i.imgur.com/wUxlGeb.jpg" alt="不见图请翻墙"></p><h4 id="曝光实现步骤"><a href="#曝光实现步骤" class="headerlink" title="曝光实现步骤"></a>曝光实现步骤</h4><p>思路就像上面一再提到的，很简单：</p><ol><li><code>new IntersectionObserver()</code>实例化一个全局<code>observer</code>，（结合Vue指令）让每个DOM自行把自己加入到<code>observer</code>的观察列表。</li><li>当某个DOM进入视窗，收集对应的信息，上报。</li><li>取消对该DOM的观察。</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>Exposure.ts 封装成类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'intersection-observer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Exposure &#123;</span><br><span class="line">    <span class="keyword">private</span> observer: IntersectionObserver | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> init() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">            (entries, observer) =&gt; &#123;</span><br><span class="line">                entries.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.isIntersecting) &#123;</span><br><span class="line">                        <span class="keyword">const</span> data = item.target.getAttribute(<span class="string">'data-article'</span>);</span><br><span class="line">                        self.upload(data);</span><br><span class="line">                        observer!.unobserve(item.target);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                root: <span class="literal">null</span>,</span><br><span class="line">                rootMargin: <span class="string">'0'</span>,</span><br><span class="line">                threshold: <span class="number">0.1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> add(el: Element) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observer &amp;&amp; <span class="keyword">this</span>.observer.observe(el);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> upload(data: <span class="built_in">string</span> | <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            <span class="comment">// ajax上报数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>directive/exposure.ts 封装Vue指令</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Exposure <span class="keyword">from</span> <span class="string">'@/lib/Exposure'</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> exposure = <span class="keyword">new</span> Exposure();</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'exposure'</span>, &#123;</span><br><span class="line">    bind(el) &#123;</span><br><span class="line">        exposure.add(el);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>*.vue 使用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-exposure :data-article=&apos;article&apos;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有一个工作需求是曝光埋点，让我得以有机会接触相关的东西。之前实习时没有做过这方面的需求，个人项目更是和埋点扯不上关系。以至于上周开会讨论时听到“埋点”这个词就怂了。&lt;/p&gt;
&lt;p&gt;不过后面听大佬分析了下后才意识到，原来“埋点”是这个意思。曝光埋点的思路也是很简单：无非是
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="埋点" scheme="/blog/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="曝光" scheme="/blog/tags/%E6%9B%9D%E5%85%89/"/>
    
      <category term="Intersection Observer" scheme="/blog/tags/Intersection-Observer/"/>
    
  </entry>
  
  <entry>
    <title>解锁网易云音乐歌单版权地区限制｜使用Proxifier｜开机自启动Shell</title>
    <link href="/blog/2019/12/12/%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E7%89%88%E6%9D%83%E5%9C%B0%E5%8C%BA%E9%99%90%E5%88%B6%EF%BD%9C%E4%BD%BF%E7%94%A8Proxifier%EF%BD%9C%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8Shell/"/>
    <id>/blog/2019/12/12/%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E7%89%88%E6%9D%83%E5%9C%B0%E5%8C%BA%E9%99%90%E5%88%B6%EF%BD%9C%E4%BD%BF%E7%94%A8Proxifier%EF%BD%9C%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8Shell/</id>
    <published>2019-12-12T05:37:40.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>那天我像往常一样打开网易云音乐，点击首页那张之前创建的中岛美雪的歌单，然后看到了这个：</p><p><img src="https://i.imgur.com/OZClAAE.jpg" alt="不见图请翻墙"></p><p>满屏的灰色打破了我镇定的情绪。</p><p>我决定开始行动。</p><hr><p>一顿搜索之后发现了这个解决方案：<a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">UnblockNeteaseMusic </a>，赞美作者：<a href="https://github.com/nondanee" target="_blank" rel="noopener">nondanee</a> </p><p>它的思路是：</p><ol><li>使用 QQ / 虾米 / 百度 / 酷狗 / 酷我 / 咪咕 / JOOX 音源替换变灰歌曲链接</li><li>为请求增加 <code>X-Real-IP</code> 参数解锁海外版权限制。（因为有些歌曲在国外是可以正常听的）</li></ol><p>下面是教程正文</p><hr><h4 id="1、安装项目运行环境（Node-js）"><a href="#1、安装项目运行环境（Node-js）" class="headerlink" title="1、安装项目运行环境（Node.js）"></a>1、安装项目运行环境（Node.js）</h4><p><strong>Windows</strong></p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a><br>下载 .msi 安装包并安装</p><p><strong>macOS</strong></p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a><br>下载 .pkg 安装包并安装</p><p><strong>Linux</strong></p><p><a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">Installing Node.js via package manager | Node.js</a></p><blockquote><p>当然用 macOS 的 Homebrew，Windows 的 Scoop 等包管理器安装也可以，根据个人喜好选择即可。</p><p>Android 平台的终端模拟器如 Termux，NeoTerm 等也可以安装 Node.js，教程非常多，请善用搜索引擎。</p></blockquote><h4 id="2、下载项目｜两种方法"><a href="#2、下载项目｜两种方法" class="headerlink" title="2、下载项目｜两种方法"></a>2、下载项目｜两种方法</h4><ol><li><p>使用 Git 克隆</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nondanee/UnblockNeteaseMusic.git #克隆项目仓库</span><br><span class="line">cd UnblockNeteaseMusic #进入项目根目录</span><br></pre></td></tr></table></figure></li><li><p>手动下载源码压缩包：在<a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">项目首页</a>点击 Clone or download 绿色按钮，选择 Download ZIP 并解压</p></li></ol><p>P.S. 项目不需要安装任何依赖（前端同学不要手快<code>npm install</code>或者<code>yarn</code>）。</p><p>使用此项目存在两种方法，或者说两种模式。下面分别介绍：</p><h4 id="3-1、方法1代理模式（亲测可用）"><a href="#3-1、方法1代理模式（亲测可用）" class="headerlink" title="3.1、方法1代理模式（亲测可用）"></a>3.1、方法1代理模式（亲测可用）</h4><p><strong>首先配置Proxifier</strong></p><p>添加一个后面用到的Proxies：只需要填<code>Addresss</code> <code>Port</code> <code>Protocol</code>，其他的空着。</p><p><img src="https://i.imgur.com/xMZ1L74.jpg" alt="不见图请翻墙"></p><p>然后添加一个Rules：注意那个+按钮，点击后选择网易云音乐，然后Applications框里就会出现内容。我们的内容或许不同，没问题。其他地方和我这边保持一致即可。Action选择你在上一步添加的那个。</p><p><code>*.music.126.net;*.music.163.com;mam.netease.com;api.iplay.163.com</code></p><p><img src="https://i.imgur.com/KWdqjEc.jpg" alt="不见图请翻墙"></p><p>接着Rules右边的 <code>DNS</code> 部分，选择<code>Resolve hostname through proxy</code>，其余地方默认即可。</p><p><strong>最后，在命令行启动作者的项目：</strong><code>node app.js</code></p><p>现在我们打开网易云客户端会发现，已经可以听因为版权而灰掉的音乐了～</p><p><img src="https://i.imgur.com/Cln5oQ4.jpg" alt="不见图请翻墙"></p><h4 id="3-2、方法2Hosts模式（亲测失效）"><a href="#3-2、方法2Hosts模式（亲测失效）" class="headerlink" title="3.2、方法2Hosts模式（亲测失效）"></a>3.2、方法2Hosts模式（亲测失效）</h4><p>因此不做介绍，感兴趣点击<a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22#issuecomment-429514826" target="_blank" rel="noopener">这里</a>了解。</p><h4 id="4、设置开机自动运行程序"><a href="#4、设置开机自动运行程序" class="headerlink" title="4、设置开机自动运行程序"></a>4、设置开机自动运行程序</h4><p>有没有觉得每次开机都要跑到项目目录下，然后命令行运行<code>node app.js</code>，很烦人？</p><p>觉得“没有”的同学，可以关掉本页面了～</p><p>思路是写一个shell脚本，脚本里是运行项目的命令，然后在系统设置开机时自动运行此shell脚本。下面是过程：</p><ol><li><p>在作者项目目录下新建<code>launch.sh</code>文件，然后写下此脚本：</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line"><span class="built_in">cd</span> /Users/xxxxxx/UnblockNeteaseMusic <span class="comment"># 这一行是cd到作者项目的目录，你那边肯定和我的路径不一样，不能照抄。</span></span><br><span class="line">nohup node app.js -p 8080:8081 &amp;  <span class="comment"># 注意有个 -p 8080:8081</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 必须加上此命令，目的是正常退出当前shell。原因请看这篇文章：https://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你会注意到上面有个nohup命令，它是让命令行程序可以运行在后台的工具（因为一般在终端运行脚本时，得保持终端开启。关掉终端意味着结束脚本运行。但nohup让脚本可以在终端关闭后可以持续运行。）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#P.S. 貌似OSX系统自带有nohup命令，无需安装。</span></span><br></pre></td></tr></table></figure></li><li><p>赋予此脚本管理员权限：<code>sudo chmod 777 launch.sh</code></p></li><li><p>打开系统设置、用户与群组、登录项：添加上面那个脚本进来。<img src="https://i.imgur.com/UNUgdQP.jpg" alt="不见图请翻墙"></p></li><li><p>右键此脚本文件，点击“显示简介”，设置“打开方式”为自己的终端程序（iTerm也行）。</p></li><li><p>重启测试。</p></li></ol><blockquote><p>所有的折腾（一晚上+中午两小时）都是值得的。（比如可以水一篇博客23333）</p></blockquote><p><strong>更新</strong></p><blockquote><p>2020-2-24：此更新仅建议开发者浏览，因为对普通用户来说这其实有点折腾。</p></blockquote><p>对于「4」，现在有了更优雅的解决方法，那就是神奇的命令行工具：<code>pm2</code>。</p><ol><li><p>使用<code>npm</code>（开头安装完<code>Node.js</code>后就已经有了）安装<code>pm2</code>：<code>npm install pm2 -g</code></p></li><li><p>命令行<code>cd</code>到插件根目录（比如我的）：<code>cd /Users/shuirong/UnblockNeteaseMusic</code></p></li><li><p>创建一个 <code>launch.sh</code>文件，并将下列内容复制进去：</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line"><span class="built_in">cd</span> /Users/shuirong/More/UnblockNeteaseMusic  <span class="comment">#这个路径换成你自己的</span></span><br><span class="line">node app.js -p 8082:8081</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pm2</code>来启动它：<code>pm2 start bash ./launch.sh</code></p></li><li><p>启动<code>pm2</code>的钩子：<code>pm2 startup</code></p></li><li><p>这时很可能<code>pm2</code>会展示给你几行英文，注意这么一句：<code>copy/paste the following command:</code>，那么就需要你粘贴复制它下面的命令，然后在命令行运行即可。这一步的教程也可以看<a href="https://www.jianshu.com/p/8e681759544a" target="_blank" rel="noopener">这里</a>。</p></li><li><p>最后将状态保存起来：<code>pm2 save</code></p></li><li><p>ok</p></li></ol><p>现在可以关掉终端，甚至重启电脑测试下了（亲测可行）。（对了，使用此方法时别忘了将步骤「4」在系统设置的东西取消掉哦～）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;那天我像往常一样打开网易云音乐，点击首页那张之前创建的中岛美雪的歌单，然后看到了这个：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/OZClAAE.jpg&quot; alt=&quot;不见图请翻墙&quot;&gt;&lt;/p&gt;
&lt;p&gt;满屏的灰色打破了我镇定的情绪。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="GFW" scheme="/blog/tags/GFW/"/>
    
      <category term="碎碎念" scheme="/blog/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="翻墙" scheme="/blog/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="科学上网" scheme="/blog/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>不读书的后果(滑坡谬误)</title>
    <link href="/blog/2019/08/02/%E4%B8%8D%E8%AF%BB%E4%B9%A6%E7%9A%84%E5%90%8E%E6%9E%9C-%E6%BB%91%E5%9D%A1%E8%B0%AC%E8%AF%AF/"/>
    <id>/blog/2019/08/02/%E4%B8%8D%E8%AF%BB%E4%B9%A6%E7%9A%84%E5%90%8E%E6%9E%9C-%E6%BB%91%E5%9D%A1%E8%B0%AC%E8%AF%AF/</id>
    <published>2019-08-02T08:53:45.000Z</published>
    <updated>2019-08-02T08:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22658523&auto=0&height=66"></iframe><blockquote><p>本文的创作灵感来自于<a href="https://www.bilibili.com/video/av38713206/" target="_blank" rel="noopener">美国创意广告－有线电视信号太烂的后果</a>。</p><p>同时此广告/本文也是<a href="https://zh.wikipedia.org/zh/滑坡謬誤" target="_blank" rel="noopener">滑坡谬误</a>的典型示例。</p></blockquote><ol><li>你不读书，你喜欢的女生问你”生命、宇宙以及一切事物的终极答案是什么？”时，你就回答不上来。你回答不上来，女生对你的好感就会大大降低。女生对你的好感就会大大降低，你在表白时就会遭到拒绝。为了能有女朋友，你应该读书。</li><li>你不读书，你就会觉得精神无聊，然后开始去网吧玩英雄联盟。你开始去网吧玩英雄联盟，就会停不下来，一直玩下去。你一直玩下去，就会猝死。为了好好活下去，你应该读书。</li><li>你不读书，就没人愿意和你做朋友。没人愿意和你做朋友，你就会不修边幅，宅在家里。你不修边幅，宅在家里，你父母就会嫌弃你。你父母嫌弃你，你就会备受打击。你备受打击，你就会觉得活着没有意思，最后决定跳楼。不要跳楼，你应该读书。</li><li>你不读书，就会异想天开。你异想天开，就会觉得倒着走路去上班很有意思。你倒着走路去上班，就会被汽车撞断腿。不要一辈子坐在轮椅上，你应该去读书。</li><li>你不读书，就会在批改学生的试卷时出错。你在批改学生的试卷时出错，就会遭到学生记恨。你遭到学生记恨，你的汽车车胎就会被扎破。不要让自己的汽车车胎被扎破，你应该去读书。</li><li>你不读书，在看新闻联播时就会深信不疑。你在看新闻联播时就会深信不疑，你就会觉得国外人民都生活在水深火热之中。你觉得国外人民都生活在水深火热之中，你就会想支援国际共产主义。不要支援国际共产主义，你应该读书。</li><li>你不读书，在和别人争论时就会争论不过别人。你争论不过别人，就会出手打他。你出手打他，就会被他的朋友围殴。不要被人围殴，你应该读书。</li><li>你不读书，就不知道鲁迅是谁。你不知道鲁迅是谁，就会在文学课上听到老师讲鲁迅时提出这个愚蠢的问题。你提出这个愚蠢的问题，就会被全班人嘲笑。不要别人嘲笑，你应该读书。</li><li>你不读书，就会觉得生活没有意义。你觉得生活没有意义，就会去女朋友家寻求安慰。你去女朋友家寻求安慰，就会发现让你痛不欲生的事。你发现让你痛不欲生的事，就会觉得生活更没有意义，然后你就会选择卧轨自杀。不要卧轨自杀，你应该读书。</li><li>你不读书，就会经常性地觉得无助。你觉得无助，就会想要摆脱无助感。你想要摆脱无助感，你就会去学习跆拳道。你去学习跆拳道，你就会想学以致用。你想学以致用，你就会学习侠客，开始昼伏夜出。你昼伏夜出，你就会掉到下水道里。不要掉到下水道里，你应该读书。</li></ol><p><strong>欢迎大家贡献示例！期待大家的奇思妙想，我收集后会署名添加进来</strong></p><blockquote><p>通过邮件：<a href="mailto:shuirong1997@icloud.com" target="_blank" rel="noopener">shuirong1997@icloud.com</a>    </p><p>通过微博：<a href="https://www.weibo.com/6871008101/profile" target="_blank" rel="noopener">https://www.weibo.com/6871008101/profile</a></p><p>通过Github Issues：<a href="https://github.com/shuiRong/shuiRong.github.io/issues" target="_blank" rel="noopener">https://github.com/shuiRong/shuiRong.github.io/issues</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="滑坡谬误" scheme="/blog/tags/%E6%BB%91%E5%9D%A1%E8%B0%AC%E8%AF%AF/"/>
    
      <category term="读书" scheme="/blog/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="好玩" scheme="/blog/tags/%E5%A5%BD%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>我也谈翻墙经历</title>
    <link href="/blog/2019/08/01/%E6%88%91%E4%B9%9F%E8%B0%88%E7%BF%BB%E5%A2%99%E7%BB%8F%E5%8E%86/"/>
    <id>/blog/2019/08/01/%E6%88%91%E4%B9%9F%E8%B0%88%E7%BF%BB%E5%A2%99%E7%BB%8F%E5%8E%86/</id>
    <published>2019-08-01T12:39:22.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=63791&auto=0&height=66"></iframe><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>大概是在10年前，那时我初中。</p><p>对墙的全部认识只是隐约知道有个网站叫谷歌，它是个在中国不能上的网站。</p><p>“哇，这个网站如此神秘的吗？”</p><p><strong>这种神秘感引发的好奇心和为了在同学面前装逼的虚荣心促使我学会了翻墙</strong>，用的是”自由门”和”无界”。（好像是在百度里搜到的）</p><p>但是这种不是由”需求”驱动的翻墙行为注定只是昙花一现。很快，装完逼后我就不翻墙了。因为不知道翻墙后干什么，觉得没必要。</p><p>使用无界/自由门翻墙成功后，会弹出他们的官网：<a href="http://www.wujieliulan.com/" target="_blank" rel="noopener">无界浏览</a>/<a href="http://dongtaiwang.com/loc/phome.php?v=0" target="_blank" rel="noopener">动态网</a>。刚又看了下，嗬，网站风格十年没有变…</p><p><img src="https://i.imgur.com/ozEe3ut.jpg" alt="不见图请翻墙"></p><p>如果无界浏览/动态网存在的目的是吸引用户看上面的文章的话，那他们的效果都会因为糟糕的界面设计和展示的”内容”而大打折扣。</p><ol><li>糟糕的界面设计：<strong>上古风格</strong>的网页会让人第一印象大打折扣，没有看下去的欲望好嘛。</li><li>内容：醒目位置有这样的文字 “禁#书$禁片”、”共+主*产义的终极目的”、”退+D+保平安”…这些内容对于翻墙新人来说太过骇人，很容易起到反效果，结果就是大概率直接关掉网页。</li></ol><blockquote><p>补充2: 你想啊，在接受了十几年、数十年单方面的”灌输教育”之后，突然接触到完全反面的东西，他的<a href="[https://zh.wikipedia.org/wiki/%E5%BF%83%E7%90%86%E9%98%B2%E5%8D%AB%E6%9C%BA%E5%88%B6](https://zh.wikipedia.org/wiki/心理防卫机制">“自我防卫机制”</a>)就会自动触发，会认为你这些都是假的、错误的，而加强过去教育中接受的观念。</p><p>这很容易理解。否则要不呢？立刻接受你的东西，然后开始怀疑过去数十年里接受的观念？这种情况不说没有，只能说极少。</p></blockquote><p>但为什么不干脆弹出<a href="https://www.bbc.com/zhongwen/simp" target="_blank" rel="noopener">BBC中文</a>的主页呢？理由如下：</p><ol><li>界面设计美观。美观的东西谁不想多看两眼呢？</li><li>文章立场比较中立，不易使人反感。</li><li>BBC的大名在国内比较知名与权威，这会使翻墙新人更容易去看它的文章，进而…</li></ol><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>真正开始翻墙是在高中时期</p><p>那时我经常刷知乎。有次看到一个视频：<a href="https://study.163.com/course/introduction/1003524039.htm" target="_blank" rel="noopener">斯坦福大学创业课：Instagram 故事</a>。看完之后立刻去App Store下载了个Instagram，发现不能正常使用（结合之前在知乎上了解到的墙的信息），就去Store下载了免费的VPN，愉快地刷了起来。然后同时注册了Twitter、Facebook，但玩了几天之后发现融入不进去/不习惯就删掉了。</p><p>后来在班里无意中发现一位女生也知道Instagram，但她不知道怎么翻墙。于是乎…</p><p><strong>这是我第一次将”翻墙”的伟大行为传授给其他人（噗）。它带给了我巨大的成就感，满足了我莫名其妙的虚荣心，让我觉得自己到底还是能帮助到别人的，自己果然是一个能对社会作出贡献的青年…（扯不下去了）</strong></p><p>我要感谢一位站长：<a href="https://laod.cn/hosts/2019-hosts.html" target="_blank" rel="noopener">老D</a>，他的Hosts翻墙页面长期更新，在当年还能使用hosts翻墙的时候让我与其他人通过简单的配置就可以接触到墙外的世界。</p><blockquote><p>贴出Windows下刷新DNS的命令，相信使用过此方法的人会感到亲切：</p><p><code>ipconfig/flushdns</code></p></blockquote><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>大学时期是我走向”日常翻墙”、”随时/随手翻墙”的时期。</p><p><strong>让我真正、完全地意识到<a href="https://google.com" target="_blank" rel="noopener">Google</a>和百度的区别的是我平时在解决日常中遇到的编程方面问题的时候。</strong></p><p>某学姐：”Google能搜到国内网站的内容吗？”</p><p>我：”能”</p><p>某学姐：”那既然Google和百度都能搜到国内网站的内容，我为什么要用Google？”</p><p><strong>在看博客的你，知道为什么吗？</strong></p><details> <summary>答案点我</summary>因为尽管他俩都能搜到国内的信息，但准确度有非常大的区别。相同关键词，百度第一页很可能就没有答案或者在第一页的后面才有答案，这时从上面一个个找过来的你已经浪费了不少的时间了。更不说百度搜索结果的前排还有好多广告…<br>Google的话基本能在搜索结果的前几条里找到你想要的。<br>如果你不觉得每次搜索都浪费十几分钟、甚至几十分钟是很重要的问题的话，那接着用百度好了。<br>这还仅仅是技术问题，生活中其他方面的问题呢？想想魏则西吧!!!</details><p><strong>但真正让我意识到”翻墙”这一行为的深层意义与价值的是编程随想的<a href="https://program-think.blogspot.com/2019/03/Why-Thinking-Hard-So-Hard.html" target="_blank" rel="noopener">博客</a>。</strong></p><blockquote><p>顺便一提。自从知道他的博客后，花了大概一周的时间把他几乎所有非技术类的文章都看完了。</p></blockquote><p>也是从那时起，我开始关心时事，开始反思周围的生活：</p><ol><li>我开始思考当初我妈对我说的话「为什么老师光找你而不找其他人（的事儿）？」这看似合理其实荒谬的话，到底荒谬在哪里。</li><li>看到影视剧里有人说”我就说嘛，XXX有做Y的天赋，当初就看出来了”时，我开始怀疑并思考他到底是当初真如此看待，还是”马后炮”。</li><li>看到《红与黑》里，于连在和A主教聊天时将B主教的观点据为己有时。我在想假如较真地刨根问底，一个人能有几个观点是属于自己的呢？这似乎有点可怕。</li><li>看完《十三邀：马东》那一期后，顺手搜了篇<a href="http://news.ifeng.com/a/20170831/51823859_0.shtml" target="_blank" rel="noopener">相关文章</a>来看，文章说「马东的本我是真的很可爱，青春期饱读《红楼梦》」。但是节目中马东说只是「读过」。「读过」和「饱读」太不一样了。一个不熟悉马东，也没看过这期节目的人可以对 “马东读书” 这方面产生相去甚远的印象。然后我又开始怀疑生活中到底他喵的还有多少这种”巧言令色”。</li><li>…</li></ol><p>当然，也开始行动。</p><p>我开始在朋友、同学之间普及翻墙。有人喜欢看视频/直播，我就安利Youtube。女生的话，我也可以安利Instagram。日常看到的精彩文章，我也会贴到群里，并附上精彩段落，吸引他们看…</p><blockquote><p>到目前为止，自己主动翻墙的有好几个了～😂</p></blockquote><p>我也开始鄙视那些不会翻墙的程序员，想用这种方法刺激他们学会翻墙。希望有效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="/blog/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="GFW" scheme="/blog/tags/GFW/"/>
    
      <category term="碎碎念" scheme="/blog/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="翻墙" scheme="/blog/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="科学上网" scheme="/blog/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Github：最后的言论自由之地</title>
    <link href="/blog/2019/05/10/Github%EF%BC%9A%E6%9C%80%E5%90%8E%E7%9A%84%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1%E4%B9%8B%E5%9C%B0/"/>
    <id>/blog/2019/05/10/Github%EF%BC%9A%E6%9C%80%E5%90%8E%E7%9A%84%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1%E4%B9%8B%E5%9C%B0/</id>
    <published>2019-05-10T10:21:02.000Z</published>
    <updated>2019-05-17T13:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=780146&auto=0&height=66"></iframe><blockquote><p>奇葩的制度产生奇葩的社会现象</p></blockquote><p>有一个争论已经持续了很多年，而且在可见的未来它还将持续下去…</p><h4 id="自由之地"><a href="#自由之地" class="headerlink" title="自由之地"></a>自由之地</h4><hr><p><a href="http://github.com/" target="_blank" rel="noopener">Github</a>在天朝是一个很“神奇”的存在。神奇之处在于：</p><ol><li>它不受天朝政府监管：只要没有违反Github的<a href="https://help.github.com/en/articles/github-terms-of-service" target="_blank" rel="noopener">服务条款</a>，Github欢迎<a href="https://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/" target="_blank" rel="noopener">任何内容</a></li><li>它没有被GFW屏蔽：用户可以直连</li></ol><p>的确，Github曾被至少两次<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9GitHub%E7%9A%84%E5%AE%A1%E6%9F%A5%E5%92%8C%E5%B0%81%E9%94%81" target="_blank" rel="noopener">短暂屏蔽</a>过。但是，由于屏蔽引发了用户和科技公司的强烈反应「1」，政府最终解除了对GitHub的屏蔽。</p><blockquote><p>「1」：李开复在新浪微博抗议，迅速引起网民的关注，该消息更在三小时内被转发逾3万2千次。2013年1月23日，GitHub被解封，事件平息。</p></blockquote><p>因此当社会性事件发生，但国内的社交网络（微博、知乎、论坛…）、即时通讯应用（微信、QQ）在大规模审查、删帖时，就有人想到了Github。于是人们把那些图片、文章、视频上传到Github来逃脱被删除的命运。</p><p>开头提到的争论也因此产生。（由<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384553049" target="_blank" rel="noopener">@wql7013 总结</a>）</p><p><strong>一些人觉得这些内容可以上传至GitHub：</strong></p><ol><li>不违反GitHub条款；不违反GitHub文化；由于国内媒体被限制，致使GitHub传播效率相对更优；在GitHub上此项目并非唯一的非技术项目，也并非唯一的政治敏感项目。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384175435" target="_blank" rel="noopener">详细参看@karkenhavedream</a></li><li>即使GitHub被墙，翻墙就行了，翻墙是程序员必备技能。</li><li>曾经有人总结了GitHub的非程序员用法：<a href="https://www.itworld.com/article/2822952/open-source-tools/142227-Gitty-up-12-things-other-than-programming-code-that-are-managed-on-GitHub.html" target="_blank" rel="noopener">12种非编程的GitHub用法</a>，<a href="https://readwrite.com/2013/11/08/seven-ways-to-use-github-that-arent-coding/" target="_blank" rel="noopener">7种非写代码的GitHub用法</a>。</li><li>自由、开方、平等、互助、反对强权是互联网精神，也是GitHub文化；GitHub不只是用来拷贝代码的。</li><li>程序员不应该只关心编程，应该有社会责任。</li><li>Facebook、Twitter国内不能访问，对国内起不到传播作用；Facebook、Twitter、论坛、贴吧也有人在讨论。</li><li>GitHub被墙不是项目发起者的错，是封锁GitHub的人的错，应该抱怨的是网络审查。</li><li>GitHub官方曾表示，很高兴GitHub能用于政府协同治理；官方博客提到，GitHub上有不少政府项目，包括代码、数据、政策、行业规范、法律法规、活动反馈等，方便民主监督（<a href="https://blog.github.com/2014-08-14-government-opens-up-10k-active-government-users-on-github/" target="_blank" rel="noopener">GitHub官方博客</a>）。</li><li>Git仓库很适合用于多人协作管理文档版本，协作收集整理资料，此项目的主要作用是整理记录事件；Twitter等网站没有此功能。</li><li>更多此类repo是社会的进步，但是GitHub应该优化排行榜（Trending），分类技术和非技术类项目。</li></ol><p><strong>另一些人觉得不可以：</strong></p><ol><li>只希望GitHub是用来写代码的，不希望GitHub受影响，从而影响国内互联网行业。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/534#issue-317498800" target="_blank" rel="noopener">引自@Hujunjob</a></li><li>可以在Twitter、Facebook、wikipedia或者自建站点讨论此事。<a href="https://github.com/sikaozhe1997/Xin-Yue/issues/619#issue-317884530" target="_blank" rel="noopener">引自@xianghongai</a></li><li>GitHub对大陆程序员很重要，不能为了自由而导致它被封。</li><li>翻墙速度慢，影响效率。</li><li>程序员本职是写程序，不必要会翻墙，翻墙只是加分项。</li><li>非技术项目占用排行榜（Trending），影响优秀开源项目的获得和传播。</li><li>此项目下有很多鼓动搞乱国内局势的人, <a href="https://github.com/sikaozhe1997/Xin-Yue/issues/530#issuecomment-384311213" target="_blank" rel="noopener">源自@zibengou</a>。</li><li>在GitHub发没多大意义，很少人能看到，传播效果不好。</li><li>可以到被封带来的影响更小的仓库记录此事 ( 暂未有人推荐类似功能的仓库 )。</li><li>在规范issues前，issues曾成互相谩骂和攻击的舆论场，不希望带起更多同类的repo，使GitHub变为过分热烈的舆论平台。</li></ol><p>这两拨人谁都没办法说服对方，包括我。</p><p>我曾花时间、精力去思考、翻阅相关资料（道德、正义、道德悖论、电车难题、科尔伯格道德发展阶段、普世价值）。但还是不知道该如何说服一个网友：“这些东西我都不关心，我就是想不翻墙就能访问Github。“</p><p>尽管争论不休，<strong>但在某种意义上，Github已经成了天朝局域网上最后的自由之地！</strong>另外，客观地说：<strong>将国内敏感的内容上传至Github的行为永远不会停止，直到Github也被屏蔽或者GFW倒塌。</strong></p><h4 id="“你为什么不？”"><a href="#“你为什么不？”" class="headerlink" title="“你为什么不？”"></a>“你为什么不？”</h4><hr><blockquote><p>有个奇葩且可恶的观点，我忍不住要批驳一下</p></blockquote><p>小明：“Twitter、Facebook也可以（放那些敏感政治信息）啊，为什么要用Github。如果仅仅因为Github没有被封的话，那Gitbook也没被封啊。为什么不去Gitbook，非得在Github上？”</p><p>这种观点既奇葩又可恨。可恨之处在于，他们的<strong>观点背后的逻辑是：“不想让你说话”。</strong></p><p>我来给大家解释：</p><p>假如你认为小明说的有道理，然后将内容转移到了Gitbook上。那么一定有小明2在等着你，告诉你：“AAA、BBB、CCC也可以啊，为什么非要用Gitbook？”</p><p>接着，你又转移到了AAA上，然后有个小明3对你说：“DDD、EEE、FFF也可以啊，为什么非要用AAA？”</p><p>…</p><p>在转移了100个阵地后，你会发现他喵的有个叫“小明101”的人在等着你…</p><p><strong>明白了吗？</strong></p><p>我又联想到之前Python 之父 Guido van Rossum 为中国的程序员发声：<a href="https://discuss.python.org/t/can-we-do-something-for-996-programmers-in-china/1119" target="_blank" rel="noopener">我们能为中国的“996”程序员做什么？ </a>时，在论坛里看到有人持有这样的言论，且还被很多人赞同：”不关心乌干达贫穷的孩子，反而关心中国‘贫穷’的程序员”</p><p>这样嘲讽的语气（背后的逻辑），让我很不舒服。</p><p>他的逻辑和前面“小明”的逻辑其实是一样的。如果你去关心“乌干达贫穷的孩子”，小明2就会说：“不关心XXX战乱地区濒临死亡的人，反而关心尽管贫穷但还能基本活下去的乌干达的孩子。”</p><p>…</p><p>同理，<strong>如果你认同这样的观点，那么到最后会发现我们什么都没有做，就一直在忙着比较哪个群体“更弱势”了…</strong></p><p>谨防这样的观点的渗透。<strong>善心不分多寡，嘉行不分高下。做，就对了！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="Github" scheme="/blog/tags/Github/"/>
    
      <category term="言论自由" scheme="/blog/tags/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/"/>
    
      <category term="逻辑" scheme="/blog/tags/%E9%80%BB%E8%BE%91/"/>
    
      <category term="GFW" scheme="/blog/tags/GFW/"/>
    
  </entry>
  
  <entry>
    <title>对抗假消息：虚假截图制作工具</title>
    <link href="/blog/2019/03/24/%E5%AF%B9%E6%8A%97%E5%81%87%E6%B6%88%E6%81%AF%EF%BC%9A%E8%99%9A%E5%81%87%E6%88%AA%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7/"/>
    <id>/blog/2019/03/24/%E5%AF%B9%E6%8A%97%E5%81%87%E6%B6%88%E6%81%AF%EF%BC%9A%E8%99%9A%E5%81%87%E6%88%AA%E5%9B%BE%E5%88%B6%E4%BD%9C%E5%B7%A5%E5%85%B7/</id>
    <published>2019-03-24T07:46:14.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5045810&auto=0&height=66"></iframe><blockquote><p>这是一个可以<strong>“伪造”微博、知乎、豆瓣、简书等网站界面截图</strong>的网站。但本网站是为了告诉（不懂编程的）普通人：<strong>不要轻易相信网上看到的“截图”！</strong></p><p>项目地址：<a href="https://github.com/thegreatjavascript/FakeScreenshot" target="_blank" rel="noopener">https://github.com/thegreatjavascript/FakeScreenshot</a></p><p>在线预览：<a href="https://fakes.netlify.com" target="_blank" rel="noopener">https://fakes.netlify.com</a></p></blockquote><p><img src="https://i.imgur.com/58JmuwX.jpg" alt="不见图请翻墙"></p><p><strong>当你在互联网上看到一张截图时，你第一反应是什么？</strong></p><p>我曾在技术交流群里发了下面这么一张图，想看看人们的第一反应是什么。</p><p><img src="https://i.imgur.com/zhIegVu.jpg" alt="不见图请翻墙"></p><p>“卧槽，这么快？”</p><p>“正好这段时间没事做，学一下”</p><p>“和2.0有什么区别啊？”</p><p>“求你们别更了，我学不动了.jpg”</p><p>“支持TS吗？”</p><p>……</p><p><strong>你看，没有人怀疑这个截图的真实性（当然，也可能有人怀疑但没发声）</strong></p><p>我们都曾看到过各种截屏：包括不限于<code>知乎</code>、<code>微博</code>、<code>豆瓣</code>、<code>NGA</code>、<code>V2EX</code>、<code>QQ</code>、<code>微信</code> 、<code>各种新闻站</code>…</p><p>如果那些截屏内容只涉及到段子还好，但多数情况不是。它们往往和某事/某人有关，这（假截图）就<strong>极有可能</strong>导致人们对该事/人产生错误的看法（之所以说错误，是因为我认为<strong>大多数</strong>虚假截图的制作者都怀有不良动机。）</p><p>再加上<strong>多数人并不会去主动验证该截图描述事情的真伪</strong>，这是“虚假截图”泛滥的重要原因之一。</p><blockquote><p>为什么人们普遍不会去验证截图内容的真伪？</p><p>答案很简单：难。（人们每天接受的信息量太多，但验证某条信息的真伪很难。）</p></blockquote><p>所以我就想，作为一个程序员，我能为此做些什么？</p><p>然后联想到了之前的<strong>一些事儿：</strong></p><p><strong>1</strong></p><p>之前还常玩知乎的时候，凑过不少“热闹”。</p><p>我发现了一个现象：<strong>如果某答主在发表对某事的看法时，附带了截图的话，那么往往就能吸引不少“赞同”。</strong> 因为人们下意识地认为“既然都有截图，那么情况十有八九就是这样吧”。</p><p>好（wu）玩（yu）的是，有两次我还专门撰写了答案，用我伪造的一些荒唐的截图（让人一看就觉得是假的）来提醒其他用户：不要轻易相信高赞答主提供的“所谓截图证据”。</p><p>但是…</p><p>我的回答迅速淹没在洪流中，沉了…</p><p>当时，<strong>我的心情是复杂的…</strong></p><p><strong>2</strong></p><p>我基本每天都会上网，也有在不同渠道看新闻的习惯。当我看到一些明显真实性存疑的东西被广泛传播时，我就很烦，想骂人，想质问他们转发前为什么不先自己去证实下真伪？</p><p>但理智地讲，我也非常清楚：<strong>“现实就是这样。因为现在人们每天接受的信息太多，且求证的难度也太高，所以就极少会有人去求证”。</strong> 这个事实很让人沮丧。</p><p>我最先想到的其实并不是<a href="https://github.com/thegreatjavascript/FakeScreenshot" target="_blank" rel="noopener">「虚假截图制作工具/FakeScreenshot」</a>项目。</p><p>而是运营一个专门替别人“求证”某事真实性的微博账户。当然，也不是所有的事情我都可以“搞定”，毕竟我只是一个没有什么社会能量的普通程序员，但仍旧有一些事情我可以求证出来。不过因为近期时间已经被其他事情占用了，因此这个想法一直没有去实施。</p><p>后面我才想到了这个“灵感”（貌似是和别人斗图的时候？:p ）：何不做一个“伪造截图”的网站，<strong>这样任何知道此网站存在的人，心里都会明白这么一件事：“哦，原来各大网站截图都是可以轻易伪造的啊”。这样当他再次看到其他截图的时候，会想起来此网站的存在，然后就会下意识地怀疑截图的真实性了。</strong></p><blockquote><p>有朋友说这是：用“造假”来对抗造假。</p><p>是的，它是！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目" scheme="/blog/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="截图制作" scheme="/blog/tags/%E6%88%AA%E5%9B%BE%E5%88%B6%E4%BD%9C/"/>
    
      <category term="虚假截图" scheme="/blog/tags/%E8%99%9A%E5%81%87%E6%88%AA%E5%9B%BE/"/>
    
      <category term="开源" scheme="/blog/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative实战之社交网络客户端（一：基础篇）</title>
    <link href="/blog/2019/02/22/ReactNative%E5%AE%9E%E6%88%98%E4%B9%8B%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <id>/blog/2019/02/22/ReactNative%E5%AE%9E%E6%88%98%E4%B9%8B%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E4%B8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</id>
    <published>2019-02-22T09:42:12.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5350947&auto=0&height=66"></iframe><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr><p>完整项目地址：<a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">https://github.com/shuiRong/Gakki</a> 🌟🌟🌟</p><p>系列文章：</p><ul><li><a href>ReactNative实战之社交网络客户端（二：进阶篇）</a>（正在写）</li><li><a href>ReactNative实战之社交网络客户端（三：优化篇）</a>（正在写）</li><li><a href>ReactNative实战之社交网络客户端（四：踩坑篇）</a>（正在写）</li></ul><p>对了，<a href="https://linshuirong.cn/2019/02/17/Mastodon%EF%BC%9A%E5%B1%9E%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">这里</a>有一篇介绍Mastodon (长毛象)的文章，毕竟我是在为它开发客户端🤣</p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── App.js// 项目路由配置，因为我这个项目需要登陆，所以我就根据登陆/未登陆，定义了两个路由入口</span><br><span class="line">├── LICENSE// 证书</span><br><span class="line">├── README.md// 介绍文档</span><br><span class="line">├── android// 原生Android工程</span><br><span class="line">├── app.json // 用来配置原生App需要的基本信息</span><br><span class="line">├── index.js // 入口文件</span><br><span class="line">├── ios // 原生iOS工程</span><br><span class="line">├── node_modules // 依赖项目的源代码</span><br><span class="line">├── package.json // 定义项目所需要的各种依赖/模块，以及项目的配置信息</span><br><span class="line">├── preview // App预览图</span><br><span class="line">├── rn-cli.config.js // 顾名思义，是命令行工具：react-native的配置信息</span><br><span class="line">├── src // 项目源代码。你写的业务代码基本都在这里</span><br><span class="line">    ├── Main.js // 配置了“登陆”状态下各页面的路由信息</span><br><span class="line">    ├── SignedOutNavigator.js // 配置了“未登陆”状态下各页面的路由信息</span><br><span class="line">    ├── assets // 会被RN打包工具打包的静态资源</span><br><span class="line">    ├── pages // App的页面级文件</span><br><span class="line">    │   ├── About.js // 关于页面</span><br><span class="line">    │   ├── Auth.js // 授权认证页面（Mastodon客户端登录时不是常规的账号密码登录，而是输入账号密码然后弹出授权认证，想想微信的授权认证）</span><br><span class="line">    │   ├── BlockedUsers.js // 被屏蔽用户页面</span><br><span class="line">    │   ├── Envelope.js // 私信页面</span><br><span class="line">    │   ├── FollowRequestList.js // 关注请求页面</span><br><span class="line">    │   ├── Followers.js // 关注者页面</span><br><span class="line">    │   ├── Following.js // 关注页面</span><br><span class="line">    │   ├── Home.js // 首页</span><br><span class="line">    │   ├── Launcher.js // 启动页面，从存储系统中加载主题、用户Token等基础数据</span><br><span class="line">    │   ├── Login.js // 登陆页面，即输入账号密码的地方</span><br><span class="line">    │   ├── MutedUsers.js // 被隐藏用户页面</span><br><span class="line">    │   ├── Notifications.js // 消息通知页面</span><br><span class="line">    │   ├── OpenSource.js // 开源声明页面，列出了项目所有用到的开源软件及开源协议</span><br><span class="line">    │   ├── Profile.js // 个人详情页面</span><br><span class="line">    │   ├── Search.js // 搜索页面</span><br><span class="line">    │   ├── SendToot.js // 发送嘟文（类似于微博的博文）的页面</span><br><span class="line">    │   ├── SideBar.js // 主页侧栏组件</span><br><span class="line">    │   ├── Tag.js // 标签页面</span><br><span class="line">    │   ├── Test.js // 测试页面，开发项目时需要测试某模块时可以在这个页面单独测试</span><br><span class="line">    │   ├── TootDetail.js // 嘟文详情页面</span><br><span class="line">    │   ├── common // 项目中会多处使用的公共组件</span><br><span class="line">    │   │   ├── Context.js // 评论组件</span><br><span class="line">    │   │   ├── DefaultTabBar.js // Tab组件的顶部Bar组件</span><br><span class="line">    │   │   ├── Divider.js // 分割线组件</span><br><span class="line">    │   │   ├── Fab.js // Floating Action Button (FAB)组件，一般是漂浮在右下角的那个圆形按钮</span><br><span class="line">    │   │   ├── HTMLView.js // 把渲染HTML的部分提取出来，自成一个组件</span><br><span class="line">    │   │   ├── Header.js // 顶部的Header组件</span><br><span class="line">    │   │   ├── ListFooterComponent.js FlatList组件的尾部组件</span><br><span class="line">    │   │   ├── Loading.js // Loading加载效果组件</span><br><span class="line">    │   │   ├── MediaBox.js // 媒体文件（图片、视频）展示组件</span><br><span class="line">    │   │   ├── Notice.js // 提示框、确认框等组件</span><br><span class="line">    │   │   ├── ReplyInput.js // 封装的单行、多行输入框组件</span><br><span class="line">    │   │   ├── Spruce.js // 骨架屏组件，自定了几个常用骨架屏</span><br><span class="line">    │   │   ├── TootBox.js // 嘟文组件</span><br><span class="line">    │   │   ├── UserItem.js // 用户列组件</span><br><span class="line">    │   └── screen // Tab组件下的页面</span><br><span class="line">    │       ├── HomeScreen.js // 主页时间轴Tab下的组件</span><br><span class="line">    │       ├── LocalScreen.js // 本站时间轴Tab下的组件</span><br><span class="line">    │       ├── MediaScreen.js // 媒体文件Tab下的组件</span><br><span class="line">    │       ├── PublicScreen.js // 跨站公共时间轴Tab下的组件</span><br><span class="line">    │       └── TootScreen.js // （个人详情页面下）个人嘟文Tab下的组件</span><br><span class="line">    └── utils // 放置一些公共方法</span><br><span class="line">        ├── api.js // 定义用到的所有接口</span><br><span class="line">        ├── color.js // 统一管理项目颜色</span><br><span class="line">        ├── config.js // 配置信息，如开发时使用的Token</span><br><span class="line">        ├── locale.js // 国际化文件，目前只有中文的时间字符，未来会集成所有的国际化数据</span><br><span class="line">        ├── mobx.js // 项目全局状态管理中心</span><br><span class="line">        ├── request.js // 封装axios，增加全局请求、响应拦截器</span><br><span class="line">        └── store.js // 封装AsyncStorage：本地存储系统</span><br><span class="line">└── yarn.lock // yarn为了跨机器安装得到一致的结果而生成的文件</span><br></pre></td></tr></table></figure><h4 id="介绍下目录规划"><a href="#介绍下目录规划" class="headerlink" title="介绍下目录规划"></a>介绍下目录规划</h4><p>使用<code>react-native-cli</code>工具初始化完项目的时候，你就会发现，它生成的所谓源码文件只有<code>index.js</code>、<code>App.js</code>，而这基本不足以支持任何复杂点的项目。所以就需要自己来：先新建一个<code>src</code>文件夹，然后规划文件。</p><p>首先需要一个入口/路由文件（我这里根据“登陆”和“未登陆”两种状态，规划了两个入口文件：<code>Main.js</code>、<code>SignedOutNavigator.js</code>），然后还需要一个 <code>pages</code>文件夹放置所有的“页级”文件，一个<code>common</code>用来放置那些会被引用多次的组件，比如<code>Header</code>组件（基本每个页面都要用到<code>Heeader</code>组件）。然后我还建了一个<code>screen</code>组件用来放置每个Tab对应的文件，因为严格来说，一个Tab并不属于一个页面。首页的Tab是这样的：</p><p><img src="https://i.imgur.com/htyto3e.jpg" alt="不见图请翻墙"></p><p>然后介绍下<code>utils</code>文件夹。</p><p><img src="https://i.imgur.com/vQ8KmCs.jpg" alt="不见图请翻墙"></p><p><strong>统一管理很重要！</strong>所以我接口、本地存储、国际化、颜色搭配、状态管理都封装到了单独文件中，任何组件需要使用的时候都可以自行调用。</p><p>最开始开发的时候，其实我并没有把颜色这一块给封装成单个文件，这导致后面我要实现夜间模式时直接懵逼，颜色写死在项目中的各处，完全没法实现夜间模式！因此希望大家谨记我的教训，<strong>任何重复两次以上的代码都要考虑下是否可以声明成变量或者封装成组件！</strong></p><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><hr><p>我在项目开发初期并没有使用状态管理工具，因为当时项目复杂度还没有上来，使用<code>state</code>足矣。</p><blockquote><p>就像React社区中流传甚广的一句话：don’t use Redux until you have problems with vanilla React.</p><p>意思是：除非你遇到了只使用React解决不了的问题，不要使用Redux。</p><p>P.S. React Native将会在下一个稳定版本中支持<a href="https://react.docschina.org/docs/hooks-overview.html#-%E7%8A%B6%E6%80%81%E9%92%A9%E5%AD%90%EF%BC%88state-hook%EF%BC%89" target="_blank" rel="noopener">Hooks</a>：是一个用起来非常舒服的功能，建议了解一下。</p></blockquote><p>直到我遇到了“主题切换功能”，非引入一个状态管理功能不能解决，然后我就引入了<a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">Mobx</a>（上手快）</p><p>关于<code>Redux</code>和<code>Mobx</code>我们应该如何选择的问题，这里推荐一篇文章：<a href="https://www.robinwieruch.de/redux-mobx-confusion/" target="_blank" rel="noopener">Redux or MobX: An attempt to dissolve the Confusion</a>，<a href="https://segmentfault.com/a/1190000011148981" target="_blank" rel="noopener">中译文</a>。</p><p>作者观点比较中立，并没有偏向任何一方。（所以看完之后，你的选择也没必要非要和我一样）</p><h4 id="UI库的选择"><a href="#UI库的选择" class="headerlink" title="UI库的选择"></a>UI库的选择</h4><hr><p>首先你需要知道的是，<strong>你不能奢求某一款UI库能完全满足你的需求。</strong>实际也不会存在这么一款UI库。</p><p>因此项目开发时基本是这样：一个流行组件库 + N个“单UI”组件（根据需要自行Google） + 自行实现Style</p><p>常见的流行UI库我基本都看过，包括不限于：</p><ul><li><a href="https://github.com/react-native-training/react-native-elements" target="_blank" rel="noopener">react-native-elements</a></li><li><a href="https://github.com/GeekyAnts/NativeBase" target="_blank" rel="noopener">NativeBase</a></li><li><a href="https://github.com/xotahal/react-native-material-ui" target="_blank" rel="noopener">react-native-material-ui</a></li><li><a href="https://github.com/rilyu/teaset" target="_blank" rel="noopener">Teaset</a></li></ul><p>最后选择了Teaset，理由简单实在（笑）：它由“纯JS”实现，不含任何原生代码。（这意味着，如果遇到问题需要去看源码的话，我能看懂🤣）</p><h4 id="组件重用"><a href="#组件重用" class="headerlink" title="组件重用"></a>组件重用</h4><hr><p>路由我用的是<a href="https://reactnavigation.org/" target="_blank" rel="noopener">react navigation</a></p><p>设想下这样的场景：在水溶的个人主页点击小明的头像。我们预期的是页面会跳转到小明的个人主页，但实际呢？实际是页面不会有任何变化（当然，如果你没有针对这种情况做处理的话。）</p><p><img src="https://i.imgur.com/UDXnszg.jpg" alt="不见图请翻墙"></p><p>这是因为当跳转前后的两个路由相同（也即组件复用）的话，默认不会重新渲染组件。那么<code>componentDidMount</code>钩子（一般我们在这个钩子里面请求接口数据）就不会触发，那么页面就不会有任何变化。</p><p>P.S. 如果你在开发ReactNative之前曾写过Vue/React/Angular项目的话，可能就会遇到过这样的问题。</p><p><strong>解决方法</strong>就是在<code>componentWillReceiveProps</code>钩子里重新请求接口数据，因为前后两个路由相同会触发此钩子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">this.init(this.props.navigation.getParam(&apos;data&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps(&#123; navigation &#125;) &#123;</span><br><span class="line">this.init(navigation.getParam(&apos;data&apos;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装请求"><a href="#封装请求" class="headerlink" title="封装请求"></a>封装请求</h4><hr><blockquote><p>用来请求接口数据的HTTP库，我是用的是<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>，因为之前在写Vue、React项目时就有在用，已经比较熟悉了。如果你是用了其他的库也无妨，思想都是想通的，可以借鉴。</p></blockquote><p>为了开发测试方便，有必要将axios封装一下，加上请求、响应拦截等逻辑。这样的话，未来增加特定Header或增加接口错误时提示信息也方便，在这里加就可以了。</p><p>代码贴出来了，简单，都能看懂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import &#123; Toast &#125; from &apos;teaset&apos;</span><br><span class="line"></span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://cmx.im&apos;, // 统一Host</span><br><span class="line">  timeout: 10000 // 请求超时时间限制</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 请求拦截器</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    // 如果未来需要增加统一Header，加在这里</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    Promise.reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 响应拦截器</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    // 如果你需要对接口返回的数据特殊处理一下的话，写在这里  </span><br><span class="line">    return response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    console.log(&apos;拦截器err:&apos;, err)</span><br><span class="line">    if (err &amp;&amp; err.error) &#123;</span><br><span class="line">      // 服务器异常，统一展示出来</span><br><span class="line">      Toast.message(err.error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Mastodon" scheme="/blog/tags/Mastodon/"/>
    
      <category term="ReactNative" scheme="/blog/tags/ReactNative/"/>
    
      <category term="App" scheme="/blog/tags/App/"/>
    
      <category term="Android" scheme="/blog/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安利Mastodon：属于未来的社交网络</title>
    <link href="/blog/2019/02/17/Mastodon%EF%BC%9A%E5%B1%9E%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    <id>/blog/2019/02/17/Mastodon%EF%BC%9A%E5%B1%9E%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</id>
    <published>2019-02-17T15:53:06.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5350947&auto=0&height=66"></iframe><p><img src="https://i.imgur.com/yPA8Obj.jpg" alt="不见图请翻墙"></p><p><strong>我为Mastodon开发了一款安卓客户端，v1.0版本已经发布，欢迎<a href="https://github.com/shuiRong/Gakki/releases" target="_blank" rel="noopener">下载使用</a></strong></p><p><strong>源码在这里：<a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">https://github.com/shuiRong/Gakki</a></strong> 🌟🌟🌟</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><hr><p><strong><a href="https://github.com/tootsuite/mastodon" target="_blank" rel="noopener">Mastodon(长毛象)</a>是什么？</strong></p><p>是一个免费开源、去中心化、分布式的微博客社交网络，是<strong>微博、Twitter绝妙的替代品</strong>。它不仅仅是一个网站，更是一个联盟：成千上万运行长毛象的独立社区形成了一个连贯的网络，虽然每个社区都是其特点，但都是整体的一部分。</p><p><strong>说人话！</strong></p><p><strong>好，我重新说～</strong></p><p>首先你要知道，<strong>微博有的功能，Mastodon基本都有，但它却有着微博绝对无法企及的特点（也正是它迷人之处～）</strong></p><p>它的<strong>源代码是公开的</strong>，因此任何懂点技术的人都可以下载它的源码，部署在你自己的服务器上，称之为一个<strong>实例</strong>。这样其他人就可以在你的实例上注册，成为你的用户。</p><blockquote><p>更多实例你可以在<a href="https://joinmastodon.org/" target="_blank" rel="noopener">这里</a>找到，</p><p>这里我仅列出几个特别的：</p><p>mastodon.social 长毛象官方团队运营的实例（需翻墙）</p><p>cmx.im 长毛象中文实例，中文用户很多，目前5471个用户（我也在这儿～欢迎关注<a href="https://cmx.im/web/accounts/81232" target="_blank" rel="noopener">我</a>）（需翻墙）</p><p>pawoo.net 日本P站（pixiv）官方团队运营的实例，画师超级多～（需翻墙）</p><p>acg.mn 主打ACG内容的中文实例，目前2855个用户（无需翻墙）</p></blockquote><p><strong>开源意味着什么？</strong>意味深长！意味着大多数实例的站长都是个人或者小团体，而非追求利益的商业公司。这决定着用户不会被广告乱入、隐私窃取恶心到。看看微博吧，无处不在的烦人广告简直恶心死了。另外，还有一把<a href="http://www.baike.com/wiki/%E8%BE%BE%E6%91%A9%E5%85%8B%E9%87%8C%E6%96%AF%E4%B9%8B%E5%89%91" target="_blank" rel="noopener">达摩克利斯之剑</a>时刻悬浮在用户头上，这也不能说，那也不能提！（讽刺的是，他们还不告诉你都有哪些不能说！）Fuck！与其相反，Mastodon基本没什么审查。</p><blockquote><p>当然，每个实例都有他们自己的社区准则，这里贴出<a href="https://cmx.im/about/more" target="_blank" rel="noopener">长毛象中文站的</a></p></blockquote><p>Mastodon<strong>尊重用户、尊重用户的数据</strong>：如果你不喜欢这个实例的氛围，完全可以<strong>导出</strong>你的所有数据，然后<strong>导入</strong>到其他你喜欢的实例，又是一条好汉！</p><blockquote><p>尽管基本所有数据都支持导出，但导入功能<strong>目前</strong>还未完善：仅支持关注列表、屏蔽列表、隐藏列表，未来官方会支持。</p></blockquote><p><img src="https://i.imgur.com/TZiBeUd.jpg" alt="不见图请翻墙"></p><p>用户不仅可以看到当前实例其他人发出的“消息”（我们都称之为<strong>嘟文</strong>），也可以通过<strong>“跨站公共时间轴”</strong>，看到其他实例用户发出来的嘟文。<strong>是不是很奇妙？Mastodon世界就是通过无数个实例连接起来的～</strong></p><blockquote><p>那么，Mastodon世界到底有多少个实例、多少个用户呢？</p><p>在<a href="https://instances.social/list/old" target="_blank" rel="noopener">instances.social</a>网站查询的结果是：</p><p>至少有<strong>8484</strong>个实例，<strong>170w</strong>用户！</p></blockquote><p>P.S. 补一张<strong>首页图</strong></p><p><img src="https://i.imgur.com/7x2ECVj.jpg" alt="不见图请翻墙"></p><p><strong>都看到这儿了，少年还不注册个玩玩？</strong>（对了，注册仅需要邮箱，手机号是不需要的哦～）<br>长毛象中文站：<a href="https://cmx.im/about" target="_blank" rel="noopener">https://cmx.im/about</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="Mastodon" scheme="/blog/tags/Mastodon/"/>
    
      <category term="长毛象" scheme="/blog/tags/%E9%95%BF%E6%AF%9B%E8%B1%A1/"/>
    
      <category term="Fediverse" scheme="/blog/tags/Fediverse/"/>
    
      <category term="社交网络" scheme="/blog/tags/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>海伯利安：梅伊娜·悦石和技术内核顾问的对决（一）</title>
    <link href="/blog/2019/02/05/%E6%B5%B7%E4%BC%AF%E5%88%A9%E5%AE%89%EF%BC%9A%E6%82%A6%E7%9F%B3%E5%92%8C%E6%8A%80%E6%9C%AF%E5%86%85%E6%A0%B8%E9%A1%BE%E9%97%AE%E7%9A%84%E5%AF%B9%E5%86%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>/blog/2019/02/05/%E6%B5%B7%E4%BC%AF%E5%88%A9%E5%AE%89%EF%BC%9A%E6%82%A6%E7%9F%B3%E5%92%8C%E6%8A%80%E6%9C%AF%E5%86%85%E6%A0%B8%E9%A1%BE%E9%97%AE%E7%9A%84%E5%AF%B9%E5%86%B3%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-02-05T09:01:27.000Z</published>
    <updated>2019-05-10T10:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>悦石坐着思考了片刻，单拳托腮。然后对着墙壁说道：<strong>“请叫阿尔贝都顾问过来。”</strong></p><p>二十秒后，悦石宽桌对面的空气蒙上了迷雾，闪着微光，最后凝固住了。技术内核的代表看上去依然俊俏，短短的灰发在光线下闪烁，他那坦率、正直的脸庞呈现出健康的古铜色。</p><p><strong>“执行官大人”</strong>全息投影像开口道，<strong>“顾问理事会和内核预言者将继续为你们效劳，在这大难——”</strong></p><p><strong>“阿尔贝都，内核在哪里？”</strong>悦石打断道。</p><p>顾问的笑容毫不抖动。<strong>“对不起，执行官大人，你说什么？”</strong></p><p><strong>“技术内核。到底在哪里？”</strong></p><p>阿尔贝都那好好先生的脸庞露出一丝疑惑，但没有敌意，没有什么显著的情感反应，除了一副想要帮忙的茫然表情。<strong>“执行官大人，你肯定知道，自从内核隐退以来，我们的政策一直坚持不要暴露……啊……技术内核物理元件的所在地。换句话说，内核不在任何地方，自从——”</strong></p><p><strong>“自从你们生活在数据平面和数据网的交感现实中，”</strong>悦石说，声音单调，<strong>“对，我已经听够这些废话了，阿尔贝都。我父亲以及我父亲的父亲都听够这一切了。我现在直截了当问你，技术内核在哪里？”</strong></p><p>顾问呆呆地摇了摇头，满脸歉意，就像一名大人又被小孩问了一个问了一千遍的问题。爸爸，天为什么是蓝色的？</p><p><strong>“执行官大人，对这个问题，我完全无法以人类的三维坐标来回答。从某种意义上说，我们……内核……存在于环网内，也存在于环网外。我们在数据平面的现实中游动，你们称其为数据网，但是说到物理元件……你们祖先称之为‘硬件’的东西，我们觉得有必要——”</strong></p><p><strong>“有必要保密。”</strong>悦石替他说完了这句话。她交叉双臂，<strong>“阿尔贝都顾问，你有没有意识到，霸主中将会有好多人……数百万人……坚信内核……你们的顾问理事会……背叛了人类？”</strong></p><p>阿尔贝都双手打了个手势。<strong>“执行官大人，那实在是令人遗憾。遗憾，但可以理解。”</strong></p><p><strong>“顾问先生，你们的预言者应该差不多是十全十美的。但你们却从没有警告过我们，驱逐者舰队会对世界造成毁灭。”</strong></p><p>投影像英俊的脸庞上露出悲伤之情，表情极为令人信服。<strong>“执行官大人，我得提醒你，顾问理事会警告过你们，如果想将海伯利安引进环网，将会带来无规则的变数，甚至连理事会也无法归因。”</strong></p><p><strong>“但并不单单是海伯利安！”</strong>悦石叫道，她提高了嗓音，<strong>“神林被烧毁了。天国之门被熔成一堆渣。无限极海的脑袋正等着下一锤的攻击！如果顾问理事会不能预测如此规模的侵略，那还要你们有什么用？”</strong></p><p><strong>“我们的确预测到了和驱逐者发生战争的必然性，执行官大人。我们也预言了防卫海伯利安的重大危险。你必须相信我，把海伯利安加入到任何预言方程式，都将让安全性因素降低到——”</strong></p><p><strong>“好吧，”</strong>悦石叹了口气，<strong>“我想和内核的其他人谈谈，阿尔贝都。你们那难以辨认的智能阶级中拥有决策权力的人。”</strong></p><p><strong>“我向你保证，我代表了广大内核成员，在我——”</strong></p><p><strong>“对，对。但我想要和你们的……我想你们称其为神，我想和你们的一位神谈一谈。老辈人工智能中的一个。一个有影响力的神，阿尔贝都。我需要和他谈一谈，告诉我为什么内核绑架了我的艺术家赛文和我的助手利·亨特。”</strong></p><p>全息像看上去大吃一惊。<strong>“我向你保证，执行官大人，我们四世纪的联盟在上，内核跟这不幸的失踪事件完全无关——”</strong></p><p>悦石站起身。<strong>“这就是为什么我要和你们的神谈一谈的原因。阿尔贝都，现在作担保已毫无意义了。如果我们两个种族想要活下去，那就是时候来一次坦率的会谈了。我说完了。”</strong>她的注意力回到了桌子上的传真台文件上。</p><p>阿尔贝都顾问站起身，点头道别，闪了闪，消失了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;悦石坐着思考了片刻，单拳托腮。然后对着墙壁说道：&lt;strong&gt;“请叫阿尔贝都顾问过来。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二十秒后，悦石宽桌对面的空气蒙上了迷雾，闪着微光，最后凝固住了。技术内核的代表看上去依然俊俏，短短的灰发在光线下闪烁，他那坦
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="读书" scheme="/blog/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="海伯利安" scheme="/blog/tags/%E6%B5%B7%E4%BC%AF%E5%88%A9%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>相声：一个休学实习生的被裁经历</title>
    <link href="/blog/2019/01/30/%E7%9B%B8%E5%A3%B0%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BC%91%E5%AD%A6%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%9A%84%E8%A2%AB%E8%A3%81%E7%BB%8F%E5%8E%86/"/>
    <id>/blog/2019/01/30/%E7%9B%B8%E5%A3%B0%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BC%91%E5%AD%A6%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%9A%84%E8%A2%AB%E8%A3%81%E7%BB%8F%E5%8E%86/</id>
    <published>2019-01-30T08:39:22.000Z</published>
    <updated>2019-05-10T10:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作者：</strong>林水溶</p><p><strong>博客：</strong><a href="https://linshuirong.cn/" target="_blank" rel="noopener">https://linshuirong.cn</a></p><blockquote><p><strong>为了大家都能看懂相声中我想表达的东西，先声明下：</strong></p><ol><li>今早咪蒙发表一篇文章：《一个出身寒门的状元之死》（槽点满满）</li><li>咪蒙曾发表过一篇文章：《我为什么支持实习生休学？》（槽点满满 plus）</li></ol></blockquote><p><strong>进入正文：</strong></p><hr><blockquote><p>实习生小A，来咪蒙老师公司三个月了。前段时间听从咪老师建议休了学，全职投入到了工作之中。</p><p>实习生小B，刚来公司一周。受到小A学长和咪老师的鼓舞，也过段时间休学的打算。</p></blockquote><p>实习生小A：小B啊，你在这儿好好干。我准备联系下学校，看还能不能继续回去上学…（悲伤脸）</p><p>实习生小B：你这咋回事儿啊？（震惊脸）</p><p>实习生小A：唉…这个事儿吧，还得从前两天说起。（悲伤脸）前两天咪蒙老师给我安排个活儿。</p><p>实习生小B：啥活啊？</p><p>实习生小A：她让我给篇文章拟个标题，说准备发一篇爆款文章，让我给拟个配得上它身份的标题。</p><p>实习生小B：那你就拟个呗，这有啥难的？小学三年级我们就开始写作文了，还怕它一个标题？</p><p>实习生小A：要有你说的这么简单就好了。</p><p>实习生小B：怎么了，难道还有要求？（疑问脸）</p><p>实习生小A：真有！咪老师提了三点要求。</p><p>实习生小B：哪三点？</p><p>实习生小A：<strong>第一点：标题一定要引发好奇</strong></p><p>实习生小B：这很有道理啊。（认真脸）</p><p>实习生小A：还给我举了个例子：<strong>《一夜之间，北京的井盖全消失了》</strong></p><p>实习生小B：咦，这是怎么回事？北京的井盖怎么会在一夜之间全消失呢？（好奇脸）</p><p>实习生小A：你看你看。只要是个人，看到这样的标题他都会好奇不是。</p><p>实习生小B：有道理。但北京的井盖怎么会在一夜之间全消失呢？你说河南人…（纠结脸）</p><p>实习生小A：打住打住，哪儿跟哪儿啊。井盖怎么消失的根本不重要好吗。重要的是这个标题能在第一时间抓住你的视线。</p><p>实习生小B：怎么可能不重要啊？北京的井盖儿都消失了还不算重要啊？这一天得造成多少次交通事故啊。（萌新脸）</p><p>实习生小A：你是真傻还是装傻啊？看不出来文章标题是故意夸大啊。你要是点开看，它肯定说只是北京某处的井盖消失了，哪儿能是全北京城啊。我早就跟你说了，不要刷抖音，刷抖音降智，你不听。你看看你现在成什么样子了…（不屑脸）</p><p>实习生小B：去你的吧。我还刷知乎，学习新姿势呢，你怎么不说？（不服脸）</p><p>实习生小A：知乎？“与世界分享你刚编的段子”，那个知乎啊。（不屑脸）</p><p>实习生小B：人家那是“与世界分享你身边的故事”。</p><p>实习生小A：扯远了扯远了。接着说<strong>第二点要求：标题一定要简单粗暴</strong></p><p>实习生小B：简单粗暴这个我会。不就是“说大白话”吗？是个人都会吧。</p><p>实习生小A：是说“大白话”，也不是说“大白话”。</p><p>实习生小B：那到底是不是“说大白话”啊？</p><p>实习生小A：我也不知道。</p><p>实习生小B：什么？你也不知道？那你还这么说！（生气脸）</p><p>实习生小A：不是。这句话是那天咪老师说的。然后我也问她了，我说“咪老师，那到底是‘是’还是‘不是’啊？“</p><p>实习生小B：咪老师怎么说？</p><p>实习生小A：咪老师什么都没说，就直勾勾地瞪着我，足足有三分钟！然后说“第三点要求…”</p><p>实习生小B：这…</p><p>实习生小A：唉，实习生真不好做。（轻声叹息：早知道不休学了…）（苦逼脸）</p><p>实习生小B：那第三个要求是啥？</p><p>实习生小A：哦，<strong>第三点要求是：标题一定要颠覆常识</strong></p><p>实习生小B：什么叫颠覆常识？</p><p>实习生小A：给你举个例子：<strong>《他这么真诚，一定是在骗你！》</strong></p><p>实习生小B：这是什么混蛋逻辑啊。真诚招你惹你了，就一定是骗子啊。（愤怒脸）</p><p>实习生小A：别着急骂先。你看看它算不算是“颠覆常识”。</p><p>实习生小B：… 还真算（尴尬脸）</p><p>实习生小A：这就对了。读者看到这样的标题，肯定会觉得气。</p><p>实习生小B：胡说八道，肯定气啊。</p><p>实习生小A：只要一生气，那可就着了道了。鲁迅曾说：“你对待情绪的方式，决定了你生活的层次”（认真脸）</p><p>实习生小B：鲁迅说过这话？（好奇脸）</p><p>实习生小A：说过啊，不信你去Google！（严肃脸）</p><p>实习生小B：Google上不去，算了，信你一回。（悻悻脸）</p><p>实习生小A：三点建议呢，就是这样。晚上下班到家后，我饭也顾不上吃，就想啊。最后绞尽脑汁地想了一宿，才想出来个我觉得完全符合咪老师要求的标题。然后第二天一大早就来到老师办公室，把标题交了上去。（疲惫脸）</p><p>实习生小B：然后呢？</p><p>实习生小A：然后？然后我被辞了。</p><p>实习生小B：被…被辞了？就因为这件破事儿？（震惊脸）</p><p>实习生小A：嗯。</p><p>实习生小B：那你交上去的是啥标题啊？</p><p>实习生小A：<strong>《一夜之间，寒门出身的状元周有择死了，一定是在骗你！》</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt;林水溶&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客：&lt;/strong&gt;&lt;a href=&quot;https://linshuirong.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://linshuirong.c
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="碎碎念" scheme="/blog/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="相声" scheme="/blog/tags/%E7%9B%B8%E5%A3%B0/"/>
    
      <category term="咪蒙" scheme="/blog/tags/%E5%92%AA%E8%92%99/"/>
    
      <category term="吐槽" scheme="/blog/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>「译」setState如何知道它该做什么？</title>
    <link href="/blog/2019/01/09/%E3%80%8C%E8%AF%91%E3%80%8DsetState%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%AE%83%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>/blog/2019/01/09/%E3%80%8C%E8%AF%91%E3%80%8DsetState%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%AE%83%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2019-01-09T08:37:23.000Z</published>
    <updated>2020-04-03T16:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=670000&auto=0&height=66"></iframe><blockquote><p>本文翻译自：<a href="https://overreacted.io/how-does-setstate-know-what-to-do/" target="_blank" rel="noopener">How Does setState Know What to Do?</a></p><p>原作者：<a href="https://mobile.twitter.com/dan_abramov" target="_blank" rel="noopener">Dan Abramov</a></p><p>如果有任何版权问题，请联系<a href="mailto:shuirong1997@icloud.com" target="_blank" rel="noopener">shuirong1997@icloud.com</a></p></blockquote><p>当你在组件中调用<code>setState</code>时，你觉得会发生什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">class Button extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123; clicked: false &#125;;</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.setState(&#123; clicked: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    if (this.state.clicked) &#123;</span><br><span class="line">      return &lt;h1&gt;Thanks&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">        Click me!</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Button /&gt;, document.getElementById(&apos;container&apos;));</span><br></pre></td></tr></table></figure><p>当然，React会用<code>{ clicked: true}</code> 这条状态重新渲染组件并且更新匹配到的DOM，然后返回<code>&lt;h1&gt;Thanks&lt;/h1&gt;</code>元素。</p><p>听起来似乎简洁明了。但别急，React（或者说React DOM）是怎么做的？</p><p>更新DOM听起来像是React DOM的事儿，但别忘了我们调用的可是<code>this.setState()</code>，它是React的东西，可不是React DOM的。另外，我们的基类<code>React.Component</code>是被定义在React内部。</p><p>所以问题来了：<code>React.Component</code>内部的<code>setState</code>怎么能去更新DOM呢？</p><p><strong>事先声明：就像我的<a href="https://overreacted.io/how-does-react-tell-a-class-from-a-function/" target="_blank" rel="noopener">其他博客</a>，你不需要熟练掌握React。这篇博客是为那些想要看看面纱之后是什么东西的人准备的。完全可选！</strong></p><hr><p>我们或许会认为<code>React.Component</code>类已经包含了DOM更新逻辑。</p><p>但如果这是事实，那<code>this.setState</code>是如何工作在其他环境中呢？比如：在React Native App中的组件也能继承<code>React.Component</code>，他们也能像上面一样调用<code>this.setState()</code>，并且React Native工作在Android和iOS的原生视图而不是DOM中。</p><p>你可能也对React Test Renderer 或 Shallow Renderer比较熟悉。这两个测试渲染器让你可以渲染一般的组件并且也能在他们中调用<code>this.setState</code>，但他们可都不使用DOM。</p><p>如果你之前使用过一些渲染器比如说<a href="https://github.com/facebook/react/tree/master/packages/react-art" target="_blank" rel="noopener">React ART</a>，你可能知道在页面中使用超过一个渲染器是没什么问题的。（比如：ART组件工作在React DOM  树的内部。）这会产生一个不可维持的全局标志或变量。</p><p><strong>所以<code>React.Component</code>以某种方式将state的更新委托为具体的平台（译者注：比如Android, iOS）</strong>，在我们理解这是如何发生之前，让我们对包是如何被分离和其原因挖得更深一点吧！</p><hr><p>这有一个常见的错误理解：React “引擎”在<code>react</code>包的内部。这不是事实。</p><p>事实上，从 <a href="https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages" target="_blank" rel="noopener">React 0.14</a>开始对包进行分割时，<code>React</code>包就有意地仅导出关于如何定义组件的API了。React的大部分实现其实在“渲染器”中。</p><p>渲染器的其中一些例子包括：<code>react-dom</code>,<code>react-dom/server</code>,<code>react-native</code>,<code>react-test-renderer</code>,<code>react-art</code>（另外，你也可以<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples" target="_blank" rel="noopener">构建自己的</a>）。</p><p>这就是为什么<code>react</code>包帮助很大而不管作用在什么平台上。所有它导出的模块，比如<code>React.Component</code>，<code>React.createElement</code>，<code>React.Children</code>和<code>[Hooks](https://reactjs.org/docs/hooks-intro.html)</code>，都是平台无关的。无论你的代码运行在React DOM、React DOM Server、还是React Native，你的组件都可以以一种相同的方式导入并且使用它们。</p><p>与之相对的是，渲染器会暴露出平台相关的接口，比如<code>ReactDOM.render()</code>，它会让你可以把React挂载在DOM节点中。每个渲染器都提供像这样的接口，但理想情况是：大多数组件都不需要从渲染器中导入任何东西。这能使它们更精简。</p><p><strong>大多数人都认为React“引擎”是位于每个独立的渲染器中的</strong>。许多渲染器都包含一份相同的代码—我们叫它<a href="https://github.com/facebook/react/tree/master/packages/react-reconciler" target="_blank" rel="noopener">“调节器”</a>，为了表现的更好，遵循<a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler" target="_blank" rel="noopener">这个步骤</a> 可以让调节器的代码和渲染器的代码在打包时归到一处。（拷贝代码通常不是优化“打包后文件”（bundle）体积的好办法，但大多数React的使用者一次只需要一个渲染器，比如：<code>react-dom</code>（译者注：因此可以忽略调节器的存在））</p><p>The takeaway here 是<code>react</code>包仅仅让你知道如何使用React的特性而无需了解他们是如何被实现的。渲染器（<code>react-dom,react-native</code>等等）会提供React特性的实现和平台相关的逻辑；一些关于调节器的代码被分享出来了，但那只是单独渲染器的实现细节而已。</p><hr><p>现在我们知道了为什么<code>react</code>和<code>react-dom</code>包需要为新特定更新代码了。比如：当React16.3新增了Context接口时，<code>React.createContext()</code>方法会在React包中被暴露出来。</p><p>但是<code>React.createContext()</code>实际上不会实现具体的逻辑（译者注：只定义接口，由其他渲染器来实现逻辑）。并且，在React DOM和React DOM Server上实现的逻辑也会有区别。所以<code>createContext()</code>会返回一些纯粹的对象（定义如何实现）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 一个简单例子</span><br><span class="line">function createContext(defaultValue) &#123;</span><br><span class="line">  let context = &#123;</span><br><span class="line">    _currentValue: defaultValue,</span><br><span class="line">    Provider: null,</span><br><span class="line">    Consumer: null</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Provider = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.provider&apos;),</span><br><span class="line">    _context: context</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Consumer = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.context&apos;),</span><br><span class="line">    _context: context,</span><br><span class="line">  &#125;;</span><br><span class="line">  return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会在某处代码中使用<code>&lt;MyContext.Provider&gt;</code>或<code>&lt;MyContext.Consumer</code>&gt;，那里就是决定着如何处理他们的渲染器。React DOM会用A方法追踪context值，但React DOM Server或许会用另一个不同的方法实现。</p><p><strong>所以如果你将<code>react</code>升级到16.3+，但没有升级react-dom，你将使用一个还不知道<code>Provider</code>和<code>Consumer</code>类型的渲染器</strong>，这也就旧版的<code>react-dom</code>可能会<a href="https://stackoverflow.com/a/49677020/458193" target="_blank" rel="noopener">报错：fail saying these types are invalid</a>的原因。</p><p>同样的警告也会出现在React Native中，但是不同于React DOM，一个新的React版本不会立即产生一个对应的React Native版本。他们（React Native）有自己的发布时间表。大概几周后，渲染器代码才会<a href="https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss" target="_blank" rel="noopener">单独更新</a>到React Native库中。这就是为什么新特性在React Native生效的时间会和React DOM不同。</p><hr><p>Okay，那么现在我们知道了<code>react</code>包不包含任何好玩的东西，并且具体的实现都在像<code>react-dom</code>，<code>react-native</code>这样的渲染器中。但这并不能回答我们开头提出的问题。<code>React.Component</code>里的<code>setState()</code>是如何和对应的渲染器通信的呢？</p><p><strong>答案是每个渲染器都会在创建的类中添加一个特殊的东西</strong>，这个东西叫<code>updater</code>。它不是你添加的东西—恰恰相反，它是React DOM，React DOM Server 或者React Native在创建了一个类的实例后添加的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// React DOM 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMUpdater;</span><br><span class="line">// React DOM Server 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMServerUpdater;</span><br><span class="line">// React Native 中是这样</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactNativeUpdater;</span><br></pre></td></tr></table></figure><p>从 <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67" target="_blank" rel="noopener"><code>setState</code>的实现</a>就可以看出，它做的所有的工作就是把任务委托给在这个组件实例中创建的渲染器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 简单例子</span><br><span class="line">setState(partialState, callback) &#123;</span><br><span class="line">  // 使用`updater`去和渲染器通信</span><br><span class="line">  this.updater.enqueueSetState(this, partialState, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React DOM Server <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448" target="_blank" rel="noopener">可能想</a>忽略状态更新并且警告你，然而React DOM和React Native将会让调节器的拷贝部分去 <a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207" target="_blank" rel="noopener">处理它</a>。</p><p>这就是尽管<code>this.setState()</code>被定义在React包中也可以更新DOM的原因。它调用被React DOM添加的<code>this.updater</code>并且让React DOM来处理更新。</p><hr><p>现在我们都比较了解“类”了，但“钩子”（Hooks）呢？</p><p>当人们第一次看到 <a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">钩子接口的提案</a>时，他们常回想：<code>useState</code>是怎么知道该做什么呢？这一假设简直比对<code>this.setState()</code>的疑问还要迷人。</p><p>但就像我们如今看到的那样，<code>setState()</code>的实现一直以来都是模糊不清的。它除了传递调用给当前的渲染器外什么都不做。所以，<code>useState</code>钩子做的事也是如此。</p><p>这次不是<code>updater</code>，钩子（Hooks）使用一个叫做“分配器”（dispatcher）的对象，当你调用<code>React.useState()</code>、<code>React.useEffect()</code>或者其他自带的钩子时，这些调用会被推送给当前的分配器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// In React (simplified a bit)</span><br><span class="line">const React = &#123;</span><br><span class="line">  // Real property is hidden a bit deeper, see if you can find it!</span><br><span class="line">  __currentDispatcher: null,</span><br><span class="line"></span><br><span class="line">  useState(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useState(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  useEffect(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useEffect(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>单独的渲染器会在渲染你的组件之前设置分配器（dispatcher）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// In React DOM</span><br><span class="line">const prevDispatcher = React.__currentDispatcher;</span><br><span class="line">React.__currentDispatcher = ReactDOMDispatcher;let result;</span><br><span class="line">try &#123;</span><br><span class="line">  result = YourComponent(props);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  // Restore it back  React.__currentDispatcher = prevDispatcher;&#125;</span><br></pre></td></tr></table></figure><p>React DOM Server的实现在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354" target="_blank" rel="noopener">这里</a>。由React DOM和React Native共享的调节器实现在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js" target="_blank" rel="noopener">这里</a>。</p><p>这就是为什么像<code>react-dom</code>这样的渲染器需要访问和你调用的钩子所使用的<code>react</code>一样的包。否则你的组件将找不到分配器！如果你有<a href="https://github.com/facebook/react/issues/13991" target="_blank" rel="noopener">多个React的拷贝在相同的组件树中</a>，代码可能不会正常工作。然而，这总是造成复杂的Bug，因此钩子会在它耗光你的精力前强制你去解决包的副本问题。</p><p>如果你不觉得这有什么，你可以在工具使用它们前精巧地覆盖掉原先的分配器（<code>__currentDispatcher</code>的名字其实我自己编的但你可以在React仓库中找到它真正的名字）。比如：React DevTools会使用一个<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214" target="_blank" rel="noopener">特殊的内建分配器</a>来通过捕获JavaScript调用栈来反映（introspect）钩子。不要在家里重复这个（Don’t repeat this at home.）（译者注：可能是“不要在家里模仿某项实验”的衍生体。可能是个笑话，但我get到）</p><p>这也意味着钩子不是React固有的东西。如果在将来有很多类库想要重用相同的基础钩子，理论上来说分配器可能会被移到分离的包中并且被塑造成优秀的接口—会有更少让人望而生畏的名称—暴露出来。在实际中，我们更偏向去避免过于仓促地将某物抽象，直到我们的确需要这么做。</p><p><code>updater</code>和<code>__currentDispatcher</code>都是泛型程序设计（<em>依赖注入</em>/<em>dependency injection</em>）的绝佳实例。渲染器“注入”特性的实现。就像<code>setState</code>可以让你的组件看起来简单明了。</p><p>当你使用React时，你不需要考虑它是如何工作的。我们期望React用户去花费更多的时间去考虑它们的应用代码而不是一些抽象的概念比如：依赖注入。但如果你曾好奇<code>this.setState()</code>或<code>useState()</code>是怎么知道它们该做什么的，那我希望这篇文章将帮助到你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="翻译" scheme="/blog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="大前端" scheme="/blog/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative: 使用Animted API实现向上滚动时隐藏Header组件</title>
    <link href="/blog/2018/12/25/ReactNative-%E4%BD%BF%E7%94%A8Animted-API%E5%AE%9E%E7%8E%B0%E5%90%91%E4%B8%8A%E6%BB%9A%E5%8A%A8%E6%97%B6%E9%9A%90%E8%97%8FHeader%E7%BB%84%E4%BB%B6/"/>
    <id>/blog/2018/12/25/ReactNative-%E4%BD%BF%E7%94%A8Animted-API%E5%AE%9E%E7%8E%B0%E5%90%91%E4%B8%8A%E6%BB%9A%E5%8A%A8%E6%97%B6%E9%9A%90%E8%97%8FHeader%E7%BB%84%E4%BB%B6/</id>
    <published>2018-12-25T07:13:43.000Z</published>
    <updated>2020-04-11T08:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22773678&auto=0&height=66"></iframe><blockquote><p>想先推荐一下近期在写的一个React Native项目，名字叫 <a href="https://github.com/shuiRong/Gakki" target="_blank" rel="noopener">Gakki</a> ：是一个<a href="https://cmx.im" target="_blank" rel="noopener">Mastodon</a>的第三方客户端 （Android App）</p></blockquote><p><strong>预览</strong></p><p><img src="https://i.loli.net/2019/01/07/5c3362bb6401b.gif" alt="不见图请翻墙"></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="#写在前面"></a>#写在前面</h3><hr><p>本来我也不想造这个轮子的，奈何没找到合适的组件。只能自己上了～</p><p><strong>思路很清楚：</strong> 监听滚动事件，动态修改Header组件和Content组件的top值（当然，他们默认都是position:relative）。</p><p>接下来实现的时候遇到了问题，我第一个版本是通过动态设置state来实现，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 每次滚动时，重新设置headerTop的值</span><br><span class="line"> */</span><br><span class="line">onScroll = event =&gt;&#123;</span><br><span class="line">    const y = event.nativeEvent.contentOffset.y</span><br><span class="line">    if (y &gt;= 270) return</span><br><span class="line">    // headerTop即是Header和Content的top样式对应的值</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        headerTop: y</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样虽然能实现，但是效果不好：明显可以看到在上滑的过程中，Header组件一卡一卡地向上方移动（一点都不流畅）。</p><p>因为就只能另寻他法了：<strong>动画</strong></p><blockquote><p>React Native 提供了两个互补的动画系统：用于创建精细的交互控制的动画<a href="https://reactnative.cn/docs/animations#animated-api" target="_blank" rel="noopener"><code>Animated</code></a>和用于全局的布局动画<a href="https://reactnative.cn/docs/animations#layoutanimation-api" target="_blank" rel="noopener"><code>LayoutAnimation</code></a> （笔者注：这次没有用到它）</p></blockquote><h3 id="Animated-相关API介绍"><a href="#Animated-相关API介绍" class="headerlink" title="#Animated 相关API介绍"></a>#Animated 相关API介绍</h3><hr><p>首先，这儿有一个简单“逐渐显示”动画的<a href="https://reactnative.cn/docs/animations/#docsNav" target="_blank" rel="noopener">DEMO</a>，需要你先看完（文档很简单明了且注释清楚，没必要Copy过来）。</p><p>在看懂了DEMO的基础上，我们还需要了解两个<strong>关键</strong>的API才能实现完整的效果：</p><p><strong>1. interpolate</strong></p><p>插值函数。用来对不同类型的数值做映射处理。</p><blockquote><p>当然，这是文档说明：</p><p>Each property can be run through an interpolation first. An interpolation maps input ranges to output ranges, typically using a linear interpolation but also supports easing functions. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value.</p><p>翻译：</p><p>每个属性可以先经过插值处理。插值对输入范围和输出范围之间做一个映射，通常使用线性插值，但也支持缓和函数。默认情况下，<strong>如果给定数据超出范围，他也可以自行推断出对于的曲线</strong>，但您也可以让它箝位输出值（P.S. 最后一句可能翻译错误，因为没搞懂clamp value指的是什么, sigh…）</p></blockquote><p><strong>举个例子：</strong></p><p>在实现一个图片旋转动画时，输入值只能是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">  rotate: new Animated.Value(0) // 初始化用到的动画变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 这么映射是因为style样式需要的是0deg这样的值，你给它0这样的值，它可不能正常工作。因此必定需要一个映射处理。</span><br><span class="line">this.state.rotate.interpolate(&#123; // 将0映射成0deg，1映射成360deg。当然中间的数据也是如此映射。</span><br><span class="line">  inputRange: [0, 1],</span><br><span class="line">  outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. Animated.event</strong></p><p>一般动画的输入值都是默认设定好的，比如前面DEMO中的逐渐显示动画中的透明度：开始是0，最后是1。这是已经写死了的。</p><p>但如果有些动画效果需要的不是写死的值，而是动态输入的呢，比如：手势（上滑、下滑，左滑，右滑…）、其它事件。</p><p>那就用到了<code>Animated.event</code>。</p><p>直接看一个<strong>将滚动事件的y值(滚动条距离顶部高度)和我们的动画变量绑定起来</strong>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这段代码表示：在滚动事件触发时，将event.nativeEvent.contentOffset.y 的值动态绑定到this.state.headerTop上</span><br><span class="line">// 和最前面我通过this.setState动态设置的目的一样，但交给Animated.event做就不会造成视觉上的卡顿了。</span><br><span class="line">onScroll=&#123;Animated.event([</span><br><span class="line">   &#123;</span><br><span class="line">      nativeEvent: &#123;</span><br><span class="line">        contentOffset: &#123; y: this.state.headerTop &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">])&#125;</span><br></pre></td></tr></table></figure><p>关于API更多的说明请移步<a href="https://reactnative.cn/docs/animated.html#%E5%A4%84%E7%90%86%E6%89%8B%E5%8A%BF%E5%92%8C%E5%85%B6%E4%BB%96%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">文档</a></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="#完整代码"></a>#完整代码</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;</span><br><span class="line">import &#123; StyleSheet, Text, View, Animated, FlatList &#125; from &apos;react-native&apos;</span><br><span class="line"></span><br><span class="line">class List extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 模拟列表数据</span><br><span class="line">    const mockData = [</span><br><span class="line">      &apos;富强&apos;,</span><br><span class="line">      &apos;民主&apos;,</span><br><span class="line">      &apos;文明&apos;,</span><br><span class="line">      &apos;和谐&apos;,</span><br><span class="line">      &apos;自由&apos;,</span><br><span class="line">      &apos;平等&apos;,</span><br><span class="line">      &apos;公正&apos;,</span><br><span class="line">      &apos;法治&apos;,</span><br><span class="line">      &apos;爱国&apos;,</span><br><span class="line">      &apos;敬业&apos;,</span><br><span class="line">      &apos;诚信&apos;,</span><br><span class="line">      &apos;友善&apos;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">        onScroll=&#123;this.props.onScroll&#125;</span><br><span class="line">        data=&#123;mockData&#125;</span><br><span class="line">        renderItem=&#123;(&#123; item &#125;) =&gt; (</span><br><span class="line">          &lt;View style=&#123;styles.list&#125;&gt;</span><br><span class="line">            &lt;Text&gt;&#123;item&#125;&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class AnimatedScrollDemo extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      headerTop: new Animated.Value(0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    // P.S. 270,217,280区间的映射是告诉interpolate，所有大于270的值都映射成-50</span><br><span class="line">    // 这样就不会导致Header在上滑的过程中一直向上滑动了</span><br><span class="line">    this.top = this.state.headerTop.interpolate(&#123;</span><br><span class="line">      inputRange: [0, 270, 271, 280],</span><br><span class="line">      outputRange: [0, -50, -50, -50]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.animatedEvent = Animated.event([</span><br><span class="line">      &#123;</span><br><span class="line">        nativeEvent: &#123;</span><br><span class="line">          contentOffset: &#123; y: this.state.headerTop &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Animated.View style=&#123;&#123; top: this.top &#125;&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.header&#125;&gt;</span><br><span class="line">            &lt;Text style=&#123;styles.text&#125;&gt;linshuirong.cn&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/Animated.View&gt;</span><br><span class="line">        &#123;/* 在oHeader组件上移的同时，列表容器也需要同时向上移动，需要注意。 */&#125;</span><br><span class="line">        &lt;Animated.View style=&#123;&#123; top: this.top &#125;&#125;&gt;</span><br><span class="line">          &lt;List onScroll=&#123;this.animatedEvent&#125; /&gt;</span><br><span class="line">        &lt;/Animated.View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  list: &#123;</span><br><span class="line">    height: 80,</span><br><span class="line">    backgroundColor: &apos;pink&apos;,</span><br><span class="line">    marginBottom: 1,</span><br><span class="line">    alignItems: &apos;center&apos;,</span><br><span class="line">    justifyContent: &apos;center&apos;,</span><br><span class="line">    color: &apos;white&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">    height: 50,</span><br><span class="line">    backgroundColor: &apos;#3F51B5&apos;,</span><br><span class="line">    alignItems: &apos;center&apos;,</span><br><span class="line">    justifyContent: &apos;center&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  text: &#123;</span><br><span class="line">    color: &apos;white&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="大前端" scheme="/blog/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactNative" scheme="/blog/tags/ReactNative/"/>
    
      <category term="AnimtedAPI" scheme="/blog/tags/AnimtedAPI/"/>
    
      <category term="动画" scheme="/blog/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>写在读完《时光之轮》之后</title>
    <link href="/blog/2018/08/07/%E5%86%99%E5%9C%A8%E8%AF%BB%E5%AE%8C%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E4%B9%8B%E5%90%8E/"/>
    <id>/blog/2018/08/07/%E5%86%99%E5%9C%A8%E8%AF%BB%E5%AE%8C%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E4%B9%8B%E5%90%8E/</id>
    <published>2018-08-07T10:16:11.000Z</published>
    <updated>2018-10-07T11:17:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看了一年的《时光之轮》，还是到了结束的时候～</p></blockquote><p>看着我们的几位主角（兰德，麦特，佩林，奈妮薇，艾雯…），走出伊蒙村，在世界各地历练，经历磨难，一步步成长，经历着必将会被吟游诗人传唱的人生～</p><p><strong>忽然觉得，现实生活是如此苍白、无意义～</strong></p><h4 id="艾塞达依与三誓"><a href="#艾塞达依与三誓" class="headerlink" title="艾塞达依与三誓"></a>艾塞达依与三誓</h4><hr><blockquote><p>艾塞达依（Aes Sedai）：李镭的版本翻译成了两仪师，但我更喜欢这个音译版。</p></blockquote><p>艾塞达依是兰德大陆上最有力量的一群女人，因为她们能<strong>引导至上力</strong>！</p><p>在至上力战争后的千年里，几乎没有任何势力能与他们匹敌。（艾伊尔人不问“世”事，霄辰人还远在大洋另一边）</p><p>正常来讲，<strong>“绝对的权力应该会导致绝对的堕落”</strong>，各国人众应该奋起反抗<strong>“强权”</strong>来着。但事实却不是这样：各国都愿意遵从艾塞达依的指引，艾塞达依也在积极扮演着“世界守护者”的角色。</p><p><strong>为什么会这样？</strong></p><p><strong>因为三誓！</strong></p><p>每一个能引导至上力的女人在从见习生晋升为正式的艾塞达依时，都会握着誓言之杖（一件传奇纪元流传下来的法器）立下这三个誓言：</p><ul><li><strong>在光明之下，我发誓绝不说虚妄之言。</strong></li><li><strong>在光明之下，我发誓不为男人制造武器，让他去伤害别人。</strong></li><li><strong>在光明之下，除了对抗暗之友和暗影生物，或者是在危急关头保护自己、护法和其他艾塞达依的生命之外，不将至上力当作武器使用。</strong></li></ul><p>三誓就是艾塞达依之所以是艾塞达依，人们会敬畏、而不是恐惧白塔的原因，就如前艾梅林玉座史汪·桑晨所说：</p><blockquote><p>“是三誓让我们不再只是一群操纵这个世界的女人，或者是七群，或者十五群。誓言将我们聚为一体，让我们有了共同的信仰，彼此相连。是三誓让我们成为艾塞达依，而不是至上力。任何野人都能导引。人们也许会用不同的眼光看待我们所说的话，但当一个姊妹说‘是这样’，他们便会知道那的确就是这样。他们会相信，是因为三誓。因为三誓，没有任何女王害怕姊妹们会让她们的城市血流成河；最坏的恶棍也会知道，他在一位姊妹身边是安全的，除非他想要伤害那位姊妹。是的，白袍众说三誓是谎言，一些人对于三誓有着奇怪的看法，但世界上很少有什么地方艾塞达依不能去，很少有人会不听艾塞达依的话，这全都因为三誓。<strong>三誓是艾塞达依之所以成为艾塞达依的原因；是艾塞达依的核心。如果将三誓扔进垃圾堆，我们就会成为被洪流冲走的沙子。</strong>”</p></blockquote><p><strong>另外，</strong> 因为她们不能说谎，所以艾塞达依发展出一套<strong>用真话表达另一种含意的艺术</strong>。（即，她们都是文字游戏的高手～）</p><blockquote><p>“她们不能说谎，但她们可以把事实说得扑朔迷离”</p><p>“她们不能说谎，但她们说的事实往往不是你所想的那个”</p></blockquote><p>这门艺术很有趣，也很实用:p，我要学一下～</p><blockquote><p><strong>记录一些这样的例子：</strong></p><p>A：B，推荐一些Node.js的书吧</p><p>B：没看过什么靠谱的书</p><p>笔者：存在两种理解。1. B看过<strong>很多</strong>相关的书，觉得大都不靠谱。2. B只看过<strong>很少</strong>的相关书籍，而且都觉得不靠谱。但普通人都会<strong>“下意识”</strong>地认为情况属于第一种。那么就可以利用这种<strong>“下意识”</strong></p><p>A：（看完了围城）觉得钱钟书的文字真是幽默哈</p><p>B：围城啊，之前我也<strong>看过</strong></p><p>….</p><p>A：你是全看完了吗？</p><p>B：不，只看了前言</p><p>笔者： B并没有撒谎，他的确<strong>看过</strong>围城。但对于<strong>“看过某书”</strong>，常人会<strong>下意识</strong>地认为他<strong>”看完过“</strong>某书…</p></blockquote><h4 id="圣光之子与黑暗"><a href="#圣光之子与黑暗" class="headerlink" title="圣光之子与黑暗"></a>圣光之子与黑暗</h4><hr><p>圣光之子是一个类似于宗教的组织，目的是搜寻黑暗之友，消除邪恶与堕落。</p><p>他们自称<strong>“行走在光明之中”，但行的却是“黑暗”之事</strong>：往往未经任何审判就指控别人是黑暗之友。所谓的“光明与正义”成了他们为一己私利而行恶事的遮羞布，尽管有些光之子可能根本没有意识到这点。</p><p>前几天曝光的<strong><a href="http://xqdoc.imedao.com/164f59c8b1799c43fe3a7953.pdf" target="_blank" rel="noopener">龙泉寺95页PDF事件</a></strong>是一个活生生的例子：住持释学诚<strong>“借佛之名行淫秽（私欲）之事”</strong>。</p><p><strong>因此，越是“伟光正”我们越是要警惕。毕竟，不能对人性有什么期待。</strong></p><p><del>（处于水深火热的各国人民等着我们去拯救？）</del></p><h4 id="艾伊尔与荣誉（节义）"><a href="#艾伊尔与荣誉（节义）" class="headerlink" title="艾伊尔与荣誉（节义）"></a>艾伊尔与荣誉（节义）</h4><hr><p>艾伊尔是小说中最为奇特的一个民族。</p><p>艾伊尔人一直生活在三绝之地（戈壁），极少与外界交流，这是（奇特的）艾伊尔文化形成的前提。</p><p>他们的文化：</p><blockquote><p>女性（枪姬众）和男性并肩作战；</p><p>女性要结婚就必须放下枪矛；</p><p>枪姬众如果怀孕且不打算放下枪矛，那么孩子将会由智者交给他人抚养，且枪姬众不会知道哪个是自己的孩子；</p><p>对裸露没什么禁忌；</p><p>只有男性可以成为氏族酋长；只有女性可以成为智者；</p><p>只有女性可以拥有财产。部落的财产拥有者称之为<strong>“顶主妇”</strong>，顶主妇对栖息地有绝对的权威。只有经过顶主妇的允许，酋长才可以进入栖息地；</p><p>在婚姻中，女性有绝对的主动权。只有女性才可以要求结婚等。</p><p>一夫多妻制；多个妻子互称为<strong>“首姐妹”</strong>。</p><p>…</p></blockquote><p>艾伊尔人对<strong>“荣誉（他们称之为节义）”</strong>的坚持，更让人尊敬。他们的生活准则就是“节义”，节义约束着他们的方方面面：</p><ul><li>战斗可以获得义，但在可以杀死对方却选择不伤害他时能获取更大的义；</li><li>俘虏会成为<strong>“奉义徒”</strong>，侍奉俘虏他的人一年零一天（侍奉用来赎回在战斗中失去的义），然后就能回到原先的部族；奉义徒不参与战争，即使是末日战争！</li><li>艾伊尔没有间谍行为，因为这会亏损巨大的义；</li><li>…</li></ul><p>总而言之，艾伊尔是一个<strong>“令人着迷”</strong>的民族～</p><h4 id="艾梅林玉座：艾雯·艾威尔"><a href="#艾梅林玉座：艾雯·艾威尔" class="headerlink" title="艾梅林玉座：艾雯·艾威尔"></a>艾梅林玉座：艾雯·艾威尔</h4><hr><blockquote><p>艾雯是我最偏爱的一个女性角色，甚至超过了沐瑞～</p></blockquote><p><strong>艾雯被囚禁在白塔时的表现，在我看来最能表现她是玉座的不二人选！</strong></p><p>她像艾伊尔人一样拥抱痛苦，逐渐赢得了所有人的尊敬。在她最初被囚禁的日子里，甚至初阶生都不相信她的确是玉座。</p><blockquote><p>她们（初阶生）完全没想到，她虽然同样身穿白抱，也和她们睡在一个地方，却还是会宣称自己是玉座</p></blockquote><p>甚至其中最捣蛋的一位，奥薇丝特，<strong>居然敢偷偷地用脚绊艾雯！</strong></p><blockquote><p>在前往厨房门口的半路上，一名个子矮小、留着黑色长发的初阶生突然伸出一只脚，绊了她 一下。 艾雯勉强维持住平衡，但还是差点把额头撞在地面上。她冷冷地转过头。又一场遭遇战。</p></blockquote><p>另一位是值得写出来的是<strong>见习生妮可拉</strong>，在沙力达阵营时公开反抗艾雯的权威，后来因为想更快的学习引导至上力而叛逃到白塔阵营。但也因为艾雯被囚禁时的表现而转变态度，成为艾雯忠实的追随者（另一位是上面的捣蛋鬼奥薇丝特，有趣～）。后来在黑结攻击白塔时牺牲了～</p><p>在白塔阵营里，初阶生是最早一批承认艾雯权威的人。非常有趣～</p><blockquote><p>她听到妮可拉正在和两名不过十五、六岁的初阶生说 话。艾雯几乎不记得自己这么小的时候是什么样子了，那彷彿都已经是另外一个人 生。这两个女孩分别是矮胖的莫兰迪人麦拉爱，她有着一双调皮的蓝眼睛；还有高瘦的阿拉多曼人娜梅恩，她总是在 「咯咯」地笑着。 <strong>「去问问吾母。」妮可拉说。已经有几个初阶生在这样称呼艾雯了。</strong>当然，她们绝不会在有外人在场的时候这样说。她们都是傻女孩，不过总算还不是愚不可及。 <strong>「她会给妳们建议的。」</strong> 娜梅恩紧张地笑着，绞动着手指（P.S.：非常有画面感的描述！）， <strong>「我不想打扰她。」</strong></p></blockquote><p>艾雯有太多精彩的表现了，比如：<a href="https://linshuirong.cn/2018/07/16/%E3%80%8A%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE%E3%80%8B%E7%B2%BE%E5%BD%A9%E7%89%87%E6%AE%B5/" target="_blank" rel="noopener">艾雯与爱莉达的对决（精彩辩论）</a></p><p>（省略五千字艾雯是如何一步步赢得其他艾塞达依尊敬的…） </p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><hr><p><strong>作者对男人、女人的态度一度让我很震惊（也觉得很好玩）～</strong></p><blockquote><p>如果女人不想听到某些话，她就会彻底充耳不闻，直到你也开始怀疑自己是否说过这些话</p><p>那个女人为了决定要从哪一边下床，会一直在床上躺到中午！</p><p>「你确定你没告诉他任何事？」奈妮薇问。在房间对面，泽凌的手在石雕棋盘上停了一下。他用愤怒又无辜的眼神看着奈妮薇。「我还要说多少次？」<strong>愤怒无辜的表情是男人最擅长的手段之一，特别是当它们像溜进鸡舍的狐狸般犯下罪行时。</strong></p><p>这三个家伙之遥聚在一起就会立刻交换各种流言蜚语。<strong>男人都是这样。</strong></p><p>汤姆这句话是什么意思？每个人都知道，<strong>男人永远比同龄的女人小十岁。</strong></p><p>当然，这个男人是不会接受教训的。<strong>男人总是会去玩火，以为这一次不会烧起来。</strong></p><p>女人能够喋喋不休的指责一个人的每一点错误，直到那个人觉得自己陷进万劫不复的深渊。</p><p>在两河有一句谚语，不过怎么理解它就因人而异了：<strong>「永远都是男人的错」</strong>。现在佩林已经知道女人最擅长的一件事，就是让男人叹气。</p><p>麦特的结论是：女人都有暴力倾向，而不仅仅是她们之中的少数人。</p><p>那些女人真会惹麻烦。当然，<strong>这是女人最擅长的事情。</strong></p><p>一个女人如果敢饿死一个男人，她就敢做任何事。</p><p>如果让男人说太久，她们就会占上风。</p><p>她们也许会将这一点秘密和另一个女人分享，但绝不会告诉男人。<strong>这是他对女人唯一能确定的一件事。</strong></p><p><strong>男人在许多方面都是奇怪的生物。</strong>一分钟之前，他们会接受正确的建议，只过了一分钟，他们又会反其道而行之。</p><p>一般在女人犯错时，她们总是能找到许多借口责备她们身边的男人，直到男人们开始怀疑也许真的是自己犯了错。<strong>根据麦特的经验，只有两种情况下女人会承认自己错了：当她们想要某件东西的时候；当夏天下雪的时候。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;看了一年的《时光之轮》，还是到了结束的时候～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看着我们的几位主角（兰德，麦特，佩林，奈妮薇，艾雯…），走出伊蒙村，在世界各地历练，经历磨难，一步步成长，经历着必将会被吟游诗人传唱的人生～&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="时光之轮" scheme="/blog/tags/%E6%97%B6%E5%85%89%E4%B9%8B%E8%BD%AE/"/>
    
      <category term="书评" scheme="/blog/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的权威</title>
    <link href="/blog/2018/07/25/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E6%9D%83%E5%A8%81/"/>
    <id>/blog/2018/07/25/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E6%9D%83%E5%A8%81/</id>
    <published>2018-07-25T15:51:43.000Z</published>
    <updated>2018-07-26T14:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26522008&auto=0&height=66"></iframe><p><strong>我不相信权威！</strong></p><blockquote><p>不只是权威，我对任何人的言论都有所保留。除非它符合逻辑，也就是说，它要听起来“有道理”。但“权威”是比较典型的群体，所以本文借它来说理</p></blockquote><p><strong>注</strong> 为了避免无意义地争论，我有必要解释下这句话：看待事物不要走极端。我不是不相信“每一个”权威，也不是不相信权威说的“每一句话”。<strong>我的意思是，在公共场合下，权威们所说的大部分话，我都持怀疑态度。</strong></p><h3 id="在其位谋其政"><a href="#在其位谋其政" class="headerlink" title="在其位谋其政"></a>在其位谋其政</h3><hr><p>换句话说，屁股决定脑袋。<br>趋利避害是人的本能。人做的事，说的话，背后大都是有利益等考量，公共场合更是如此。只不过具体怎样的利益考量，只有他自己知道了。</p><p><strong>正是因为权威说的话大都是出于利益等考量，而不是出于对真理，对事实的追求。所以我才会说“我不相信权威”。</strong></p><p>经常在网络上看到有人在争论。</p><p>如果我发现某个人和其“争论的对象”有利益关联或者说其他人性/心理方面的动机（比如：和一个贫穷的人讨论“贫穷和愚昧的关系”，他就有可能仅仅因为“对号入座”而不顾事实逻辑，一味反驳；很多人听不得对当下社会的批评言论也是出于某种“奇怪的心理原因”，尽管事实如此。），那么他的观点的可信度就会大大降低。</p><blockquote><p>前段时间“李笑来通话录音流出”，又证实了我的想法：大多数所谓“知名人士”只是把大众当成“可以随意摆弄的对象”（本来想说“傻逼”，但这个词太情绪化了，遂换之）罢了，没别的。还有这么多人把他们的言论奉为圭臬，呵呵。</p></blockquote><p>这么多人轻信权威的话，可能是觉得：<strong>因为</strong>权威比自己更专业，见识更多，更有经验，更….<strong>所以</strong>权威的言论就更可靠。<br>这个因果关系看上去<strong>似乎</strong>没问题。</p><p>但这句话正确的一个前提却被大众忽略了，而这个前提恰恰是致命的：权威在经过一番权衡后（利益？道德？），认为告诉大众<strong>“正确的话”</strong>是符合<strong>“他的需求”</strong>的。</p><p>那么问题来了：如果权威在经过一番权衡后，认为告诉大众<strong>“错误的话”</strong>是符合<strong>“他的需求”</strong>的呢？</p><h3 id="预设观点"><a href="#预设观点" class="headerlink" title="预设观点"></a>预设观点</h3><hr><p>相信多数人在看到权威的观点前都会有自己的“观点”。</p><p>多数人发现权威的观点和自己的一致，会笑着点了点头说：“嗯，果然我想的没错！”，然后就吃瓜去了。</p><blockquote><p>这种人只是在欺骗自己罢了。他们了解权威观点的唯一目的只是想确认”权威的观点和自己的一致“。并且这里还有个隐藏的预设：他们潜意识认为“权威的观点就是正确的”。</p><p>他们这种行为还反映出他们的<strong>不自信</strong>。居然需要别人告诉自己是对的，自己才觉得自己是对的，呵。</p><p>那么这种人在发现权威观点和自己的不一致时，也只会抛弃自己的观点，选择接受权威的观点，而不会去主动思考！思考！思考！</p></blockquote><p>少数人则不止于此，会去思考权威说的话是否有逻辑问题，数据引用是否正确等，还会继续通过搜索引擎去看其他人的观点，尤其是相反的观点，<strong>继续思考</strong>！</p><h3 id="尽信书不如无书"><a href="#尽信书不如无书" class="headerlink" title="尽信书不如无书"></a>尽信书不如无书</h3><hr><p>“努力很重要”</p><p>“选择比努力重要”</p><p>“选择虽然比努力重要，但坚持比选择更重要”</p><blockquote><p>可能有人会抓狂说：”他喵的，到底哪个重要？”</p><p><strong>纠结哪个重要根本无关紧要！</strong></p></blockquote><p>在我高中的某个时刻突然发现：针对同一件事，一个人可以出于不同的考量而说出相反却都有说服力的话之后，我就决定<strong>不再只是一味地接受任何人的观点了。</strong></p><p>所谓<strong>尽信书不如无书</strong>，就是这个道理。</p><h3 id="独立思考"><a href="#独立思考" class="headerlink" title="独立思考"></a>独立思考</h3><hr><p>“独立思考”简直太重要了。重要到什么程度呢？完全可以说是“性命攸关”。</p><p>它可以帮助你在生活中面临大大小小的选择时，<strong>大概率</strong>能选择到更有利的那一个。</p><p>关于独立思考，不想聊了。</p><p>其他相关文章及讨论：</p><p><a href="https://program-think.blogspot.com/2010/10/book-review-asking-right-questions.html" target="_blank" rel="noopener">书评：《学会提问——批判性思维指南》</a> （需科学上网）</p><p><a href="https://www.zhihu.com/question/19649898" target="_blank" rel="noopener">什么是独立思考？如何独立思考？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="一些思考" scheme="/blog/categories/%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="权威" scheme="/blog/tags/%E6%9D%83%E5%A8%81/"/>
    
      <category term="独立思考" scheme="/blog/tags/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
